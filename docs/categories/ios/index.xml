<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iOS on ksnowlv技术笔记</title>
    <link>https://ksnowlv.github.io/categories/ios/</link>
    <description>Recent content in iOS on ksnowlv技术笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 19 Aug 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://ksnowlv.github.io/categories/ios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>XCode使用PMD扫描重复代码（一）</title>
      <link>https://ksnowlv.github.io/post/2019-08-19-xcodeshi-yong-pmdsao-miao-zhong-fu-dai-ma/</link>
      <pubDate>Mon, 19 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-08-19-xcodeshi-yong-pmdsao-miao-zhong-fu-dai-ma/</guid>
      <description>如何使用PMD在XCode下扫描重复代码（Copy&amp;amp;Past）呢？ 1.下载PMD：https://pmd.github.io，放置到</description>
    </item>
    
    <item>
      <title>flutter安装和运行</title>
      <link>https://ksnowlv.github.io/post/2019-05-22-flutteran-zhuang-he-yun-xing/</link>
      <pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-05-22-flutteran-zhuang-he-yun-xing/</guid>
      <description>1.创建flutter工程目录（各项目+flutter目录），在flutter 目录下载flutter SDK git init git clone -b dev https://github.com/flutter/flutter.git 2.进入flutter S</description>
    </item>
    
    <item>
      <title>flutter创建工程报错</title>
      <link>https://ksnowlv.github.io/post/2019-05-22-flutter-cannot-create-a-project-within-the-flutter-sdk/</link>
      <pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-05-22-flutter-cannot-create-a-project-within-the-flutter-sdk/</guid>
      <description>1.问题 在使用 flutter create命令创建flutter工程时，如果报`Cannot create a project within the Flutter SDK. Target directory &amp;lsquo;/Users/ksnowlv/Music/flutter/flutter/my_app&amp;rsquo; is within the Flutter SDK at &amp;lsquo;/Users/k</description>
    </item>
    
    <item>
      <title>iOS指针集合类</title>
      <link>https://ksnowlv.github.io/post/2018-04-23-ioszhi-zhen-ji-he-lei/</link>
      <pubDate>Mon, 23 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-04-23-ioszhi-zhen-ji-he-lei/</guid>
      <description>Collections之Pointer Collections ：指针集合类 NSPointerArray NSHashTable NSMapTable 1.NSPointerFunctionsOptionsDefines the memory and personality options for an NSPointerFunctions object. NSPointerFunctionsMachVirtualMemory NSPointerFunctionsMallocMemory Use free() on removal, calloc() on copy in. NSPointerFunctionsOpaqueMemory NSPointerFunctionsStrongMemory NSPointerFunctionsWeakMemory Uses weak read and write barriers appropriate for ARC or GC. Using NSPointerFunctionsWeakMemory object references will turn to</description>
    </item>
    
    <item>
      <title>非对称加解密算法之DSA-iOS中的应用</title>
      <link>https://ksnowlv.github.io/post/2018-04-20-fei-dui-cheng-jia-jie-mi-suan-fa-zhi-dsa-ioszhong-de-ying-yong/</link>
      <pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-04-20-fei-dui-cheng-jia-jie-mi-suan-fa-zhi-dsa-ioszhong-de-ying-yong/</guid>
      <description>1.引用openssl库 https://github.com/x2on/OpenSSL-for-iPhone 2.对数据进行签名 /*对数据进行签名 @param data 要签名的数据 @return 签名后数据 */ - (NSData *)sign:(NSData *)data { int dsaSize = DSA_size(_privateDSAKey); unsigned char *signBuf = (unsigned char *)calloc(dsaSize, 1); memset(signBuf, 0, dsaSize *sizeof(unsigned char)); unsigned int</description>
    </item>
    
    <item>
      <title>非对称加解密算法之ECC</title>
      <link>https://ksnowlv.github.io/post/2018-04-20-fei-dui-cheng-jia-jie-mi-suan-fa-zhi-ecc/</link>
      <pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-04-20-fei-dui-cheng-jia-jie-mi-suan-fa-zhi-ecc/</guid>
      <description>ECC算法用途比RSA还厉害。 支持加解密。 支持签名验证。 支持与DH结合使用，用于密钥磋商，这个密钥交换算法称为ECDH。 * 交换双方可以在不共</description>
    </item>
    
    <item>
      <title>常见非对称加密算法</title>
      <link>https://ksnowlv.github.io/post/2018-04-19-chang-jian-fei-dui-cheng-jia-mi-suan-fa/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-04-19-chang-jian-fei-dui-cheng-jia-mi-suan-fa/</guid>
      <description>常见非对称加密算法有哪些呢？ 1.RSA。 2.DSA。 3.ECC/ECDH/ECDSA。 4.Elgamal：Elgamal算法 5.背包算法： 对</description>
    </item>
    
    <item>
      <title>常见散列算法</title>
      <link>https://ksnowlv.github.io/post/2018-04-17-ioszhong-san-lie-suan-fa/</link>
      <pubDate>Tue, 17 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-04-17-ioszhong-san-lie-suan-fa/</guid>
      <description>散列算法 常见的单向散列算法，可用于数字签名，单向的，不可逆向，并非加密算法。 主要用途是为了校验数据在传输过程中是否被修改。 1.MD5(Message Digest algorithm 5，信息摘要</description>
    </item>
    
    <item>
      <title>非对称加解密算法之DSA---dsa公钥与私钥 </title>
      <link>https://ksnowlv.github.io/post/2018-04-17-fei-dui-cheng-jia-jie-mi-suan-fa-zhi-dsa-zhi-yi/</link>
      <pubDate>Tue, 17 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-04-17-fei-dui-cheng-jia-jie-mi-suan-fa-zhi-dsa-zhi-yi/</guid>
      <description>DSA(Digital Signature Algorithm)：非对称加密算法，安全性与RSA相比差不多。 DSA只是一种算法，和RSA不同之处在于它不能用作加密和解密，也不能进行</description>
    </item>
    
    <item>
      <title>非对称加解密算法之DSA---dsa公钥与私钥 </title>
      <link>https://ksnowlv.github.io/post/2018-04-18-fei-dui-cheng-jia-jie-mi-suan-fa-zhi-dsa-zhi-yi/</link>
      <pubDate>Tue, 17 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-04-18-fei-dui-cheng-jia-jie-mi-suan-fa-zhi-dsa-zhi-yi/</guid>
      <description>DSA(Digital Signature Algorithm)：非对称加密算法，安全性与RSA相比差不多。 DSA只是一种算法，和RSA不同之处在于它不能用作加密和解密，也不能进行</description>
    </item>
    
    <item>
      <title>苹果开发者账号id绑定手机号</title>
      <link>https://ksnowlv.github.io/post/2018-04-17-ping-guo-kai-fa-zhe-zhang-hao-idbang-ding-shou-ji-hao/</link>
      <pubDate>Tue, 17 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-04-17-ping-guo-kai-fa-zhe-zhang-hao-idbang-ding-shou-ji-hao/</guid>
      <description>问题 最近苹果开发者账号提醒 &amp;ldquo;The Apple Developer Program License Agreement has been updated&amp;rdquo; 内容如下： In order to access certain membership resources, you must accept the latest license agreement. First, you’ll need to update the mobile phone number associated with your Apple ID. Your mobile phone number must be based in your country/region.</description>
    </item>
    
    <item>
      <title>http1.1与2.0主要区别</title>
      <link>https://ksnowlv.github.io/post/2018-04-13-http1-dot-1yu-2-dot-0zhu-yao-qu-bie/</link>
      <pubDate>Fri, 13 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-04-13-http1-dot-1yu-2-dot-0zhu-yao-qu-bie/</guid>
      <description>http2.0与1.1相比较，有哪些区别呢？ 1.数据格式不同 数据格式http2.0采用的是二进制格式，http1.1采用的是文本格式。 二进制</description>
    </item>
    
    <item>
      <title>iOS加载拉伸的图片</title>
      <link>https://ksnowlv.github.io/post/2017-12-29-iosjia-zai-la-shen-de-tu-pian/</link>
      <pubDate>Fri, 29 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2017-12-29-iosjia-zai-la-shen-de-tu-pian/</guid>
      <description>iOS如何加载拉伸的图片呢？ 1.通过代码指定拉伸区域加载图片 + (UIImage*)stretchImage:(NSString *)imageName { UIImage *image = [UIImage imageNamed:imageName]; if ([image respondsToSelector:@selector(resizableImageWithCapInsets:)]) { CGSize imageSize = image.size; image = [image resizableImageWithCapInsets:UIEdgeInsetsMake(imageSize.height/2, imageSize.width/2, imageSize.height/2, imageSize.width/2)]; } else{ image = [image stretchableImageWithLeftCapWidth:1 topCapHeight:1]; } return image; } 2.通过A</description>
    </item>
    
    <item>
      <title>iOS自动循环播放的banner</title>
      <link>https://ksnowlv.github.io/post/2017-12-25-ioszi-dong-xun-huan-bo-fang-de-banner/</link>
      <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2017-12-25-ioszi-dong-xun-huan-bo-fang-de-banner/</guid>
      <description>自动循环播放的banner是很常见的UI组件。如何实现呢？ 一.实现思路 1.横向滚动的banner。 UIScrollViw+UIImageView. UICollectionView+UICollectionViewCell. 前者需要自己做重用UIImageVie</description>
    </item>
    
    <item>
      <title>iOS之url编解码</title>
      <link>https://ksnowlv.github.io/post/2017-12-15-ioszhi-urlbian-jie-ma/</link>
      <pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2017-12-15-ioszhi-urlbian-jie-ma/</guid>
      <description>iOS 开发中，经常需要对url编码与解码。 iOS9之前 1.url编码 + (NSString*)encodeUrl:(NSString *)urlString { if (0 == urlString.length) { return KBlankString; } return (__bridge_transfer NSString*) CFURLCreateStringByAddingPercentEscapes(kCFAllocatorDefault, (CFStringRef)urlString, NULL, (CFStringRef)@&amp;#34;!*&amp;#39;();:@&amp;amp;=+$,/?%#[]&amp;#34;, kCFStringEncodingUTF8); } 2.url解码 + (NSString *)decodeUrl:(NSString *)urlString { if (0 == urlString.length) {</description>
    </item>
    
    <item>
      <title>iOS状态栏风格设置</title>
      <link>https://ksnowlv.github.io/post/2017-12-04-ioszhuang-tai-lan-feng-ge-she-zhi/</link>
      <pubDate>Mon, 04 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2017-12-04-ioszhuang-tai-lan-feng-ge-she-zhi/</guid>
      <description>iOS的状态栏风格更改 iOS 的状态栏风格如何更改呢？ iOS9及之前使用UIApplication 的setStatusBarStyle修改状态栏风</description>
    </item>
    
    <item>
      <title>客户端白屏问题解决方案</title>
      <link>https://ksnowlv.github.io/post/2017-12-04-ke-hu-duan-bai-ping-wen-ti-jie-jue-fang-an/</link>
      <pubDate>Mon, 04 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2017-12-04-ke-hu-duan-bai-ping-wen-ti-jie-jue-fang-an/</guid>
      <description>关于客户端白屏解决方案。 一.现象 客户端中原生或h5的页面,有时会出现白屏现象.如何解决呢？ 二.解决方案 针对这种现象，着眼于提升页面加载速度和</description>
    </item>
    
    <item>
      <title>IB_DESIGNABLE与IBInspectable的使用</title>
      <link>https://ksnowlv.github.io/post/2017-11-27-ib-designableyu-ibinspectablede-shi-yong/</link>
      <pubDate>Mon, 27 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2017-11-27-ib-designableyu-ibinspectablede-shi-yong/</guid>
      <description>iOS开发中经常会用到一些自定义UI控件，控件的效果和属性可以通过IB_DESIGNABLE和IBInspectable预览和修改。 IB_DESIGNABLE 自定义</description>
    </item>
    
    <item>
      <title>iOS下使用ffmpeg</title>
      <link>https://ksnowlv.github.io/post/2017-4-22-ios-xia-shi-yong-ffmpeg/</link>
      <pubDate>Sat, 22 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2017-4-22-ios-xia-shi-yong-ffmpeg/</guid>
      <description>iOS下如何使用FFmpeg呢？ 1.编译FFmpeg 编译FFmpeg所需要的脚本文件gas-preprocessor.pl将脚本文件gas-</description>
    </item>
    
    <item>
      <title>FaceBook-infer的使用</title>
      <link>https://ksnowlv.github.io/post/2015-08-19-facebook-infer-de-shi-yong/</link>
      <pubDate>Wed, 19 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2015-08-19-facebook-infer-de-shi-yong/</guid>
      <description>Facebook推出潜在一款bug扫描工具(http://fbinfer.com)，可以检查 iOS/Android App. MAC上的安装 一.环境要求 1.Python版</description>
    </item>
    
  </channel>
</rss>
