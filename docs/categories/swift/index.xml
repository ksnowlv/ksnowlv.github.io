<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>swift on ksnowlv技术笔记</title>
    <link>https://ksnowlv.github.io/categories/swift/</link>
    <description>Recent content in swift on ksnowlv技术笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 06 Oct 2023 17:23:29 +0800</lastBuildDate><atom:link href="https://ksnowlv.github.io/categories/swift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Swift Openssl下aes Ofb128模式下加解密</title>
      <link>https://ksnowlv.github.io/post/swift-openssl%E4%B8%8Baes-ofb128%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%8A%A0%E8%A7%A3%E5%AF%86/</link>
      <pubDate>Fri, 06 Oct 2023 17:23:29 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/swift-openssl%E4%B8%8Baes-ofb128%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%8A%A0%E8%A7%A3%E5%AF%86/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Swift Openssl下aes Cfb1模式下加解密</title>
      <link>https://ksnowlv.github.io/post/swift-openssl%E4%B8%8Baes-cfb1%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%8A%A0%E8%A7%A3%E5%AF%86/</link>
      <pubDate>Thu, 05 Oct 2023 20:07:22 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/swift-openssl%E4%B8%8Baes-cfb1%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%8A%A0%E8%A7%A3%E5%AF%86/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Swift Openssl下aes Cfb8模式下加解密</title>
      <link>https://ksnowlv.github.io/post/swift-openssl%E4%B8%8Baes-cfb8%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%8A%A0%E8%A7%A3%E5%AF%86/</link>
      <pubDate>Wed, 04 Oct 2023 20:05:42 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/swift-openssl%E4%B8%8Baes-cfb8%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%8A%A0%E8%A7%A3%E5%AF%86/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Swift Openssl中aes的使用</title>
      <link>https://ksnowlv.github.io/post/swift-openssl%E4%B8%ADaes%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 25 Sep 2023 18:04:01 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/swift-openssl%E4%B8%ADaes%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Swift Openssl的安装与使用</title>
      <link>https://ksnowlv.github.io/post/swift-openssl%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 21 Sep 2023 21:07:53 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/swift-openssl%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Swift ECDHE加解密</title>
      <link>https://ksnowlv.github.io/post/swift-ecdhe%E5%8A%A0%E8%A7%A3%E5%AF%86/</link>
      <pubDate>Wed, 20 Sep 2023 19:30:29 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/swift-ecdhe%E5%8A%A0%E8%A7%A3%E5%AF%86/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Swift Data中withUnsafeBytes进行gzip压缩的陷阱</title>
      <link>https://ksnowlv.github.io/post/swift-data%E4%B8%ADwithunsafebytes%E8%BF%9B%E8%A1%8Cgzip%E5%8E%8B%E7%BC%A9%E7%9A%84%E9%99%B7%E9%98%B1/</link>
      <pubDate>Wed, 16 Aug 2023 15:25:01 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/swift-data%E4%B8%ADwithunsafebytes%E8%BF%9B%E8%A1%8Cgzip%E5%8E%8B%E7%BC%A9%E7%9A%84%E9%99%B7%E9%98%B1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Swift预编译宏添加</title>
      <link>https://ksnowlv.github.io/post/swift%E9%A2%84%E7%BC%96%E8%AF%91%E5%AE%8F%E6%B7%BB%E5%8A%A0/</link>
      <pubDate>Mon, 26 Jun 2023 13:53:02 +1300</pubDate>
      
      <guid>https://ksnowlv.github.io/post/swift%E9%A2%84%E7%BC%96%E8%AF%91%E5%AE%8F%E6%B7%BB%E5%8A%A0/</guid>
      <description>&lt;h3 id=&#34;1swift预编译宏添加&#34;&gt;1.swift预编译宏添加&lt;/h3&gt;
&lt;p&gt;在Xcode中，项目的build Settings，搜索 Swift Compiler，选择Other Swift Flags，添加环境变量。注意添加 -D参数.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Swift代码风格检查利器SwiftLint的使用</title>
      <link>https://ksnowlv.github.io/post/swift%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E6%A3%80%E6%9F%A5%E5%88%A9%E5%99%A8swiftlint%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 30 Jul 2021 21:09:40 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/swift%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E6%A3%80%E6%9F%A5%E5%88%A9%E5%99%A8swiftlint%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;h2 id=&#34;代码检查利器swiftlint&#34;&gt;代码检查利器SwiftLint&lt;/h2&gt;
&lt;p&gt;如何使用工具检查swift代码风格？可以使用SwiftLint ,见链接https://github.com/realm/SwiftLint&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Swift中DispatchGroup之管理异步任务</title>
      <link>https://ksnowlv.github.io/post/swift%E4%B8%ADdispatchgroup%E4%B9%8B%E7%AE%A1%E7%90%86%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/</link>
      <pubDate>Sun, 13 Jun 2021 18:03:47 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/swift%E4%B8%ADdispatchgroup%E4%B9%8B%E7%AE%A1%E7%90%86%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Swift与Objective-C混编swift代码体积优化</title>
      <link>https://ksnowlv.github.io/post/swift-objective-c%E6%B7%B7%E7%BC%96swift%E4%BB%A3%E7%A0%81%E4%BD%93%E7%A7%AF%E4%BC%98%E5%8C%96/</link>
      <pubDate>Wed, 14 Apr 2021 19:46:06 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/swift-objective-c%E6%B7%B7%E7%BC%96swift%E4%BB%A3%E7%A0%81%E4%BD%93%E7%A7%AF%E4%BC%98%E5%8C%96/</guid>
      <description>&lt;h2 id=&#34;一swift与objective-c混编下减小包大小&#34;&gt;一.swift与Objective-c混编下减小包大小&lt;/h2&gt;
&lt;p&gt;在Swift&amp;amp;Objective-c混编优化下，如何进一步减小代码体积大小？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS视频播放-AVPlayerViewController</title>
      <link>https://ksnowlv.github.io/post/ios-video-play-avplayerviewcontroller/</link>
      <pubDate>Wed, 25 Dec 2019 20:37:53 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/ios-video-play-avplayerviewcontroller/</guid>
      <description></description>
    </item>
    
    <item>
      <title>iOS视频播放-AVPlayer和AVPlayerLayer</title>
      <link>https://ksnowlv.github.io/post/2019-11-26-iosshi-pin-bo-fang-avplayer/</link>
      <pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-11-26-iosshi-pin-bo-fang-avplayer/</guid>
      <description>本文计划使用AVPlayer和AVPlayerLayer播放视频，视频格式如下： m4v:MP4的特殊类型，MP4格式的高清；可包含字幕 mp4</description>
    </item>
    
    <item>
      <title>swift泛型</title>
      <link>https://ksnowlv.github.io/post/2019-05-16-swiftfan-xing/</link>
      <pubDate>Thu, 16 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-05-16-swiftfan-xing/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 /// 交换两个对象的值 /// /// - Parameters: /// - aValue: 对象a /// - bValue: 对象b func swapValues&amp;lt;T&amp;gt;(_ aValue: inout T, _ bValue: inout T)</description>
    </item>
    
    <item>
      <title>swift call c&#43;&#43;（二）</title>
      <link>https://ksnowlv.github.io/post/2019-04-01-swift-call-c-plus-plus-er/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-01-swift-call-c-plus-plus-er/</guid>
      <description>如何在swift调整c++代码呢？ swift通过工程的桥接文件，调用oc的代码，间接调用c++代码!!! 1.创建C++ Person类文件：P</description>
    </item>
    
    <item>
      <title>swift call c&#43;&#43;（一）</title>
      <link>https://ksnowlv.github.io/post/2019-04-01-swift-call-c-plus-plus-yi/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-01-swift-call-c-plus-plus-yi/</guid>
      <description>如何在swift调整c++代码呢？ swift通过工程的桥接文件，调用c的代码，间接调用c++代码!!! 1.创建C++ Person类文件：Pe</description>
    </item>
    
    <item>
      <title>swift调用C</title>
      <link>https://ksnowlv.github.io/post/2019-04-01-swift-call-c/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-01-swift-call-c/</guid>
      <description>swift中如何调用C代码呢？ swift通过工程的桥接文件，调用OC或C相关代码!!! 1.C文件 test.h和test.c test.h 1 2 3 4 5 6 7 8</description>
    </item>
    
    <item>
      <title>swift中pthread_t之mutex</title>
      <link>https://ksnowlv.github.io/post/2018-08-07-swiftzhong-pthread-tzhi-mutex/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-08-07-swiftzhong-pthread-tzhi-mutex/</guid>
      <description>mutex类型有四种 PTHREAD_MUTEX_NORMAL PTHREAD_MUTEX_ERRORCHECK PTHREAD_MUTEX_RECURSIVE PTHREAD_MUTEX_DEFAULT 1.mutex初始化 1 2 3 4 5 6 var mutex = pthread_mutex_t() var attr: pthread_mutexattr_t = pthread_mutexattr_t() pthread_mutexattr_init(&amp;amp;attr) pthread_mutexattr_settype(&amp;amp;attr, PTHREAD_MUTEX_RECURSIVE) pthread_mutex_init(&amp;amp;mutex, &amp;amp;attr) 2.mutex使用 1 2 3 pthread_mutex_trylock(&amp;amp;mutex) //执行代码块 pthread_mutex_unlock(&amp;amp;mutex) 3.mut</description>
    </item>
    
    <item>
      <title>synchronized到objc_sync_enter/objc_sync_exit</title>
      <link>https://ksnowlv.github.io/post/2018-08-07-swiftzhong-yu-oczhong-yong-fa-qu-bie/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-08-07-swiftzhong-yu-oczhong-yong-fa-qu-bie/</guid>
      <description>synchronized-&amp;gt;objc_sync_enter/objc_sync_exit objc_sync_enter： 递归锁，与objc_sync_exit配合使用，注意死锁 Begin synchronizing on &amp;lsquo;obj&amp;rsquo;. Allocates recursive pthread_mutex associated with &amp;lsquo;obj&amp;rsquo; if needed. Parameters obj The object to begin synchronizing on. Returns OBJC_SYNC_SUCCESS once lock is</description>
    </item>
    
    <item>
      <title>全局并发队列优先级</title>
      <link>https://ksnowlv.github.io/post/2018-07-24-quan-ju-bing-fa-dui-lie-you-xian-ji/</link>
      <pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-07-24-quan-ju-bing-fa-dui-lie-you-xian-ji/</guid>
      <description>全局并发队（Global Queue） 老版gcd有四种 high，default，low，background， 优先级为：high&amp;gt;def</description>
    </item>
    
  </channel>
</rss>
