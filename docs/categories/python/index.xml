<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on ksnowlv技术笔记</title>
    <link>https://ksnowlv.github.io/categories/python/</link>
    <description>Recent content in python on ksnowlv技术笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 15 May 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://ksnowlv.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>python筛选非jpeg，png，bmp格式图片</title>
      <link>https://ksnowlv.github.io/post/2019-05-15-pythonshai-xuan-mu-lu-xia-fei-jpegpngbmpge-shi-de-tu-pian/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-05-15-pythonshai-xuan-mu-lu-xia-fei-jpegpngbmpge-shi-de-tu-pian/</guid>
      <description>1.功能 筛选指定目录下非jpeg/png/bmp格式的文件，并把路径以日志形式输出。 2.思路： 1. 遍历文件 文件目录遍历：记录所有文件路径。 2. m</description>
    </item>
    
    <item>
      <title>Mac下安装Django</title>
      <link>https://ksnowlv.github.io/post/2014-08-10-macxia-an-zhuang-django/</link>
      <pubDate>Sun, 10 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2014-08-10-macxia-an-zhuang-django/</guid>
      <description>Mac下如何安装Django呢？ 安装步骤如下 1.Django安装前，先安装python,再安装pip ksnowlv@ksnowlvdeMacBook-Pro~/Movies/python server$sudo easy_install pip Password: Searching for pip Reading http://pypi.python.org/simple/pip/ Best match: pip 1.5.6 Downloading https://pypi.python.org/packages/source/p/pip/ pip-1.5.6.tar.gz#md5=01026f87978932060cc86c1dc527903e Processing pip-1.5.6.tar.gz Running</description>
    </item>
    
    <item>
      <title>python-WSGI搭建web-server</title>
      <link>https://ksnowlv.github.io/post/2014-08-10-python-wsgi-da-jian-web-server/</link>
      <pubDate>Sun, 10 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2014-08-10-python-wsgi-da-jian-web-server/</guid>
      <description>一.python WSGI Web Server Gateway Interface 只要求Web开发者实现一个函数即可响应HTTP请求。 二.application()函数必须由WSGI服务器来调用 1</description>
    </item>
    
    <item>
      <title>python调试之pdb</title>
      <link>https://ksnowlv.github.io/post/2014-08-09-python-diao-shi-zhi-pdb/</link>
      <pubDate>Sat, 09 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2014-08-09-python-diao-shi-zhi-pdb/</guid>
      <description>学习python调试可参考官方文档的pdb. 一.python在调试模块添加pdb调试支持. import pdb; pdb.set_trace() 不然，会遇见类似如下的错误 (Pdb) n &amp;gt; /Users/ksnowlv/Documents/lvwei projects/python/thread_queue.py(38)&amp;lt;module&amp;gt;() -&amp;gt; nameList = [&amp;#34;One&amp;#34;,</description>
    </item>
    
    <item>
      <title>python线程之队列Queue</title>
      <link>https://ksnowlv.github.io/post/2014-08-08-python-xian-cheng-zhi-dui-lie-queue/</link>
      <pubDate>Fri, 08 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2014-08-08-python-xian-cheng-zhi-dui-lie-queue/</guid>
      <description>一.Python Queue Python的Queue模块中提供了同步的、线程安全的队列类. 1.FIFO（先入先出)队列Queue， 2.LIFO（后入先</description>
    </item>
    
    <item>
      <title>python线程之同步</title>
      <link>https://ksnowlv.github.io/post/2014-08-08-python-xian-cheng-zhi-tong-bu/</link>
      <pubDate>Fri, 08 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2014-08-08-python-xian-cheng-zhi-tong-bu/</guid>
      <description>一.线程同步 如果多个线程共同对某个数据修改访问，为了保证数据的正确性，需要对多个线程进行同步。 二.解决方案 使用Thread对象的Lock和R</description>
    </item>
    
    <item>
      <title>python面向对象函数重载</title>
      <link>https://ksnowlv.github.io/post/2014-08-07-python-mian-xiang-dui-xiang-han-shu-zhong-zai/</link>
      <pubDate>Thu, 07 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2014-08-07-python-mian-xiang-dui-xiang-han-shu-zhong-zai/</guid>
      <description>&lt;h3 id=&#34;python函数重载&#34;&gt;python函数重载&lt;/h3&gt;
&lt;p&gt;和C++/Objective-c/Java类似。&lt;/p&gt;
&lt;h3 id=&#34;适用场景&#34;&gt;适用场景&lt;/h3&gt;
&lt;p&gt;父类的方法不能满足你的需求.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python线程之start_new_thread</title>
      <link>https://ksnowlv.github.io/post/2014-08-07-python-xian-cheng-zhi-start-new-thread/</link>
      <pubDate>Thu, 07 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2014-08-07-python-xian-cheng-zhi-start-new-thread/</guid>
      <description>一.Python中使用线程有两种方式 1.函数式方式 2.类包装线程对象方式。 二.函数式方式 调用thread模块中的start_new_thre</description>
    </item>
    
    <item>
      <title>Python线程之Threading</title>
      <link>https://ksnowlv.github.io/post/2014-08-07-python-xian-cheng-zhi-threading/</link>
      <pubDate>Thu, 07 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2014-08-07-python-xian-cheng-zhi-threading/</guid>
      <description>类包装线程对象方式使用线程 python通过两个标准库thread和threading提供对线程的支持。thread提供了低级别的、原始的线程</description>
    </item>
    
    <item>
      <title>Python面向对象-python对象销毁</title>
      <link>https://ksnowlv.github.io/post/2014-08-06-python-mian-xiang-dui-xiang-python-dui-xiang-xiao-hui/</link>
      <pubDate>Wed, 06 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2014-08-06-python-mian-xiang-dui-xiang-python-dui-xiang-xiao-hui/</guid>
      <description>Python内存管理 同Java/Objective-c语言一样，Python使用了引用计数这一简单技术来追踪内存中的对象。 Python引用计</description>
    </item>
    
    <item>
      <title>Python面向对象-继承派生</title>
      <link>https://ksnowlv.github.io/post/2014-08-06-python-mian-xiang-dui-xiang-ji-cheng-pai-sheng/</link>
      <pubDate>Wed, 06 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2014-08-06-python-mian-xiang-dui-xiang-ji-cheng-pai-sheng/</guid>
      <description>一.python类继承派生 通过这种继承派生机制，我们可以实现代码重用。其实，与C++/Objective-c/Java类似。 二.语法格式 class 派</description>
    </item>
    
    <item>
      <title>python面向对象-内置类属性</title>
      <link>https://ksnowlv.github.io/post/2014-08-06-python-mian-xiang-dui-xiang-nei-zhi-lei-shu-xing/</link>
      <pubDate>Wed, 06 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2014-08-06-python-mian-xiang-dui-xiang-nei-zhi-lei-shu-xing/</guid>
      <description>一.python内置类属性 __doc__:类的文档字符串. __name__:类名. __dict__:类的属性,包含一个字典，由类的数据属性组</description>
    </item>
    
    <item>
      <title>python面向对象-类定义</title>
      <link>https://ksnowlv.github.io/post/2014-08-05-python-mian-xiang-dui-xiang-lei-ding-yi/</link>
      <pubDate>Tue, 05 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2014-08-05-python-mian-xiang-dui-xiang-lei-ding-yi/</guid>
      <description>1.python类的定义 使用class语句定义一个类，class之后为类的名称并以冒号结尾， 如下实例: class ClassName: &#39;Optional class documentation string&#39;#类文档字符串</description>
    </item>
    
  </channel>
</rss>
