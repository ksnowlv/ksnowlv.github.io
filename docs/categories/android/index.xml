<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on ksnowlv技术笔记</title>
    <link>https://ksnowlv.github.io/categories/android/</link>
    <description>Recent content in Android on ksnowlv技术笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 25 Apr 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://ksnowlv.github.io/categories/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kotlin通过jni间接调用c&#43;&#43;</title>
      <link>https://ksnowlv.github.io/post/2019-04-25-kotlintong-guo-jnijian-jie-diao-yong-c-plus-plus/</link>
      <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-25-kotlintong-guo-jnijian-jie-diao-yong-c-plus-plus/</guid>
      <description>本篇重点内容，Kotlin通过JNI直接调用C，C调用C++相关的类。实际上只是JAVA换成Kotlin的写法而已。 一.添加Kotlin类`</description>
    </item>
    
    <item>
      <title>Android通过jni间接调用c&#43;&#43;</title>
      <link>https://ksnowlv.github.io/post/2019-04-22-androidtong-guo-jnijian-jie-diao-yong-c-plus-plus/</link>
      <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-22-androidtong-guo-jnijian-jie-diao-yong-c-plus-plus/</guid>
      <description>本篇重点内容，C如何调用C++类，思路是JAVA通过JNI直接调用C，C调用C++相关的类。 1.JAVA层接口Person类相关接口 public class JavaCallJNI {</description>
    </item>
    
    <item>
      <title>Android通过jni调用c&#43;&#43;</title>
      <link>https://ksnowlv.github.io/post/2019-04-18-androidtong-guo-jnidiao-yong-c-plus-plus/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-18-androidtong-guo-jnidiao-yong-c-plus-plus/</guid>
      <description>本篇重点内容在于如何把C++的类通过JNI转换为JAVA的类 1.创建JAVA类：JavaPerson public class JavaPerson { private long mNativePerson; public JavaPerson() { mNativePerson = init(); } public int getAge() { return this.native_getAge(mNativePerson);</description>
    </item>
    
    <item>
      <title>Android-jni-demo</title>
      <link>https://ksnowlv.github.io/post/2019-04-10-android-jni-demo/</link>
      <pubDate>Wed, 10 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-10-android-jni-demo/</guid>
      <description>1.创建app/src/main/jniLibs目录#### 2.把so库拷贝到jniLibs目录。 3.JavaCallJNI内容如下 ···o</description>
    </item>
    
    <item>
      <title>”mac下android配置jni开发环境(一)“</title>
      <link>https://ksnowlv.github.io/post/2019-04-09-macxia-pei-zhi-jnikai-fa-huan-jing-1/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-09-macxia-pei-zhi-jnikai-fa-huan-jing-1/</guid>
      <description>mac机器上，在进行jni开发之前，android studio 3.3.2，需要配置java环境与ndk环境。 一.配置java环境参数 1.通过which</description>
    </item>
    
    <item>
      <title>”mac下配置jni开发环境(二)“</title>
      <link>https://ksnowlv.github.io/post/2019-04-09-macxia-pei-zhi-jnikai-fa-huan-jing-er/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-09-macxia-pei-zhi-jnikai-fa-huan-jing-er/</guid>
      <description>创建android基础工程 1.JNI java文件创建 public class JavaCallJNI { static { System.loadLibrary(&amp;#34;JniTest&amp;#34;); } public static native int showValue(int value); } 2.在app/scr/main/目录下，创建目录jni#### 3.</description>
    </item>
    
    <item>
      <title>trying to use a recycled bitmap android.graphics.Bitmap@bffc9a0解决方案</title>
      <link>https://ksnowlv.github.io/post/2018-01-02-recycled-bitmap-resolve/</link>
      <pubDate>Tue, 02 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-01-02-recycled-bitmap-resolve/</guid>
      <description>最近项目中出现了一批“trying to use a recycled bitmap android.graphics.Bitmap@bffc9a0”异常，是什么原因导致的呢？ 原因：</description>
    </item>
    
    <item>
      <title>Kotlin下的单例</title>
      <link>https://ksnowlv.github.io/post/2017-12-19-kotlinxia-de-dan-li/</link>
      <pubDate>Tue, 19 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2017-12-19-kotlinxia-de-dan-li/</guid>
      <description>单例不同的语言下的要求大体一致。 Kotlin下的单例是通过companion实现的。 class KCacheMgr private constructor (){ companion object { @Volatile var sharedCacheMgr: KCacheMgr? = null fun getInstance(): KCacheMgr { if (sharedCacheMgr == null) { synchronized(KCacheMgr::class) { if (sharedCacheMgr ==</description>
    </item>
    
    <item>
      <title>Android下gzip数据流解压缩</title>
      <link>https://ksnowlv.github.io/post/2015-08-19-android-xia-jie-ya-suo/</link>
      <pubDate>Wed, 19 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2015-08-19-android-xia-jie-ya-suo/</guid>
      <description>在Android开发中，网络传输的数据如果采用压缩的方式，能大大减少网络流量，对文本的数据效果更明显。 一. gzip压缩. public static byte[] gzipCompress(final byte[] data) { if (0 ==</description>
    </item>
    
    <item>
      <title>Java/Android双重锁定模式</title>
      <link>https://ksnowlv.github.io/post/2015-05-08-java-slash-android-shuang-zhong-suo-ding-mo-shi/</link>
      <pubDate>Fri, 08 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2015-05-08-java-slash-android-shuang-zhong-suo-ding-mo-shi/</guid>
      <description>双重检查锁定模式(DCLP)是一种软件设计模式,用来减少并发系统中竞争和同步的开销. 适用性方面：在J2SE 5.0之前的版本使用，有隐患。在J</description>
    </item>
    
    <item>
      <title>Android下锁</title>
      <link>https://ksnowlv.github.io/post/2015-04-28-android-xia-de-suo/</link>
      <pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2015-04-28-android-xia-de-suo/</guid>
      <description>Java下的锁 1.Lock 2.ReentrantLock 3.ReentrantReadWriteLock 可以使用Condition进行线程间的同步. 其类结构如下：</description>
    </item>
    
    <item>
      <title>Android线程池</title>
      <link>https://ksnowlv.github.io/post/2015-04-28-android-xian-cheng-chi/</link>
      <pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2015-04-28-android-xian-cheng-chi/</guid>
      <description>ExecutorService继承Executor，是线程池的一个服务，可以随时关闭线程池。 Executors是个工厂类，专门创建各种线程池</description>
    </item>
    
    <item>
      <title>Android开源网络库</title>
      <link>https://ksnowlv.github.io/post/2015-04-16-test/</link>
      <pubDate>Thu, 16 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2015-04-16-test/</guid>
      <description>目前比较流行的Android网络库 volley android-async-http retrofit okhttp(支持spdy) androidquery AndroidAsync LiteHttp</description>
    </item>
    
    <item>
      <title>android地图sdk修改总结</title>
      <link>https://ksnowlv.github.io/post/2013-05-06-androiddi-tu-sdkxiu-gai-zong-jie/</link>
      <pubDate>Mon, 06 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2013-05-06-androiddi-tu-sdkxiu-gai-zong-jie/</guid>
      <description>此次对android地图SDK 的修改，主要是针对OOM，CRASH, 程序卡死,其它问题的问题,,可能某些地方是错误的，希望大家多多指 正,非常</description>
    </item>
    
  </channel>
</rss>
