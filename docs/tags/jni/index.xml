<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jni on ksnowlv技术笔记</title>
    <link>https://ksnowlv.github.io/tags/jni/</link>
    <description>Recent content in jni on ksnowlv技术笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 25 Apr 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://ksnowlv.github.io/tags/jni/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kotlin通过jni间接调用c&#43;&#43;</title>
      <link>https://ksnowlv.github.io/post/2019-04-25-kotlintong-guo-jnijian-jie-diao-yong-c-plus-plus/</link>
      <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-25-kotlintong-guo-jnijian-jie-diao-yong-c-plus-plus/</guid>
      <description>本篇重点内容，Kotlin通过JNI直接调用C，C调用C++相关的类。实际上只是JAVA换成Kotlin的写法而已。 一.添加Kotlin类`</description>
    </item>
    
    <item>
      <title>Android通过jni间接调用c&#43;&#43;</title>
      <link>https://ksnowlv.github.io/post/2019-04-22-androidtong-guo-jnijian-jie-diao-yong-c-plus-plus/</link>
      <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-22-androidtong-guo-jnijian-jie-diao-yong-c-plus-plus/</guid>
      <description>本篇重点内容，C如何调用C++类，思路是JAVA通过JNI直接调用C，C调用C++相关的类。 1.JAVA层接口Person类相关接口 public class JavaCallJNI {</description>
    </item>
    
    <item>
      <title>Android通过jni调用c&#43;&#43;</title>
      <link>https://ksnowlv.github.io/post/2019-04-18-androidtong-guo-jnidiao-yong-c-plus-plus/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-18-androidtong-guo-jnidiao-yong-c-plus-plus/</guid>
      <description>本篇重点内容在于如何把C++的类通过JNI转换为JAVA的类 1.创建JAVA类：JavaPerson public class JavaPerson { private long mNativePerson; public JavaPerson() { mNativePerson = init(); } public int getAge() { return this.native_getAge(mNativePerson);</description>
    </item>
    
    <item>
      <title>Android-jni-demo</title>
      <link>https://ksnowlv.github.io/post/2019-04-10-android-jni-demo/</link>
      <pubDate>Wed, 10 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-10-android-jni-demo/</guid>
      <description>1.创建app/src/main/jniLibs目录#### 2.把so库拷贝到jniLibs目录。 3.JavaCallJNI内容如下 ···o</description>
    </item>
    
    <item>
      <title>”mac下android配置jni开发环境(一)“</title>
      <link>https://ksnowlv.github.io/post/2019-04-09-macxia-pei-zhi-jnikai-fa-huan-jing-1/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-09-macxia-pei-zhi-jnikai-fa-huan-jing-1/</guid>
      <description>mac机器上，在进行jni开发之前，android studio 3.3.2，需要配置java环境与ndk环境。 一.配置java环境参数 1.通过which</description>
    </item>
    
    <item>
      <title>”mac下配置jni开发环境(二)“</title>
      <link>https://ksnowlv.github.io/post/2019-04-09-macxia-pei-zhi-jnikai-fa-huan-jing-er/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-09-macxia-pei-zhi-jnikai-fa-huan-jing-er/</guid>
      <description>创建android基础工程 1.JNI java文件创建 public class JavaCallJNI { static { System.loadLibrary(&amp;#34;JniTest&amp;#34;); } public static native int showValue(int value); } 2.在app/scr/main/目录下，创建目录jni#### 3.</description>
    </item>
    
  </channel>
</rss>
