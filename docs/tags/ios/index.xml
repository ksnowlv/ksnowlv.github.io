<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iOS on ksnowlv技术笔记</title>
    <link>https://ksnowlv.github.io/tags/ios/</link>
    <description>Recent content in iOS on ksnowlv技术笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 26 Jun 2023 13:53:02 +1300</lastBuildDate><atom:link href="https://ksnowlv.github.io/tags/ios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Swift预编译宏添加</title>
      <link>https://ksnowlv.github.io/post/swift%E9%A2%84%E7%BC%96%E8%AF%91%E5%AE%8F%E6%B7%BB%E5%8A%A0/</link>
      <pubDate>Mon, 26 Jun 2023 13:53:02 +1300</pubDate>
      
      <guid>https://ksnowlv.github.io/post/swift%E9%A2%84%E7%BC%96%E8%AF%91%E5%AE%8F%E6%B7%BB%E5%8A%A0/</guid>
      <description>&lt;h3 id=&#34;1swift预编译宏添加&#34;&gt;1.swift预编译宏添加&lt;/h3&gt;
&lt;p&gt;在Xcode中，项目的build Settings，搜索 Swift Compiler，选择Other Swift Flags，添加环境变量。注意添加 -D参数.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Swift Objective C混编swift代码体积优化</title>
      <link>https://ksnowlv.github.io/post/swift-objective-c%E6%B7%B7%E7%BC%96swift%E4%BB%A3%E7%A0%81%E4%BD%93%E7%A7%AF%E4%BC%98%E5%8C%96/</link>
      <pubDate>Wed, 14 Apr 2021 19:46:06 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/swift-objective-c%E6%B7%B7%E7%BC%96swift%E4%BB%A3%E7%A0%81%E4%BD%93%E7%A7%AF%E4%BC%98%E5%8C%96/</guid>
      <description>&lt;h2 id=&#34;一swift与objective-c混编下减小包大小&#34;&gt;一.swift与Objective-c混编下减小包大小&lt;/h2&gt;
&lt;p&gt;在Swift&amp;amp;Objective-c混编优化下，如何进一步减小代码体积大小？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS视频播-AVPlayerViewController</title>
      <link>https://ksnowlv.github.io/post/ios%E8%A7%86%E9%A2%91%E6%92%AD-avplayerviewcontroller/</link>
      <pubDate>Wed, 25 Dec 2019 20:37:53 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/ios%E8%A7%86%E9%A2%91%E6%92%AD-avplayerviewcontroller/</guid>
      <description></description>
    </item>
    
    <item>
      <title>XCode使用PMD扫描重复代码（一）</title>
      <link>https://ksnowlv.github.io/post/2019-08-19-xcodeshi-yong-pmdsao-miao-zhong-fu-dai-ma/</link>
      <pubDate>Mon, 19 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-08-19-xcodeshi-yong-pmdsao-miao-zhong-fu-dai-ma/</guid>
      <description>如何使用PMD在XCode下扫描重复代码（Copy&amp;amp;Past）呢？ 1.下载PMD https://pmd.github.io，放置到工</description>
    </item>
    
    <item>
      <title>iOS指针集合类</title>
      <link>https://ksnowlv.github.io/post/2018-04-23-ioszhi-zhen-ji-he-lei/</link>
      <pubDate>Mon, 23 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-04-23-ioszhi-zhen-ji-he-lei/</guid>
      <description>Collections之Pointer Collections ：指针集合类 NSPointerArray NSHashTable NSMapTable 1.NSPointerFunctionsOptionsDefines the memory and personality options for an NSPointerFunctions object. NSPointerFunctionsMachVirtualMemory NSPointerFunctionsMallocMemory Use free() on removal, calloc() on copy in. NSPointerFunctionsOpaqueMemory NSPointerFunctionsStrongMemory NSPointerFunctionsWeakMemory Uses weak read and write barriers appropriate for ARC or GC. Using NSPointerFunctionsWeakMemory object references will turn to</description>
    </item>
    
    <item>
      <title>苹果开发者账号id绑定手机号</title>
      <link>https://ksnowlv.github.io/post/2018-04-17-ping-guo-kai-fa-zhe-zhang-hao-idbang-ding-shou-ji-hao/</link>
      <pubDate>Tue, 17 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-04-17-ping-guo-kai-fa-zhe-zhang-hao-idbang-ding-shou-ji-hao/</guid>
      <description>问题 最近苹果开发者账号提醒 &amp;ldquo;The Apple Developer Program License Agreement has been updated&amp;rdquo; 内容如下： In order to access certain membership resources, you must accept the latest license agreement. First, you’ll need to update the mobile phone number associated with your Apple ID. Your mobile phone number must be based in your country/region.</description>
    </item>
    
    <item>
      <title>iOS之url编解码</title>
      <link>https://ksnowlv.github.io/post/2017-12-15-ioszhi-urlbian-jie-ma/</link>
      <pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2017-12-15-ioszhi-urlbian-jie-ma/</guid>
      <description>iOS 开发中，经常需要对url编码与解码。 iOS9之前 1.url编码 + (NSString*)encodeUrl:(NSString *)urlString { if (0 == urlString.length) { return KBlankString; } return (__bridge_transfer NSString*) CFURLCreateStringByAddingPercentEscapes(kCFAllocatorDefault, (CFStringRef)urlString, NULL, (CFStringRef)@&amp;#34;!*&amp;#39;();:@&amp;amp;=+$,/?%#[]&amp;#34;, kCFStringEncodingUTF8); } 2.url解码 + (NSString *)decodeUrl:(NSString *)urlString { if (0 == urlString.length) {</description>
    </item>
    
    <item>
      <title>FaceBook-infer的使用</title>
      <link>https://ksnowlv.github.io/post/2015-08-19-facebook-infer-de-shi-yong/</link>
      <pubDate>Wed, 19 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2015-08-19-facebook-infer-de-shi-yong/</guid>
      <description>Facebook推出潜在一款bug扫描工具(http://fbinfer.com)，可以检查 iOS/Android App. MAC上的安装 一.环境要求 1.Python版</description>
    </item>
    
    <item>
      <title>iOS有限后台任务</title>
      <link>https://ksnowlv.github.io/post/2015-08-19-ios-you-xian-hou-tai-ren-wu/</link>
      <pubDate>Wed, 19 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2015-08-19-ios-you-xian-hou-tai-ren-wu/</guid>
      <description>iOS下有限后台任务如何使用呢？ iOS应用，在切换到后台时，可以开启有限后台任务。 见苹果开发文档， 一.几个相关方法 1.beginBackgroundTaskWithExpirationHandler 2.beginBackgroundTaskWithName:expirationHandler 3.endBackgroundTask 4.setMinimumBackgroundFetchInterval 二.切换到后台的处</description>
    </item>
    
    <item>
      <title>iOS-lua打补丁</title>
      <link>https://ksnowlv.github.io/post/2015-08-10-ios-luada-bu-ding/</link>
      <pubDate>Mon, 10 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2015-08-10-ios-luada-bu-ding/</guid>
      <description>一.目的 1.更改线上App小的功能 2.修复线上App的Bug 3.对于iOS来讲，避免了漫长的AppStore审核 二.技术方案 三.相关接口 loadPatch 参</description>
    </item>
    
    <item>
      <title>iOS-64位适配</title>
      <link>https://ksnowlv.github.io/post/2015-01-06-ios-64wei-gua-pei/</link>
      <pubDate>Tue, 06 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2015-01-06-ios-64wei-gua-pei/</guid>
      <description>请参考苹果文档链接：https://developer.apple.com/library/ios/documentation/Genera</description>
    </item>
    
    <item>
      <title>阻止文件被iTunes和iCloud同步</title>
      <link>https://ksnowlv.github.io/post/2014-12-03-zu-zhi-wen-jian-bei-ituneshe-icloudtong-bu/</link>
      <pubDate>Wed, 03 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2014-12-03-zu-zhi-wen-jian-bei-ituneshe-icloudtong-bu/</guid>
      <description>1.参考官方文档 How do I prevent files from being backed up to iCloud and iTunes? 2.示例代码 + (BOOL)addSkipBackupAttributeToItemAtPath:(NSString *)path { BOOL success = NO; const char *filePath = [path fileSystemRepresentation]; const char *attrName = &amp;#34;com.apple.MobileBackup&amp;#34;; void *check = (void *)&amp;amp;NSURLIsExcludedFromBackupKey; if (check != NULL) { // First try and remove the extended attribute if it is present int result</description>
    </item>
    
    <item>
      <title>iOS使用OpenSSL</title>
      <link>https://ksnowlv.github.io/post/2014-11-18-ios-shi-yong-openssl/</link>
      <pubDate>Tue, 18 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2014-11-18-ios-shi-yong-openssl/</guid>
      <description>iOS中OpenSSL If your app depends on OpenSSL,you should compile OpenSSL yourself and statically link a known version of OpenSSL into your app. This use of OpenSSL is possible on both OS X and iOS. However, unless you are trying to maintain source compatibility with an existing open source project, you should generally use a different API. 苹果建议</description>
    </item>
    
    <item>
      <title>给iOS应用打补丁</title>
      <link>https://ksnowlv.github.io/post/2014-11-13-gei-iosying-yong-da-bu-ding/</link>
      <pubDate>Thu, 13 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2014-11-13-gei-iosying-yong-da-bu-ding/</guid>
      <description>一.问题 当iOS App出现bug时，由于不能很快上架，如何紧急修复bug呢？ 二.解决方案 可以通过Lua给app打补丁。 将脚本放到后台服务器，</description>
    </item>
    
    <item>
      <title>iOS之Keychain</title>
      <link>https://ksnowlv.github.io/post/2014-10-22-ios-zhi-keychain/</link>
      <pubDate>Wed, 22 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2014-10-22-ios-zhi-keychain/</guid>
      <description>一.iOS之Keychain用途 提供了一种安全的保存私密信息的方式，每个ios程序都有一个独立的keychain存储,它保存的信息不会因Ap</description>
    </item>
    
    <item>
      <title>iOS push机制</title>
      <link>https://ksnowlv.github.io/post/2014-10-21-ios-push-ji-zhi/</link>
      <pubDate>Tue, 21 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2014-10-21-ios-push-ji-zhi/</guid>
      <description>一. push原理 iOS push工作机制可以使用下图概括： Provider:应用自己的服务器； APNS:Apple Push Notification Service的简称，苹果Push服务器. 可以</description>
    </item>
    
    <item>
      <title>iOS计算时间差值</title>
      <link>https://ksnowlv.github.io/post/2014-09-30-ios-ji-suan-shi-jian-chai-zhi/</link>
      <pubDate>Tue, 30 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2014-09-30-ios-ji-suan-shi-jian-chai-zhi/</guid>
      <description>iOS中，以1970年1月1日00：00：00起始到现在，计算时间差值，可采用NSDate直接合成计算。如果需要重复计算次数较高，可能会导致</description>
    </item>
    
    <item>
      <title>XCode6下Too many arguments to function call, expected 0, have 2解决办法</title>
      <link>https://ksnowlv.github.io/post/2014-09-07-xcode6-too-many-arguments-to-function-call-expected-0-have-2/</link>
      <pubDate>Sun, 07 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2014-09-07-xcode6-too-many-arguments-to-function-call-expected-0-have-2/</guid>
      <description>1.问题 在XCode6下，写了如下一段代码： NSLock *myLock = [NSLock new]; IMP lockIMP = [myLock methodForSelector:lockSEL]; lockIMP(myLock,lockSEL); 总是报错 “Too many arguments to function call, expected 0, have 2” 后来发现在使用objc_msgSend</description>
    </item>
    
    <item>
      <title>Objective-C的文档生成工具-Appledoc</title>
      <link>https://ksnowlv.github.io/post/2014-09-06-objective-c-de-wen-dang-sheng-cheng-gong-ju-appledoc/</link>
      <pubDate>Sat, 06 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2014-09-06-objective-c-de-wen-dang-sheng-cheng-gong-ju-appledoc/</guid>
      <description>Appledoc默认生成的文档风格与苹果的官方文档是一致的,生成docset，可以集成到xcode中。在源码中按住option再单击就可以调</description>
    </item>
    
    <item>
      <title>iOS系统对象重用</title>
      <link>https://ksnowlv.github.io/post/2014-09-05-ios-xi-tong-dui-xiang-zhong-yong/</link>
      <pubDate>Fri, 05 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2014-09-05-ios-xi-tong-dui-xiang-zhong-yong/</guid>
      <description>1.对象重用 当我们重复创建/销毁对象的操作时，iOS系统对象是否会被重用呢？ 2.测试思路 以0.1s为间隔的timer,周期性的创建UILab</description>
    </item>
    
  </channel>
</rss>
