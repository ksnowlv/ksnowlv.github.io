<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>swift on ksnowlv技术笔记</title>
    <link>https://ksnowlv.github.io/tags/swift/</link>
    <description>Recent content in swift on ksnowlv技术笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 01 Apr 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://ksnowlv.github.io/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>swift call c</title>
      <link>https://ksnowlv.github.io/post/2019-04-01-swift-call-c/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-01-swift-call-c/</guid>
      <description>如何在swift调整c代码呢？ swift通过工程的桥接文件，调用oc或c的相关代码!!! 1.创建c文件：test.h和test.c test.</description>
    </item>
    
    <item>
      <title>swift call c&#43;&#43;（二）</title>
      <link>https://ksnowlv.github.io/post/2019-04-01-swift-call-c-plus-plus-er/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-01-swift-call-c-plus-plus-er/</guid>
      <description>如何在swift调整c++代码呢？ swift通过工程的桥接文件，调用oc的代码，间接调用c++代码!!! 1.创建C++ Person类文件：P</description>
    </item>
    
    <item>
      <title>swift call c&#43;&#43;（一）</title>
      <link>https://ksnowlv.github.io/post/2019-04-01-swift-call-c-plus-plus-yi/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-01-swift-call-c-plus-plus-yi/</guid>
      <description>如何在swift调整c++代码呢？ swift通过工程的桥接文件，调用c的代码，间接调用c++代码!!! 1.创建C++ Person类文件：Pe</description>
    </item>
    
    <item>
      <title>swift-class与struct区别</title>
      <link>https://ksnowlv.github.io/post/2018-07-18-swift-classyu-structqu-bie/</link>
      <pubDate>Wed, 18 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-07-18-swift-classyu-structqu-bie/</guid>
      <description>比较项 struct class 类型 值类型 引用类型 属性初始化 可用默认构造直接初始化 需要自己创建构造方法 变量赋值 深拷贝 浅拷贝，增加原对象引用 方法中修改属性 需要添加m</description>
    </item>
    
    <item>
      <title>swift中escaping与noescaping之区别</title>
      <link>https://ksnowlv.github.io/post/2018-07-16-swift-escaping/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-07-16-swift-escaping/</guid>
      <description>Swift3之前： 默认escaping，逃逸闭包，是不安全的。对于非逃逸闭包，你需要标记@noescaping Swift3及之后 默认是noe</description>
    </item>
    
    <item>
      <title>NS_SWIFT_NAME与@objc区别与用途</title>
      <link>https://ksnowlv.github.io/post/2018-07-06-cf-swift-nameyu-at-objc/</link>
      <pubDate>Fri, 06 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-07-06-cf-swift-nameyu-at-objc/</guid>
      <description>NS_SWIFT_NAME与@objc有什么区别和用途呢？ NS_SWIFT_NAME :在objective-c中，重新命名在swift中的名称 @objc 在swift中，重新</description>
    </item>
    
    <item>
      <title>swift-cocoaframework中module.map配置</title>
      <link>https://ksnowlv.github.io/post/2018-07-04-swift-cocoaframeworkzhong-module-dot-mappei-zhi/</link>
      <pubDate>Wed, 04 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-07-04-swift-cocoaframeworkzhong-module-dot-mappei-zhi/</guid>
      <description>在swift framework中，如果要引用c库，可采用配置module.map. 那如何配置呢？我们以CommonCrypto为例。 一.工程</description>
    </item>
    
    <item>
      <title>swift-framework的合并</title>
      <link>https://ksnowlv.github.io/post/2018-07-04-swift-frameworkde-he-bing/</link>
      <pubDate>Wed, 04 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-07-04-swift-frameworkde-he-bing/</guid>
      <description>swift framework如何支持合并呢？以YKBaseFramework.framework为例。 1.lipo合并静态库。 lipo -create Release-iphoneos/YKBaseFramework.framework/YKBaseFramework Debug-iphonesimulator/YKBaseFramework.framework/YKBaseFramework -output YKBaseFramework 生成YKB</description>
    </item>
    
    <item>
      <title>swift-objective-c混编的framework</title>
      <link>https://ksnowlv.github.io/post/2018-07-02-swift-objective-chun-bian-de-framework/</link>
      <pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-07-02-swift-objective-chun-bian-de-framework/</guid>
      <description>swift-objective-c混编的framework如何制作呢？ 1.创建cocoaTouchframework, 2.把需要导出的头文件</description>
    </item>
    
    <item>
      <title>swiftframework方法如何导出</title>
      <link>https://ksnowlv.github.io/post/2018-07-02-swiftframeworkfang-fa-ru-he-dao-chu/</link>
      <pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-07-02-swiftframeworkfang-fa-ru-he-dao-chu/</guid>
      <description>swift framework中的方法如何在objective-c中调用呢？ 类或属性加@objc public stackoverflow的解答 To access a swift class in objc, that is not</description>
    </item>
    
    <item>
      <title>takeUnretainedValue与takeRetainedValue区别</title>
      <link>https://ksnowlv.github.io/post/2018-06-29-takeunretainedvalueyu-takeretainedvaluequ-bie/</link>
      <pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-06-29-takeunretainedvalueyu-takeretainedvaluequ-bie/</guid>
      <description>swift中，如果我们使用perform相关函数时，例如 if let object = connectionItem.perform(connectionSEL, with: nil) { (object as! YKURLConnection).cancel() } 此时会报警告 Cast from &#39;Unmanaged&amp;lt;AnyObject&amp;gt;&#39; to unrelated type &#39;YKURLConnection&#39; always fails 虽然代码可以正常运行，报这种警</description>
    </item>
    
    <item>
      <title>swift之gzip解压缩(二)-NSData</title>
      <link>https://ksnowlv.github.io/post/2018-06-22-swift-gzip/</link>
      <pubDate>Fri, 22 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-06-22-swift-gzip/</guid>
      <description>工程目前以objective-c为主，采用的是swift与objective-c混编方式，因此对NSData作了扩展。 gzip压缩 /// gzip</description>
    </item>
    
    <item>
      <title>swift之url编解码</title>
      <link>https://ksnowlv.github.io/post/2018-06-22-swiftzhi-urlbian-jie-ma/</link>
      <pubDate>Fri, 22 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-06-22-swiftzhi-urlbian-jie-ma/</guid>
      <description>url的编码与解码，在工程中很常用，编解码针对特殊字符及中文，确保url可以正常访问 let KUrlCodingReservedCharacters = &amp;#34;!*&amp;#39;();:|@&amp;amp;=+$,/?%#[]{}&amp;#34; extension NSString { /// url编码 /// /// - Returns: NSString func urlEncode() -&amp;gt; NSString? { return self.addingPercentEncoding(withAllowedCharacters: CharacterSet(charactersIn: KYKUrlCodingReservedCharacters).inverted)! as</description>
    </item>
    
    <item>
      <title>swift之gzip解压缩(一)-Data</title>
      <link>https://ksnowlv.github.io/post/2018-05-22-swiftgzipjie-ya-suo/</link>
      <pubDate>Tue, 22 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-05-22-swiftgzipjie-ya-suo/</guid>
      <description>解压缩使用swift需要引用libz库 声明Data类的扩展 /**解压缩流大小**/ private let GZIP_STREAM_SIZE: Int32 = Int32(MemoryLayout&amp;lt;z_stream&amp;gt;.size) /**解压缩缓冲区大小**/ private let GZIP_BUF_LENGTH:Int = 512 /**默</description>
    </item>
    
    <item>
      <title>swift-framework中objective-c与swift互调</title>
      <link>https://ksnowlv.github.io/post/2017-12-29-swift-frameworkzhong-objective-cyu-swifthu-diao/</link>
      <pubDate>Fri, 29 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2017-12-29-swift-frameworkzhong-objective-cyu-swifthu-diao/</guid>
      <description>swift-framework中objective-c与swift互调实际上与普通工程中的互调类似。 背景：YKDeviceInfo为obje</description>
    </item>
    
    <item>
      <title>swift之framework</title>
      <link>https://ksnowlv.github.io/post/2017-12-26-swiftzhi-framework/</link>
      <pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2017-12-26-swiftzhi-framework/</guid>
      <description>swift版本的framework有哪些关键点需要注意呢？ 1.类需要公有。 2.方法需要公有并且使用@objc修饰。不然 3.引用framewo</description>
    </item>
    
    <item>
      <title>swift-计时器</title>
      <link>https://ksnowlv.github.io/post/2017-12-15-swiftji-shi-qi/</link>
      <pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2017-12-15-swiftji-shi-qi/</guid>
      <description>iOS中计时器工具类如何设计呢？ 1.需求 开启/关闭计时器。 设置计时器周期。 设置计时器是否周期触发。 回调计时器开启时到当前时间间隔。用于倒计时</description>
    </item>
    
    <item>
      <title>swift-设备信息类</title>
      <link>https://ksnowlv.github.io/post/2017-12-13-swiftshe-bei-xin-xi-lei/</link>
      <pubDate>Wed, 13 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2017-12-13-swiftshe-bei-xin-xi-lei/</guid>
      <description>设备信息类是iOS开发框架中必备工具类，通常包含哪些属性呢？ UUID 广告标识idfa 机型 屏幕尺寸 屏幕类型。 UI放大比例：做多屏幕适配，此处使用的是</description>
    </item>
    
    <item>
      <title>swift-导航控制器</title>
      <link>https://ksnowlv.github.io/post/2017-12-12-swift-dao-hang-kong-zhi-qi/</link>
      <pubDate>Tue, 12 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2017-12-12-swift-dao-hang-kong-zhi-qi/</guid>
      <description>导航控制器作为iOS工程常用的容器类，在定制的时候， 需要考虑几个关键点。 1.状态栏风格。#### 2.导航栏。#### 3. 右侧滑关闭手势与页面U</description>
    </item>
    
    <item>
      <title>swift调用objective-c</title>
      <link>https://ksnowlv.github.io/post/2017-11-27-swiftdiao-yong-objective-c/</link>
      <pubDate>Mon, 27 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2017-11-27-swiftdiao-yong-objective-c/</guid>
      <description>swift调用objective-c在混编开发时经常会使用。 一.项目设置##### TARGETS -&amp;gt;Swift Compiler - General -&amp;gt;Objective-c Bridging Header 选项指定桥接文件，通常该文件命名为：工程名</description>
    </item>
    
  </channel>
</rss>
