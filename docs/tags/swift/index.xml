<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>swift on ksnowlv技术笔记</title>
    <link>https://ksnowlv.github.io/tags/swift/</link>
    <description>Recent content in swift on ksnowlv技术笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 16 Aug 2023 15:25:01 +0800</lastBuildDate><atom:link href="https://ksnowlv.github.io/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Swift Data中withUnsafeBytes进行gzip压缩的陷阱</title>
      <link>https://ksnowlv.github.io/post/swift-data%E4%B8%ADwithunsafebytes%E8%BF%9B%E8%A1%8Cgzip%E5%8E%8B%E7%BC%A9%E7%9A%84%E9%99%B7%E9%98%B1/</link>
      <pubDate>Wed, 16 Aug 2023 15:25:01 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/swift-data%E4%B8%ADwithunsafebytes%E8%BF%9B%E8%A1%8Cgzip%E5%8E%8B%E7%BC%A9%E7%9A%84%E9%99%B7%E9%98%B1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Swift预编译宏添加</title>
      <link>https://ksnowlv.github.io/post/swift%E9%A2%84%E7%BC%96%E8%AF%91%E5%AE%8F%E6%B7%BB%E5%8A%A0/</link>
      <pubDate>Mon, 26 Jun 2023 13:53:02 +1300</pubDate>
      
      <guid>https://ksnowlv.github.io/post/swift%E9%A2%84%E7%BC%96%E8%AF%91%E5%AE%8F%E6%B7%BB%E5%8A%A0/</guid>
      <description>&lt;h3 id=&#34;1swift预编译宏添加&#34;&gt;1.swift预编译宏添加&lt;/h3&gt;
&lt;p&gt;在Xcode中，项目的build Settings，搜索 Swift Compiler，选择Other Swift Flags，添加环境变量。注意添加 -D参数.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Swift代码风格检查利器SwiftLint的使用</title>
      <link>https://ksnowlv.github.io/post/swift%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E6%A3%80%E6%9F%A5%E5%88%A9%E5%99%A8swiftlint%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 30 Jul 2021 21:09:40 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/swift%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E6%A3%80%E6%9F%A5%E5%88%A9%E5%99%A8swiftlint%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;h2 id=&#34;代码检查利器swiftlint&#34;&gt;代码检查利器SwiftLint&lt;/h2&gt;
&lt;p&gt;如何使用工具检查swift代码风格？可以使用SwiftLint ,见链接https://github.com/realm/SwiftLint&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Swift中DispatchGroup之管理异步任务</title>
      <link>https://ksnowlv.github.io/post/swift%E4%B8%ADdispatchgroup%E4%B9%8B%E7%AE%A1%E7%90%86%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/</link>
      <pubDate>Sun, 13 Jun 2021 18:03:47 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/swift%E4%B8%ADdispatchgroup%E4%B9%8B%E7%AE%A1%E7%90%86%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Swift Objective C混编swift代码体积优化</title>
      <link>https://ksnowlv.github.io/post/swift-objective-c%E6%B7%B7%E7%BC%96swift%E4%BB%A3%E7%A0%81%E4%BD%93%E7%A7%AF%E4%BC%98%E5%8C%96/</link>
      <pubDate>Wed, 14 Apr 2021 19:46:06 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/swift-objective-c%E6%B7%B7%E7%BC%96swift%E4%BB%A3%E7%A0%81%E4%BD%93%E7%A7%AF%E4%BC%98%E5%8C%96/</guid>
      <description>&lt;h2 id=&#34;一swift与objective-c混编下减小包大小&#34;&gt;一.swift与Objective-c混编下减小包大小&lt;/h2&gt;
&lt;p&gt;在Swift&amp;amp;Objective-c混编优化下，如何进一步减小代码体积大小？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS视频播放-AVPlayerViewController</title>
      <link>https://ksnowlv.github.io/post/ios-video-play-avplayerviewcontroller/</link>
      <pubDate>Wed, 25 Dec 2019 20:37:53 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/ios-video-play-avplayerviewcontroller/</guid>
      <description></description>
    </item>
    
    <item>
      <title>swift call c&#43;&#43;（二）</title>
      <link>https://ksnowlv.github.io/post/2019-04-01-swift-call-c-plus-plus-er/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-01-swift-call-c-plus-plus-er/</guid>
      <description>如何在swift调整c++代码呢？ swift通过工程的桥接文件，调用oc的代码，间接调用c++代码!!! 1.创建C++ Person类文件：P</description>
    </item>
    
    <item>
      <title>swift call c&#43;&#43;（一）</title>
      <link>https://ksnowlv.github.io/post/2019-04-01-swift-call-c-plus-plus-yi/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-01-swift-call-c-plus-plus-yi/</guid>
      <description>如何在swift调整c++代码呢？ swift通过工程的桥接文件，调用c的代码，间接调用c++代码!!! 1.创建C++ Person类文件：Pe</description>
    </item>
    
    <item>
      <title>swift调用C</title>
      <link>https://ksnowlv.github.io/post/2019-04-01-swift-call-c/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-01-swift-call-c/</guid>
      <description>swift中如何调用C代码呢？ swift通过工程的桥接文件，调用OC或C相关代码!!! 1.C文件 test.h和test.c test.h 1 2 3 4 5 6 7 8</description>
    </item>
    
    <item>
      <title>swift-class与struct区别</title>
      <link>https://ksnowlv.github.io/post/2018-07-18-swift-classyu-structqu-bie/</link>
      <pubDate>Wed, 18 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-07-18-swift-classyu-structqu-bie/</guid>
      <description>比较项 struct class 类型 值类型 引用类型 属性初始化 可用默认构造直接初始化 需要自己创建构造方法 变量赋值 深拷贝 浅拷贝，增加原对象引用 方法中修改属性 需要添加m</description>
    </item>
    
    <item>
      <title>swift中escaping与noescaping之区别</title>
      <link>https://ksnowlv.github.io/post/2018-07-16-swift-escaping/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-07-16-swift-escaping/</guid>
      <description>Swift3之前： 默认escaping，逃逸闭包，是不安全的。对于非逃逸闭包，你需要标记@noescaping Swift3及之后 默认是noe</description>
    </item>
    
    <item>
      <title>NS_SWIFT_NAME与@objc区别与用途</title>
      <link>https://ksnowlv.github.io/post/2018-07-06-cf-swift-nameyu-at-objc/</link>
      <pubDate>Fri, 06 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-07-06-cf-swift-nameyu-at-objc/</guid>
      <description>NS_SWIFT_NAME与@objc有什么区别和用途呢？ NS_SWIFT_NAME :在objective-c中，重新命名在swift中的名称 @objc 在swift中，重新</description>
    </item>
    
    <item>
      <title>swift-cocoaframework中module.map配置</title>
      <link>https://ksnowlv.github.io/post/2018-07-04-swift-cocoaframeworkzhong-module-dot-mappei-zhi/</link>
      <pubDate>Wed, 04 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-07-04-swift-cocoaframeworkzhong-module-dot-mappei-zhi/</guid>
      <description>module.map 在swift framework中，如果要引用c库，可采用配置module.map. 那如何配置呢？我们以CommonCrypto为例。 一.工</description>
    </item>
    
    <item>
      <title>swift-framework的合并</title>
      <link>https://ksnowlv.github.io/post/2018-07-04-swift-frameworkde-he-bing/</link>
      <pubDate>Wed, 04 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-07-04-swift-frameworkde-he-bing/</guid>
      <description>swift framework如何支持合并呢？以YKBaseFramework.framework为例。 1.lipo合并静态库。 1 lipo -create Release-iphoneos/YKBaseFramework.framework/YKBaseFramework Debug-iphonesimulator/YKBaseFramework.framework/YKBaseFramework -output YKBaseFramework 生成YK</description>
    </item>
    
    <item>
      <title>swift-objective-c混编的framework</title>
      <link>https://ksnowlv.github.io/post/2018-07-02-swift-objective-chun-bian-de-framework/</link>
      <pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-07-02-swift-objective-chun-bian-de-framework/</guid>
      <description>swift-objective-c混编的framework如何制作呢？ 1.创建cocoaTouchframework, 2.需要导出的头文件添</description>
    </item>
    
    <item>
      <title>swiftframework方法如何导出</title>
      <link>https://ksnowlv.github.io/post/2018-07-02-swiftframeworkfang-fa-ru-he-dao-chu/</link>
      <pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-07-02-swiftframeworkfang-fa-ru-he-dao-chu/</guid>
      <description>swift framework中的方法如何在objective-c中调用呢？ 1.类或属性加@objc public stackoverflow的解答 To access a swift class in objc, that</description>
    </item>
    
    <item>
      <title>takeUnretainedValue与takeRetainedValue区别</title>
      <link>https://ksnowlv.github.io/post/2018-06-29-takeunretainedvalueyu-takeretainedvaluequ-bie/</link>
      <pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-06-29-takeunretainedvalueyu-takeretainedvaluequ-bie/</guid>
      <description>1. perform时警告 swift中，如果我们使用perform相关函数时，例如 1 2 3 4 if let object = connectionItem.perform(connectionSEL, with: nil) { (object as! YKURLConnection).cancel() } 此时会报警告 Cast from &#39;Unmanaged&amp;lt;AnyObject&amp;gt;&#39; to unrelated type &#39;YKURLConnection&#39; always fails</description>
    </item>
    
    <item>
      <title>swift之gzip解压缩(二)-NSData</title>
      <link>https://ksnowlv.github.io/post/2018-06-22-swift-gzip/</link>
      <pubDate>Fri, 22 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-06-22-swift-gzip/</guid>
      <description>工程目前以objective-c为主，采用的是swift与objective-c混编方式，因此对NSData作了扩展。 1.gzip压缩 1 2 3</description>
    </item>
    
    <item>
      <title>swift之url编解码</title>
      <link>https://ksnowlv.github.io/post/2018-06-22-swiftzhi-urlbian-jie-ma/</link>
      <pubDate>Fri, 22 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-06-22-swiftzhi-urlbian-jie-ma/</guid>
      <description>url的编码与解码，在工程中很常用，编解码针对特殊字符及中文，确保url可以正常访问 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 let KUrlCodingReservedCharacters = &amp;#34;!*&amp;#39;();:|@&amp;amp;=+$,/?%#[]{}&amp;#34; extension NSString { ///</description>
    </item>
    
    <item>
      <title>swift之gzip解压缩(一)-Data</title>
      <link>https://ksnowlv.github.io/post/2018-05-22-swiftgzipjie-ya-suo/</link>
      <pubDate>Tue, 22 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-05-22-swiftgzipjie-ya-suo/</guid>
      <description>解压缩使用swift需要引用libz库 一.声明Data类的扩展 1 2 3 4 5 6 /**解压缩流大小**/ private let GZIP_STREAM_SIZE: Int32 = Int32(MemoryLayout&amp;lt;z_stream&amp;gt;.size) /**解压缩缓冲区大小**/ private</description>
    </item>
    
  </channel>
</rss>
