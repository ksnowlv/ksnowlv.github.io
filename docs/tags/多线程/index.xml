<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>多线程 on ksnowlv技术笔记</title>
    <link>https://ksnowlv.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
    <description>Recent content in 多线程 on ksnowlv技术笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 06 Feb 2024 13:29:11 +0800</lastBuildDate><atom:link href="https://ksnowlv.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust中多线程并发编程-补充</title>
      <link>https://ksnowlv.github.io/post/rust/rust%E4%B8%AD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 06 Feb 2024 13:29:11 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/rust/rust%E4%B8%AD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Rust多线程通信小结</title>
      <link>https://ksnowlv.github.io/post/rust/rust%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Mon, 05 Feb 2024 23:26:36 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/rust/rust%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Python线程沲</title>
      <link>https://ksnowlv.github.io/post/python/python%E7%BA%BF%E7%A8%8B%E6%B2%B2/</link>
      <pubDate>Thu, 24 Aug 2023 17:45:50 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/python/python%E7%BA%BF%E7%A8%8B%E6%B2%B2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Python线程间的通信-队列(Queue)</title>
      <link>https://ksnowlv.github.io/post/python/python%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1-%E9%98%9F%E5%88%97queue/</link>
      <pubDate>Wed, 23 Aug 2023 09:38:12 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/python/python%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1-%E9%98%9F%E5%88%97queue/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Python线程间的通信-互斥锁/可重入锁</title>
      <link>https://ksnowlv.github.io/post/python/python%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1-%E4%BA%92%E6%96%A5%E9%94%81-%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81/</link>
      <pubDate>Wed, 23 Aug 2023 09:13:58 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/python/python%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1-%E4%BA%92%E6%96%A5%E9%94%81-%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Python线程间的通信-条件变量(Condition)</title>
      <link>https://ksnowlv.github.io/post/python/python%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1-%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8Fcondition/</link>
      <pubDate>Tue, 22 Aug 2023 14:45:42 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/python/python%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1-%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8Fcondition/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Python线程间的通信-信号量(Semaphore)</title>
      <link>https://ksnowlv.github.io/post/python/python%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1-%E4%BF%A1%E5%8F%B7%E9%87%8Fsemaphore/</link>
      <pubDate>Tue, 22 Aug 2023 09:12:08 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/python/python%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1-%E4%BF%A1%E5%8F%B7%E9%87%8Fsemaphore/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Swift中DispatchGroup之管理异步任务</title>
      <link>https://ksnowlv.github.io/post/swift/swift%E4%B8%ADdispatchgroup%E4%B9%8B%E7%AE%A1%E7%90%86%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/</link>
      <pubDate>Sun, 13 Jun 2021 18:03:47 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/swift/swift%E4%B8%ADdispatchgroup%E4%B9%8B%E7%AE%A1%E7%90%86%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>swift中pthread_t之mutex</title>
      <link>https://ksnowlv.github.io/post/2018-08-07-swiftzhong-pthread-tzhi-mutex/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-08-07-swiftzhong-pthread-tzhi-mutex/</guid>
      <description>mutex类型有四种 PTHREAD_MUTEX_NORMAL PTHREAD_MUTEX_ERRORCHECK PTHREAD_MUTEX_RECURSIVE PTHREAD_MUTEX_DEFAULT 1.mutex初始化 1 2 3 4 5 6 var mutex = pthread_mutex_t() var attr: pthread_mutexattr_t = pthread_mutexattr_t() pthread_mutexattr_init(&amp;amp;attr) pthread_mutexattr_settype(&amp;amp;attr, PTHREAD_MUTEX_RECURSIVE) pthread_mutex_init(&amp;amp;mutex, &amp;amp;attr) 2.mutex使用 1 2 3 pthread_mutex_trylock(&amp;amp;mutex) //执行代码块 pthread_mutex_unlock(&amp;amp;mutex) 3.mut</description>
    </item>
    
    <item>
      <title>synchronized到objc_sync_enter/objc_sync_exit</title>
      <link>https://ksnowlv.github.io/post/2018-08-07-swiftzhong-yu-oczhong-yong-fa-qu-bie/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-08-07-swiftzhong-yu-oczhong-yong-fa-qu-bie/</guid>
      <description>synchronized-&amp;gt;objc_sync_enter/objc_sync_exit objc_sync_enter： 递归锁，与objc_sync_exit配合使用，注意死锁 Begin synchronizing on &amp;lsquo;obj&amp;rsquo;. Allocates recursive pthread_mutex associated with &amp;lsquo;obj&amp;rsquo; if needed. Parameters obj The object to begin synchronizing on. Returns OBJC_SYNC_SUCCESS once lock is</description>
    </item>
    
    <item>
      <title>全局并发队列优先级</title>
      <link>https://ksnowlv.github.io/post/2018-07-24-quan-ju-bing-fa-dui-lie-you-xian-ji/</link>
      <pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-07-24-quan-ju-bing-fa-dui-lie-you-xian-ji/</guid>
      <description>全局并发队（Global Queue） 老版gcd有四种 high，default，low，background， 优先级为：high&amp;gt;def</description>
    </item>
    
    <item>
      <title>Java/Android双重锁定模式</title>
      <link>https://ksnowlv.github.io/post/2015-05-08-java-slash-android-shuang-zhong-suo-ding-mo-shi/</link>
      <pubDate>Fri, 08 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2015-05-08-java-slash-android-shuang-zhong-suo-ding-mo-shi/</guid>
      <description>双重检查锁定模式(DCLP)是一种软件设计模式,用来减少并发系统中竞争和同步的开销. 适用性方面：在J2SE 5.0之前的版本使用，有隐患。在J</description>
    </item>
    
    <item>
      <title>Android下锁</title>
      <link>https://ksnowlv.github.io/post/2015-04-28-android-xia-de-suo/</link>
      <pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2015-04-28-android-xia-de-suo/</guid>
      <description>Java下的锁 1.Lock 2.ReentrantLock 3.ReentrantReadWriteLock 可以使用Condition进行线程间的同步. 其类结构如下：</description>
    </item>
    
    <item>
      <title>Android线程池</title>
      <link>https://ksnowlv.github.io/post/2015-04-28-android-xian-cheng-chi/</link>
      <pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2015-04-28-android-xian-cheng-chi/</guid>
      <description>ExecutorService继承Executor，是线程池的一个服务，可以随时关闭线程池。 Executors是个工厂类，专门创建各种线程池</description>
    </item>
    
    <item>
      <title>iOS同步对象性能对比</title>
      <link>https://ksnowlv.github.io/post/2014-09-07-ios-tong-bu-suo-xing-neng-dui-bi/</link>
      <pubDate>Sun, 07 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2014-09-07-ios-tong-bu-suo-xing-neng-dui-bi/</guid>
      <description>在iOS开发中，支持多种同步锁，我们从耗时角度出发，评估各种同步对象的性能。 一.同步锁 1 2 3 4 5 6 7 8 1.@synchronized 2.NSLock 3.NSCondition 4.NSConditionLock 5.NSRecursiveLock 6.pthread_mutex_t 7.OSSpinLock 8.dispatch_barrier_async 二.性能测试示例代码 1</description>
    </item>
    
    <item>
      <title>CGD之监视进程</title>
      <link>https://ksnowlv.github.io/post/2014-09-06-cgd-zhi-jian-shi-jin-cheng/</link>
      <pubDate>Sat, 06 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2014-09-06-cgd-zhi-jian-shi-jin-cheng/</guid>
      <description>1.CGD监视进程 GCD可以检测进程的运行，退出状态，可以检测到进程间的信号。 #define DISPATCH_PROC_EXIT 0x80000000 #define DISPATCH_PROC_FORK 0x40000000 #define DISPATCH_PROC_EXEC 0x20000000 #define DISPATCH_PROC_SIGNAL 0x08000000 可以使用dispatch source捕</description>
    </item>
    
    <item>
      <title>GCD之监听文件</title>
      <link>https://ksnowlv.github.io/post/2014-09-06-gcd-zhi-jian-ting-wen-jian/</link>
      <pubDate>Sat, 06 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2014-09-06-gcd-zhi-jian-ting-wen-jian/</guid>
      <description>1.GCD 监听文件 GCD可以用来监听文件变化，例如目录变化，重命名等之类的。 例如我们监听Document目录下，ksnow目录的变化。 2.iOS代码</description>
    </item>
    
    <item>
      <title>NSInvocationOperation的使用</title>
      <link>https://ksnowlv.github.io/post/2013/2013-04-03-nsinvocationoperationde-shi-yong/</link>
      <pubDate>Wed, 03 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2013/2013-04-03-nsinvocationoperationde-shi-yong/</guid>
      <description>NSInvocationOperation的一个子类，在对NSOperation控制要求不高的情况下，可以使用。 例如： 1 2 3 4 5 6 7 8 9 10 11</description>
    </item>
    
    <item>
      <title>pthread的使用</title>
      <link>https://ksnowlv.github.io/post/2013/2013-04-03-pthreadde-shi-yong/</link>
      <pubDate>Wed, 03 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2013/2013-04-03-pthreadde-shi-yong/</guid>
      <description>pthread与pthread_mutex_t在一些场景下，会经常结合使用。 示例 1.头文件。 1 2 3 4 5 6 7 8 9 10 11 12 13 // QBKThread.h @interface QBKThread : NSObject { pthread_t _tid; pthread_mutex_t theTaskMutex;</description>
    </item>
    
    <item>
      <title>关于NSOperation的使用之一</title>
      <link>https://ksnowlv.github.io/post/2013/2013-04-3-guan-yu-nsoperationde-shi-yong-zhi-yi/</link>
      <pubDate>Wed, 03 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2013/2013-04-3-guan-yu-nsoperationde-shi-yong-zhi-yi/</guid>
      <description>NSOperation Apple在OS X 10.5 Leopard上做了很多改进。NSThread本身就新增了很多新的方法，从而使得多线程变得更加容易。此外还新增了NSO</description>
    </item>
    
  </channel>
</rss>
