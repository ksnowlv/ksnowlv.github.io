<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ksnowlv技术笔记</title>
    <link>https://ksnowlv.github.io/post/</link>
    <description>Recent content in Posts on ksnowlv技术笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 16 Aug 2023 19:41:33 +0800</lastBuildDate><atom:link href="https://ksnowlv.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python应用程序打包安装</title>
      <link>https://ksnowlv.github.io/post/python-application-packaging-and-installation/</link>
      <pubDate>Wed, 16 Aug 2023 19:41:33 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/python-application-packaging-and-installation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Swift Data中withUnsafeBytes进行gzip压缩的陷阱</title>
      <link>https://ksnowlv.github.io/post/swift-data%E4%B8%ADwithunsafebytes%E8%BF%9B%E8%A1%8Cgzip%E5%8E%8B%E7%BC%A9%E7%9A%84%E9%99%B7%E9%98%B1/</link>
      <pubDate>Wed, 16 Aug 2023 15:25:01 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/swift-data%E4%B8%ADwithunsafebytes%E8%BF%9B%E8%A1%8Cgzip%E5%8E%8B%E7%BC%A9%E7%9A%84%E9%99%B7%E9%98%B1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hugo Add Gicus</title>
      <link>https://ksnowlv.github.io/post/hugo-add-gicus/</link>
      <pubDate>Tue, 15 Aug 2023 19:54:42 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/hugo-add-gicus/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Swift预编译宏添加</title>
      <link>https://ksnowlv.github.io/post/swift%E9%A2%84%E7%BC%96%E8%AF%91%E5%AE%8F%E6%B7%BB%E5%8A%A0/</link>
      <pubDate>Mon, 26 Jun 2023 13:53:02 +1300</pubDate>
      
      <guid>https://ksnowlv.github.io/post/swift%E9%A2%84%E7%BC%96%E8%AF%91%E5%AE%8F%E6%B7%BB%E5%8A%A0/</guid>
      <description>&lt;h3 id=&#34;1swift预编译宏添加&#34;&gt;1.swift预编译宏添加&lt;/h3&gt;
&lt;p&gt;在Xcode中，项目的build Settings，搜索 Swift Compiler，选择Other Swift Flags，添加环境变量。注意添加 -D参数.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Swift代码风格检查利器SwiftLint的使用</title>
      <link>https://ksnowlv.github.io/post/swift%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E6%A3%80%E6%9F%A5%E5%88%A9%E5%99%A8swiftlint%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 30 Jul 2021 21:09:40 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/swift%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E6%A3%80%E6%9F%A5%E5%88%A9%E5%99%A8swiftlint%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;h2 id=&#34;代码检查利器swiftlint&#34;&gt;代码检查利器SwiftLint&lt;/h2&gt;
&lt;p&gt;如何使用工具检查swift代码风格？可以使用SwiftLint ,见链接https://github.com/realm/SwiftLint&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Swift中DispatchGroup之管理异步任务</title>
      <link>https://ksnowlv.github.io/post/swift%E4%B8%ADdispatchgroup%E4%B9%8B%E7%AE%A1%E7%90%86%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/</link>
      <pubDate>Sun, 13 Jun 2021 18:03:47 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/swift%E4%B8%ADdispatchgroup%E4%B9%8B%E7%AE%A1%E7%90%86%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Swift Objective C混编swift代码体积优化</title>
      <link>https://ksnowlv.github.io/post/swift-objective-c%E6%B7%B7%E7%BC%96swift%E4%BB%A3%E7%A0%81%E4%BD%93%E7%A7%AF%E4%BC%98%E5%8C%96/</link>
      <pubDate>Wed, 14 Apr 2021 19:46:06 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/swift-objective-c%E6%B7%B7%E7%BC%96swift%E4%BB%A3%E7%A0%81%E4%BD%93%E7%A7%AF%E4%BC%98%E5%8C%96/</guid>
      <description>&lt;h2 id=&#34;一swift与objective-c混编下减小包大小&#34;&gt;一.swift与Objective-c混编下减小包大小&lt;/h2&gt;
&lt;p&gt;在Swift&amp;amp;Objective-c混编优化下，如何进一步减小代码体积大小？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS视频播放-AVPlayerViewController</title>
      <link>https://ksnowlv.github.io/post/ios-video-play-avplayerviewcontroller/</link>
      <pubDate>Wed, 25 Dec 2019 20:37:53 +0800</pubDate>
      
      <guid>https://ksnowlv.github.io/post/ios-video-play-avplayerviewcontroller/</guid>
      <description></description>
    </item>
    
    <item>
      <title>iOS视频播放-AVPlayer和AVPlayerLayer</title>
      <link>https://ksnowlv.github.io/post/2019-11-26-iosshi-pin-bo-fang-avplayer/</link>
      <pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-11-26-iosshi-pin-bo-fang-avplayer/</guid>
      <description>本文计划使用AVPlayer和AVPlayerLayer播放视频，视频格式如下： m4v:MP4的特殊类型，MP4格式的高清；可包含字幕 mp4</description>
    </item>
    
    <item>
      <title>XCode使用PMD扫描重复代码（一）</title>
      <link>https://ksnowlv.github.io/post/2019-08-19-xcodeshi-yong-pmdsao-miao-zhong-fu-dai-ma/</link>
      <pubDate>Mon, 19 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-08-19-xcodeshi-yong-pmdsao-miao-zhong-fu-dai-ma/</guid>
      <description>如何使用PMD在XCode下扫描重复代码（Copy&amp;amp;Past）呢？ 1.下载PMD https://pmd.github.io，放置到工</description>
    </item>
    
    <item>
      <title>flutter安装和运行</title>
      <link>https://ksnowlv.github.io/post/2019-05-22-flutteran-zhuang-he-yun-xing/</link>
      <pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-05-22-flutteran-zhuang-he-yun-xing/</guid>
      <description>1.创建flutter工程目录（各项目+flutter目录），在flutter 目录下载flutter SDK git init git clone -b dev https://github.com/flutter/flutter.git 2.进入flutter S</description>
    </item>
    
    <item>
      <title>flutter创建工程报错</title>
      <link>https://ksnowlv.github.io/post/2019-05-22-flutter-cannot-create-a-project-within-the-flutter-sdk/</link>
      <pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-05-22-flutter-cannot-create-a-project-within-the-flutter-sdk/</guid>
      <description>1.问题 在使用 flutter create命令创建flutter工程时，如果报`Cannot create a project within the Flutter SDK. Target directory &amp;lsquo;/Users/ksnowlv/Music/flutter/flutter/my_app&amp;rsquo; is within the Flutter SDK at &amp;lsquo;/Users/k</description>
    </item>
    
    <item>
      <title>swift泛型</title>
      <link>https://ksnowlv.github.io/post/2019-05-16-swiftfan-xing/</link>
      <pubDate>Thu, 16 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-05-16-swiftfan-xing/</guid>
      <description>/// 交换两个对象的值 /// /// - Parameters: /// - aValue: 对象a /// - bValue: 对象b func swapValues&amp;lt;T&amp;gt;(_ aValue: inout T, _ bValue: inout T) { let temp = aValue aValue = bValue bValue = temp } /// 栈模板 struct QStack&amp;lt;T&amp;gt; { var items = [T]() mutating func push(_ item: T) { items.append(item) } mutating func pop() -&amp;gt; T</description>
    </item>
    
    <item>
      <title>python筛选非jpeg，png，bmp格式图片</title>
      <link>https://ksnowlv.github.io/post/2019-05-15-pythonshai-xuan-mu-lu-xia-fei-jpegpngbmpge-shi-de-tu-pian/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-05-15-pythonshai-xuan-mu-lu-xia-fei-jpegpngbmpge-shi-de-tu-pian/</guid>
      <description>1.功能 筛选指定目录下非jpeg/png/bmp格式的文件，并把路径以日志形式输出。 2.思路： 1. 遍历文件 文件目录遍历：记录所有文件路径。 2. m</description>
    </item>
    
    <item>
      <title>Kotlin调用c&#43;&#43;</title>
      <link>https://ksnowlv.github.io/post/2019-04-25-kotlintong-guo-jnijian-jie-diao-yong-c-plus-plus/</link>
      <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-25-kotlintong-guo-jnijian-jie-diao-yong-c-plus-plus/</guid>
      <description>本篇重点内容，Kotlin通过JNI直接调用C，C调用C++相关的类。实际上只是JAVA换成Kotlin的写法而已。 一.添加Kotlin类 声</description>
    </item>
    
    <item>
      <title>Java调用C&#43;&#43;</title>
      <link>https://ksnowlv.github.io/post/2019-04-22-androidtong-guo-jnijian-jie-diao-yong-c-plus-plus/</link>
      <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-22-androidtong-guo-jnijian-jie-diao-yong-c-plus-plus/</guid>
      <description>本篇重点内容，C如何调用C++类，思路是JAVA通过JNI直接调用C，C调用C++相关的类。 1.JAVA层接口Person类相关接口 public class JavaCallJNI {</description>
    </item>
    
    <item>
      <title>Java调用C&#43;&#43;</title>
      <link>https://ksnowlv.github.io/post/2019-04-18-androidtong-guo-jnidiao-yong-c-plus-plus/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-18-androidtong-guo-jnidiao-yong-c-plus-plus/</guid>
      <description>本篇重点内容在于如何把C++的类通过JNI转换为JAVA的类 1.创建Java类： JavaPerson如下 public class JavaPerson { private long mNativePerson; public JavaPerson() { mNativePerson = init(); } public int getAge() {</description>
    </item>
    
    <item>
      <title>Android jni示例</title>
      <link>https://ksnowlv.github.io/post/2019-04-10-android-jni-demo/</link>
      <pubDate>Wed, 10 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-10-android-jni-demo/</guid>
      <description>1.so库拷贝到相应目录 创建app/src/main/jniLibs目录，把so库拷贝到jniLibs目录。 2.Android上层调用so库</description>
    </item>
    
    <item>
      <title>Mac配置jni开发环境(二)</title>
      <link>https://ksnowlv.github.io/post/2019-04-09-macxia-pei-zhi-jnikai-fa-huan-jing-er/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-09-macxia-pei-zhi-jnikai-fa-huan-jing-er/</guid>
      <description>首页创建Android应用工程 1.Java层调用SO库 public class JavaCallJNI { static { System.loadLibrary(&amp;#34;JniTest&amp;#34;); } public static native int showValue(int value); } 2.创建目录jni 在app/scr/main/下，创建j</description>
    </item>
    
    <item>
      <title>Mac配置jni开发环境(一)</title>
      <link>https://ksnowlv.github.io/post/2019-04-09-macxia-pei-zhi-jnikai-fa-huan-jing-1/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-09-macxia-pei-zhi-jnikai-fa-huan-jing-1/</guid>
      <description>Mac机器上，在进行jni开发之前，android studio 3.3.2，需要配置java环境与ndk环境。 一.配置java环境参数 1.jdk安装目录</description>
    </item>
    
  </channel>
</rss>
