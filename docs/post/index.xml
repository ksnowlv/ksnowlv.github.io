<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ksnowlv技术笔记</title>
    <link>https://ksnowlv.github.io/post/</link>
    <description>Recent content in Posts on ksnowlv技术笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 26 Nov 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://ksnowlv.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>iOS视频播放-AVPlayer和AVPlayerLayer</title>
      <link>https://ksnowlv.github.io/post/2019-11-26-iosshi-pin-bo-fang-avplayer/</link>
      <pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-11-26-iosshi-pin-bo-fang-avplayer/</guid>
      <description>本文计划使用AVPlayer和AVPlayerLayer播放视频，视频格式如下： m4v:MP4的特殊类型，MP4格式的高清；可包含字幕 mp4</description>
    </item>
    
    <item>
      <title>XCode使用PMD扫描重复代码（一）</title>
      <link>https://ksnowlv.github.io/post/2019-08-19-xcodeshi-yong-pmdsao-miao-zhong-fu-dai-ma/</link>
      <pubDate>Mon, 19 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-08-19-xcodeshi-yong-pmdsao-miao-zhong-fu-dai-ma/</guid>
      <description>如何使用PMD在XCode下扫描重复代码（Copy&amp;amp;Past）呢？ 1.下载PMD：https://pmd.github.io，放置到</description>
    </item>
    
    <item>
      <title>flutter安装和运行</title>
      <link>https://ksnowlv.github.io/post/2019-05-22-flutteran-zhuang-he-yun-xing/</link>
      <pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-05-22-flutteran-zhuang-he-yun-xing/</guid>
      <description>1.创建flutter工程目录（各项目+flutter目录），在flutter 目录下载flutter SDK git init git clone -b dev https://github.com/flutter/flutter.git 2.进入flutter S</description>
    </item>
    
    <item>
      <title>flutter创建工程报错</title>
      <link>https://ksnowlv.github.io/post/2019-05-22-flutter-cannot-create-a-project-within-the-flutter-sdk/</link>
      <pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-05-22-flutter-cannot-create-a-project-within-the-flutter-sdk/</guid>
      <description>1.问题 在使用 flutter create命令创建flutter工程时，如果报`Cannot create a project within the Flutter SDK. Target directory &amp;lsquo;/Users/ksnowlv/Music/flutter/flutter/my_app&amp;rsquo; is within the Flutter SDK at &amp;lsquo;/Users/k</description>
    </item>
    
    <item>
      <title>swift泛型</title>
      <link>https://ksnowlv.github.io/post/2019-05-16-swiftfan-xing/</link>
      <pubDate>Thu, 16 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-05-16-swiftfan-xing/</guid>
      <description>/// 交换两个对象的值 /// /// - Parameters: /// - aValue: 对象a /// - bValue: 对象b func swapValues&amp;lt;T&amp;gt;(_ aValue: inout T, _ bValue: inout T) { let temp = aValue aValue = bValue bValue = temp } /// 栈模板 struct QStack&amp;lt;T&amp;gt; { var items = [T]() mutating func push(_ item: T) { items.append(item) } mutating func pop() -&amp;gt; T</description>
    </item>
    
    <item>
      <title>python筛选目录下非jpeg，png，bmp格式的图片</title>
      <link>https://ksnowlv.github.io/post/2019-05-15-pythonshai-xuan-mu-lu-xia-fei-jpegpngbmpge-shi-de-tu-pian/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-05-15-pythonshai-xuan-mu-lu-xia-fei-jpegpngbmpge-shi-de-tu-pian/</guid>
      <description>功能：筛选指定目录下非jpeg/png/bmp格式的文件，并把路径以日志形式输出。 关键有两点： 目录遍历，记录所有文件路径。 遍历路径，使用im</description>
    </item>
    
    <item>
      <title>Kotlin通过jni间接调用c&#43;&#43;</title>
      <link>https://ksnowlv.github.io/post/2019-04-25-kotlintong-guo-jnijian-jie-diao-yong-c-plus-plus/</link>
      <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-25-kotlintong-guo-jnijian-jie-diao-yong-c-plus-plus/</guid>
      <description>本篇重点内容，Kotlin通过JNI直接调用C，C调用C++相关的类。实际上只是JAVA换成Kotlin的写法而已。 一.添加Kotlin类`</description>
    </item>
    
    <item>
      <title>Android通过jni间接调用c&#43;&#43;</title>
      <link>https://ksnowlv.github.io/post/2019-04-22-androidtong-guo-jnijian-jie-diao-yong-c-plus-plus/</link>
      <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-22-androidtong-guo-jnijian-jie-diao-yong-c-plus-plus/</guid>
      <description>本篇重点内容，C如何调用C++类，思路是JAVA通过JNI直接调用C，C调用C++相关的类。 1.JAVA层接口Person类相关接口 public class JavaCallJNI {</description>
    </item>
    
    <item>
      <title>Android通过jni调用c&#43;&#43;</title>
      <link>https://ksnowlv.github.io/post/2019-04-18-androidtong-guo-jnidiao-yong-c-plus-plus/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-18-androidtong-guo-jnidiao-yong-c-plus-plus/</guid>
      <description>本篇重点内容在于如何把C++的类通过JNI转换为JAVA的类 1.创建JAVA类：JavaPerson public class JavaPerson { private long mNativePerson; public JavaPerson() { mNativePerson = init(); } public int getAge() { return this.native_getAge(mNativePerson);</description>
    </item>
    
    <item>
      <title>Android-jni-demo</title>
      <link>https://ksnowlv.github.io/post/2019-04-10-android-jni-demo/</link>
      <pubDate>Wed, 10 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-10-android-jni-demo/</guid>
      <description>1.创建app/src/main/jniLibs目录#### 2.把so库拷贝到jniLibs目录。 3.JavaCallJNI内容如下 ···o</description>
    </item>
    
    <item>
      <title>”mac下android配置jni开发环境(一)“</title>
      <link>https://ksnowlv.github.io/post/2019-04-09-macxia-pei-zhi-jnikai-fa-huan-jing-1/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-09-macxia-pei-zhi-jnikai-fa-huan-jing-1/</guid>
      <description>mac机器上，在进行jni开发之前，android studio 3.3.2，需要配置java环境与ndk环境。 一.配置java环境参数 1.通过which</description>
    </item>
    
    <item>
      <title>”mac下配置jni开发环境(二)“</title>
      <link>https://ksnowlv.github.io/post/2019-04-09-macxia-pei-zhi-jnikai-fa-huan-jing-er/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-09-macxia-pei-zhi-jnikai-fa-huan-jing-er/</guid>
      <description>创建android基础工程 1.JNI java文件创建 public class JavaCallJNI { static { System.loadLibrary(&amp;#34;JniTest&amp;#34;); } public static native int showValue(int value); } 2.在app/scr/main/目录下，创建目录jni#### 3.</description>
    </item>
    
    <item>
      <title>300指数量化基金</title>
      <link>https://ksnowlv.github.io/post/2019-04-05-you-xiu-de-liang-hua-ji-jin/</link>
      <pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-05-you-xiu-de-liang-hua-ji-jin/</guid>
      <description>基金代码 简称 2016超越沪深300指数% 2017超越300指数% 2018超越300指数% 3年平均收益率% 基金规模 管理托管费% 163497 兴全沪深300</description>
    </item>
    
    <item>
      <title>swift call c</title>
      <link>https://ksnowlv.github.io/post/2019-04-01-swift-call-c/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-01-swift-call-c/</guid>
      <description>如何在swift调整c代码呢？ swift通过工程的桥接文件，调用oc或c的相关代码!!! 1.创建c文件：test.h和test.c test.</description>
    </item>
    
    <item>
      <title>swift call c&#43;&#43;（二）</title>
      <link>https://ksnowlv.github.io/post/2019-04-01-swift-call-c-plus-plus-er/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-01-swift-call-c-plus-plus-er/</guid>
      <description>如何在swift调整c++代码呢？ swift通过工程的桥接文件，调用oc的代码，间接调用c++代码!!! 1.创建C++ Person类文件：P</description>
    </item>
    
    <item>
      <title>swift call c&#43;&#43;（一）</title>
      <link>https://ksnowlv.github.io/post/2019-04-01-swift-call-c-plus-plus-yi/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-04-01-swift-call-c-plus-plus-yi/</guid>
      <description>如何在swift调整c++代码呢？ swift通过工程的桥接文件，调用c的代码，间接调用c++代码!!! 1.创建C++ Person类文件：Pe</description>
    </item>
    
    <item>
      <title>go变量声明和使用</title>
      <link>https://ksnowlv.github.io/post/2019-02-01-gobian-liang/</link>
      <pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2019-02-01-gobian-liang/</guid>
      <description>go变量声明和使用 ···go package main import &amp;quot;fmt&amp;quot; var x, y int var ( a int b bool ) var c, d int = 1, 2 var e, f = 123, &amp;quot;hello&amp;quot; func main() { //这咱不带声明格式的用法，只能出现在函数休内 g, h</description>
    </item>
    
    <item>
      <title>swift中pthread_t之mutex</title>
      <link>https://ksnowlv.github.io/post/2018-08-07-swiftzhong-pthread-tzhi-mutex/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-08-07-swiftzhong-pthread-tzhi-mutex/</guid>
      <description>mutex类型有四种 PTHREAD_MUTEX_NORMAL PTHREAD_MUTEX_ERRORCHECK PTHREAD_MUTEX_RECURSIVE PTHREAD_MUTEX_DEFAULT 1.mutex初始化。 var mutex = pthread_mutex_t() var attr: pthread_mutexattr_t = pthread_mutexattr_t() pthread_mutexattr_init(&amp;amp;attr) pthread_mutexattr_settype(&amp;amp;attr, PTHREAD_MUTEX_RECURSIVE) pthread_mutex_init(&amp;amp;mutex, &amp;amp;attr) 2.mutex使用。```objective-c pthread_mutex_trylock(&amp;amp;mutex) //执行代码</description>
    </item>
    
    <item>
      <title>synchronized到objc_sync_enter/objc_sync_exit</title>
      <link>https://ksnowlv.github.io/post/2018-08-07-swiftzhong-yu-oczhong-yong-fa-qu-bie/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-08-07-swiftzhong-yu-oczhong-yong-fa-qu-bie/</guid>
      <description>synchronized-&amp;gt;objc_sync_enter/objc_sync_exit objc_sync_enter：递归锁，与objc_sync_exit配合使用，注意死锁 Begin synchronizing on &amp;lsquo;obj&amp;rsquo;. Allocates recursive pthread_mutex associated with &amp;lsquo;obj&amp;rsquo; if needed. Parameters obj The object to begin synchronizing on. Returns OBJC_SYNC_SUCCESS once lock is</description>
    </item>
    
    <item>
      <title>全局并发队列优先级</title>
      <link>https://ksnowlv.github.io/post/2018-07-24-quan-ju-bing-fa-dui-lie-you-xian-ji/</link>
      <pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ksnowlv.github.io/post/2018-07-24-quan-ju-bing-fa-dui-lie-you-xian-ji/</guid>
      <description>全局并发队（Global Queue） 老版gcd有四种：high，default，low，background， 优先级为：high&amp;gt;de</description>
    </item>
    
  </channel>
</rss>
