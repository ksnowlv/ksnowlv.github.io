<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android-多线程 | ksnowlv]]></title>
  <link href="http://ksnowlv.github.io/blog/categories/android-duo-xian-cheng/atom.xml" rel="self"/>
  <link href="http://ksnowlv.github.io/"/>
  <updated>2020-05-21T17:06:06+08:00</updated>
  <id>http://ksnowlv.github.io/</id>
  <author>
    <name><![CDATA[律威]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java/Android双重锁定模式]]></title>
    <link href="http://ksnowlv.github.io/blog/2015/05/08/java-slash-android-shuang-zhong-suo-ding-mo-shi/"/>
    <updated>2015-05-08T17:51:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2015/05/08/java-slash-android-shuang-zhong-suo-ding-mo-shi</id>
    <content type="html"><![CDATA[<p><strong>双重检查锁定模式</strong>(<em>DCLP</em>)是一种软件设计模式,用来减少并发系统中竞争和同步的开销.</p>

<!--more-->


<h5>适用性方面：在J2SE 5.0之前的版本使用，有隐患。在J2SE 5.0开始的版本，可以放心使用，已经解决了原有的问题。可参考链接<a href="http://zh.wikipedia.org/zh-cn/%E5%8F%8C%E9%87%8D%E6%A3%80%E6%9F%A5%E9%94%81%E5%AE%9A%E6%A8%A1%E5%BC%8F">双重检查锁定模式</a></h5>

<p>```java</p>

<pre><code>private volatile static ImageLoader instance;

/** Returns singleton class instance */
public static ImageLoader getInstance() {
    if (instance == null) {
        synchronized (ImageLoader.class) {
            if (instance == null) {
                instance = new ImageLoader();
            }
        }
    }
    return instance;
}

//构造函数私有
protected ImageLoader() {
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android线程池]]></title>
    <link href="http://ksnowlv.github.io/blog/2015/04/28/android-xian-cheng-chi/"/>
    <updated>2015-04-28T23:57:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2015/04/28/android-xian-cheng-chi</id>
    <content type="html"><![CDATA[<p><strong>ExecutorService</strong>继承<strong>Executor</strong>，是线程池的一个服务，可以随时关闭线程池。</p>

<p><strong>Executors</strong>是个工厂类，专门创建各种线程池。</p>

<!--more-->


<h4>一.Android常用的线程池有以下四种</h4>

<h5>1.newFixedThreadPool</h5>

<pre><code>创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待.
</code></pre>

<h5>2.newSingleThreadExecutor</h5>

<pre><code>创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行
</code></pre>

<h5>3.newScheduledThreadPool</h5>

<pre><code>创建一个定长线程池，支持定时及周期性任务执行
</code></pre>

<h5>4.newCachedThreadPool</h5>

<pre><code>创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程.
</code></pre>

<h4>二.new Thread的缺点：</h4>

<h5>1.性能变差</h5>

<pre><code>每次new Thread新建线程，导致性能变差。
</code></pre>

<h4>2.线程缺乏统一调度</h4>

<pre><code>可能无节制的频繁创建线程，无法复用；相互之间竞争，及可能占用过多系统资源导致死机或oom。
</code></pre>

<h4>三.Executors线程池优点：</h4>

<h4>1.重用线程对象</h4>

<pre><code>减少线程对象创建、销毁的开销。
</code></pre>

<h4>2.有效控制线程的系统开销</h4>

<ul>
<li>可以根据需要控制线程数最大并发数。</li>
<li>提高系统资源的使用率，降低内存/CPU占用，避免过多资源竞争，避免堵塞。</li>
</ul>


<h4>3.提供定时执行、定期执行、单线程、并发数控制等功能。</h4>

<h4>四.线程沲实质：一种特殊的对象池</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android下锁]]></title>
    <link href="http://ksnowlv.github.io/blog/2015/04/28/android-xia-de-suo/"/>
    <updated>2015-04-28T20:45:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2015/04/28/android-xia-de-suo</id>
    <content type="html"><![CDATA[<h3>Java下的锁</h3>

<!--more-->


<ul>
<li>1.Lock</li>
<li>2.ReentrantLock</li>
<li>3.ReentrantReadWriteLock</li>
</ul>


<p> 可以使用<strong>Condition</strong>进行线程间的同步.</p>

<p>其类结构如下：
<img src="/images/post/2015-04-28-android-xia-suo/java_lock_classes.png" alt="image" /></p>
]]></content>
  </entry>
  
</feed>
