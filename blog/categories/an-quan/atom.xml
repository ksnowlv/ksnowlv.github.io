<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 安全 | ksnowlv]]></title>
  <link href="http://ksnowlv.github.io/blog/categories/an-quan/atom.xml" rel="self"/>
  <link href="http://ksnowlv.github.io/"/>
  <updated>2019-05-05T15:25:26+08:00</updated>
  <id>http://ksnowlv.github.io/</id>
  <author>
    <name><![CDATA[律威]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[非对称加解密算法之ECC]]></title>
    <link href="http://ksnowlv.github.io/blog/2018/04/20/fei-dui-cheng-jia-jie-mi-suan-fa-zhi-ecc/"/>
    <updated>2018-04-20T16:55:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2018/04/20/fei-dui-cheng-jia-jie-mi-suan-fa-zhi-ecc</id>
    <content type="html"><![CDATA[<p>   ECC算法用途比RSA还厉害。</p>

<ul>
<li> 支持加解密。</li>
<li> 支持签名验证。</li>
<li> 支持与DH结合使用，用于密钥磋商，这个密钥交换算法称为ECDH。

<ul>
<li>交换双方可以在不共享任何秘密的情况下协商出一个密钥。Openssl里面的ECC算法的套件支持是ECDSA/ECDH。</li>
</ul>
</li>
</ul>


<p> 开源组件见<a href="https://github.com/ricmoo/GMEllipticCurveCrypto">https://github.com/ricmoo/GMEllipticCurveCrypto</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[非对称加解密算法之DSA-iOS中的应用]]></title>
    <link href="http://ksnowlv.github.io/blog/2018/04/20/fei-dui-cheng-jia-jie-mi-suan-fa-zhi-dsa-ioszhong-de-ying-yong/"/>
    <updated>2018-04-20T15:54:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2018/04/20/fei-dui-cheng-jia-jie-mi-suan-fa-zhi-dsa-ioszhong-de-ying-yong</id>
    <content type="html"><![CDATA[<h4>1.引用openssl库。<a href="https://github.com/x2on/OpenSSL-for-iPhone">https://github.com/x2on/OpenSSL-for-iPhone</a></h4>

<!--more-->


<h4>2.对数据进行签名。</h4>

<p>```objective-c</p>

<p>/<em>对数据进行签名
 @param data 要签名的数据
 @return 签名后数据
 </em>/
&ndash; (NSData <em>)sign:(NSData </em>)data {</p>

<pre><code>int dsaSize = DSA_size(_privateDSAKey);

unsigned char *signBuf = (unsigned char *)calloc(dsaSize, 1);
memset(signBuf, 0, dsaSize *sizeof(unsigned char));
unsigned int signBufLength = 0;

int res = DSA_sign(0, (const unsigned char *) data.bytes, (int)data.length, signBuf, &amp;signBufLength, _privateDSAKey);

if ( 1 == res ) {
    return [NSData dataWithBytesNoCopy:signBuf length:signBufLength];
}

free(signBuf);
return nil;
</code></pre>

<p>}</p>

<p>```</p>

<h4>3.对数据进行验签。</h4>

<p>```objective-c</p>

<p>/<em>进行数据的DSA验签
 @param data      原数据
 @param signData 签名后的数据
 @return 是否成功
 </em>/</p>

<ul>
<li>(BOOL)verify:(NSData <em>)data withSignData:(NSData </em>)signData {
  return  DSA_verify(0, (const unsigned char <em>)[data bytes], (int)data.length,  (const unsigned char </em>)[signData bytes], (int)signData.length, _publicDSAKey) == 1;
}</li>
</ul>


<p>```</p>

<h4>4.在加签和验签前加载公钥与私钥。</h4>

<p>```objective-c</p>

<p>/<em>使用dsa公钥与私钥
 @param privateKey 私钥
 @param publicKey 公钥
 </em>/
&ndash; (void)setUpPrivateKey:(NSString <em>)privateKey withPublicKey:(NSString </em>)publicKey {</p>

<pre><code>BIO *bio = BIO_new_mem_buf((void *)[privateKey cStringUsingEncoding:NSUTF8StringEncoding], -1);
_privateDSAKey = PEM_read_bio_DSAPrivateKey(bio, NULL, NULL, NULL);

BIO_free(bio);

bio = BIO_new_mem_buf((void *)[publicKey cStringUsingEncoding:NSUTF8StringEncoding], -1);
_publicDSAKey = PEM_read_bio_DSA_PUBKEY(bio, NULL, NULL, NULL);
BIO_free(bio);
</code></pre>

<p>}
```</p>

<h4>5.测试。</h4>

<p>```objective-c
 KDSASign *sign = [KDSASign new];</p>

<pre><code>[sign setUpPrivateKey:priKey withPublicKey:pubKey];

NSData *resData =  [sign sign:[orginalString dataUsingEncoding:NSUTF8StringEncoding]];
BOOL isVerify =  [sign verify:[orginalString dataUsingEncoding:NSUTF8StringEncoding] withSignData:resData];

if (isVerify) {
    NSLog(@"验签通过");
}else{
    NSLog(@"验签失败");
}
</code></pre>

<p>```</p>

<h4>6.其它</h4>

<ul>
<li>1.接口为什么设计成这样？加载公钥与私钥和加签，验签接口合并？</li>
<li>2.为什么没有采用单例？</li>
<li>3.为什么接口没有使用类方法？</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常见非对称加密算法]]></title>
    <link href="http://ksnowlv.github.io/blog/2018/04/19/chang-jian-fei-dui-cheng-jia-mi-suan-fa/"/>
    <updated>2018-04-19T19:37:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2018/04/19/chang-jian-fei-dui-cheng-jia-mi-suan-fa</id>
    <content type="html"><![CDATA[<p>常见非对称加密算法有哪些呢？</p>

<!--more-->


<ul>
<li>1.RSA。</li>
<li>2.DSA。</li>
<li>3.ECC/ECDH/ECDSA。</li>
<li>4.Elgamal：<a href="https://baike.baidu.com/item/Elgamal">Elgamal算法</a></li>
<li>5.背包算法：</li>
</ul>


<p>简单从安全性，性能方面做下对比：</p>

<ul>
<li>1.安全性：RSA和DSA差不多，而ECC系列好一些。</li>
<li>2.性能：RSA和DSA差不多，ECC系列有更好的性能。，包括处理速度，带宽要求，存储空间等等。</li>
<li>3.需要注意点：

<ul>
<li>RSA建议采用1024位的数字。</li>
<li>DSA只能用于数字签名,不能用于加解密，比RSA要快很多。</li>
<li>ECC建议采用160位。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[非对称加解密算法之DSA---dsa公钥与私钥 ]]></title>
    <link href="http://ksnowlv.github.io/blog/2018/04/17/fei-dui-cheng-jia-jie-mi-suan-fa-zhi-dsa-zhi-yi/"/>
    <updated>2018-04-17T18:31:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2018/04/17/fei-dui-cheng-jia-jie-mi-suan-fa-zhi-dsa-zhi-yi</id>
    <content type="html"><![CDATA[<p>DSA(Digital Signature Algorithm)：非对称加密算法，安全性与RSA相比差不多。</p>

<!--more-->


<ul>
<li> DSA只是一种算法，和RSA不同之处在于它不能用作加密和解密，也不能进行密钥交换，只用于签名,比RSA要快很多.</li>
<li> 和RSA加密解密过程相反，在DSA数字签名和认证中，发送者使用自己的私钥对文件或消息进行签名，接受者收到消息后使用发送者的公钥来验证签名的真实性。</li>
</ul>


<h3>如何生成dsa公钥与私钥</h3>

<h5>1. 进入openssl后，生成模长为1024bit的私钥文件 dsaparam.pem</h5>

<p>dsaparam -out dsaparam.pem 1024</p>

<h5>2. 生成私钥dsa_private_key.pem</h5>

<p>gendsa -out dsa_private_key.pem dsaparam.pem</p>

<h5>3. 将私钥转换成PKCS8格式的私钥</h5>

<p>pkcs8 -topk8 -inform PEM -in dsa_private_key.pem -outform PEM -nocrypt -out dsa_private_key_pkcs8.pem</p>

<h5>4. 生成供iOS使用的公钥文件dsa_public_key.pem</h5>

<p>dsa -in dsa_private_key_pkcs8.pem -pubout -out dsa_public_key.pem</p>

<p>详细操作见下图：
<img src="/images/post/2018-04-18-fei-dui-cheng-jia-jie-mi-suan-fa-zhi-dsa-zhi-yi/1.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常见散列算法]]></title>
    <link href="http://ksnowlv.github.io/blog/2018/04/17/ioszhong-san-lie-suan-fa/"/>
    <updated>2018-04-17T16:34:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2018/04/17/ioszhong-san-lie-suan-fa</id>
    <content type="html"><![CDATA[<p> 常见的单向散列算法，可用于数字签名，单向的，不可逆向，<strong>并非加密算法</strong>。
 <!--more--></p>

<p> 主要用途是为了校验数据在传输过程中是否被修改。</p>

<ul>
<li>1.MD5(Message Digest algorithm 5，信息摘要算法)</li>
<li>2.SHA(Secure Hash Algorithm，安全散列算法)</li>
<li>3.HMAC(Hash Message Authentication Code，散列消息鉴别码)</li>
</ul>


<p>其中sha1（安全性sha1 > md5）因为安全性问题，在iOS上推荐SHA224/SHA256/SHA384/SHA512.</p>

<p>这些散列算法，通常用来校验数据在传输过程中是否被修改。其中HMAC算法有一个密钥，增强了数据传输过程中的安全性，强化了算法外的不可控因素。</p>

<p> iOS散列算法实现如下：</p>

<p>```objective-c</p>

<p>typedef NS_ENUM(NSUInteger, YKSHAType) {</p>

<pre><code>YKSHATypeUnknown,
YKSHATypeSha1,
YKSHATypeSha224,
YKSHATypeSha256,
YKSHATypeSha384,
YKSHATypeSha512,
</code></pre>

<p>};</p>

<p>/**</p>

<pre><code>如基本的单向散列算法
</code></pre>

<p> **/
@interface YKEncryption : NSObject</p>

<p>/<strong>
 MD5(Message Digest algorithm 5，信息摘要算法)
 </strong>/</p>

<ul>
<li>(NSString <em>)md5:(NSString </em>)source;</li>
</ul>


<p>/<strong>
SHA(Secure Hash Algorithm，安全散列算法)
 支持类型见YKSHAType定义
 </strong>/
+ (NSString <em>)SHA:(NSString </em>)source shaType:(YKSHAType)shaType;</p>

<p>/<strong>
HMAC(Hash Message Authentication Code，散列消息鉴别码)
 </strong>/
+ (NSString <em>)hmac:(NSString </em>)source withKey:(NSString *)key;</p>

<p>@end
```</p>

<p>实现文件</p>

<p>```objective-c
import &ldquo;YKEncryption.h&rdquo;</p>

<h1>import &lt;CommonCrypto/CommonDigest.h></h1>

<h1>import &lt;CommonCrypto/CommonHMAC.h></h1>

<p>@implementation YKEncryption</p>

<ul>
<li><p>(NSString <em>)md5:(NSString </em>)source{</p>

<p>  if (0 == source.length) {
      return nil;
  }</p>

<p>  NSData *data = [source dataUsingEncoding:NSUTF8StringEncoding];</p>

<p>  unsigned char result[CC_MD5_DIGEST_LENGTH];
  memset(result, 0, CC_MD5_DIGEST_LENGTH * sizeof(unsigned char));</p>

<p>  CC_MD5(data.bytes, (unsigned int)data.length, result);</p>

<p>  NSMutableString <em>dest = [NSMutableString stringWithCapacity:CC_MD5_DIGEST_LENGTH</em>2];//</p>

<p>  for(NSInteger i = 0; i &lt; CC_MD5_DIGEST_LENGTH; i++) {
      [dest appendFormat:@&ldquo;%02x&rdquo;,result[i]];
  }</p>

<p>  return [dest lowercaseString];
}</p></li>
<li><p>(NSString <em>)SHA:(NSString </em>)source shaType:(YKSHAType)shaType {
  if (0 == source.length || shaType &lt; YKSHATypeSha1 || shaType > YKSHATypeSha512) {
      return nil;
  }</p>

<p>  NSData *data = [source dataUsingEncoding:NSUTF8StringEncoding];</p>

<p>  //CC_SHA512_DIGEST_LENGTH > CC_SHA384_DIGEST_LENGTH> CC_SHA256_DIGEST_LENGTH > CC_SHA224_DIGEST_LENGTH > CC_SHA1_DIGEST_LENGTH
  //resultData = calloc(length, sizeof(uint8_t)); need free(resultData) 使用定长数组，减少内存碎片。
  uint8_t resultData[CC_SHA512_DIGEST_LENGTH];
  memset(resultData, 0, CC_SHA512_DIGEST_LENGTH * sizeof(uint8_t));
  NSInteger resultDataLength = 0;</p>

<p>  switch (shaType) {
      case YKSHATypeSha1:{
          resultDataLength = CC_SHA1_DIGEST_LENGTH;
          CC_SHA1(data.bytes, (CC_LONG)data.length, resultData);
      }</p>

<pre><code>      break;

  case YKSHATypeSha224:{
      resultDataLength = CC_SHA224_DIGEST_LENGTH;
      CC_SHA224(data.bytes, (CC_LONG)data.length, resultData);
  }

      break;

  case YKSHATypeSha256:{
      resultDataLength = CC_SHA256_DIGEST_LENGTH;
      CC_SHA256(data.bytes, (CC_LONG)data.length, resultData);
  }

      break;

  case YKSHATypeSha384:{
      resultDataLength = CC_SHA384_DIGEST_LENGTH;
      CC_SHA384(data.bytes, (CC_LONG)data.length, resultData);
  }
      break;

  case YKSHATypeSha512:{
      resultDataLength = CC_SHA512_DIGEST_LENGTH;
      CC_SHA512(data.bytes, (CC_LONG)data.length, resultData);
  }
      break;
  default:
      break;
</code></pre>

<p>  }</p>

<p>  NSMutableString* result = [NSMutableString stringWithCapacity:resultDataLength * 2];</p>

<p>  for(NSInteger i = 0; i &lt; resultDataLength; i++) {
      [result appendFormat:@&ldquo;%02x&rdquo;, resultData[i]];
  }</p>

<p>  return [result lowercaseString];
}</p></li>
<li><p>(NSString <em>)hmac:(NSString </em>)source withKey:(NSString *)key {</p>

<p>  if (0 == source.length ) {
      return nil;
  }</p>

<p>  NSData <em>sourceData = [source dataUsingEncoding:NSUTF8StringEncoding];
  NSData </em>keyData = [key dataUsingEncoding:NSUTF8StringEncoding];</p>

<p>  unsigned char hmac[CC_SHA256_DIGEST_LENGTH];
  memset(hmac, 0, CC_SHA256_DIGEST_LENGTH * sizeof(unsigned char));</p>

<p>  CCHmac(kCCHmacAlgSHA256, keyData.bytes, keyData.length, sourceData.bytes, sourceData.length, hmac);</p>

<p>  NSData <em>hmacData = [NSData dataWithBytes:hmac length:sizeof(hmac)];
  const unsigned char </em>buffer = (const unsigned char *)[hmacData bytes];</p>

<p>  NSMutableString *resHMAC = [NSMutableString stringWithCapacity:hmacData.length * 2];</p>

<p>  for (int i = 0; i &lt; hmacData.length; ++i){
      [resHMAC appendFormat:@&ldquo;%02x&rdquo;, buffer[i]];
  }</p>

<p>  return [resHMAC lowercaseString];
}</p></li>
</ul>


<p>```</p>

<p>可以使用<a href="http://www.atool.org/hash.php">http://www.atool.org/hash.php</a>对照散列后的值是否一致？</p>

<p>调用如下：</p>

<p>```objective-c
   NSString *source = @&ldquo;hello world! 你是全世界!&rdquo;;</p>

<pre><code>NSString *resString = [YKEncryption md5:source];
NSLog(@"md5 res = %@",resString);


resString = [YKEncryption SHA:source shaType:YKSHATypeSha1];
NSLog(@"sha1 res = %@",resString);

resString = [YKEncryption SHA:source shaType:YKSHATypeSha224];
NSLog(@"sha224 res = %@",resString);
resString = [YKEncryption SHA:source shaType:YKSHATypeSha256];
NSLog(@"sha256 res = %@",resString);

resString = [YKEncryption SHA:source shaType:YKSHATypeSha384];
NSLog(@"sha384 res = %@",resString);

resString = [YKEncryption SHA:source shaType:YKSHATypeSha512];
NSLog(@"sha512 res = %@",resString);

resString = [YKEncryption hmac:source withKey:@"abc"];

NSLog(@"hmac res = %@",resString);
</code></pre>

<p>```</p>

<p>完整demo见<a href="git@github.com:ksnowlv/HashTest.git">HashTest</a></p>
]]></content>
  </entry>
  
</feed>
