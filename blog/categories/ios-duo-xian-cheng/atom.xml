<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS-多线程 | ksnowlv]]></title>
  <link href="http://ksnowlv.github.io/blog/categories/ios-duo-xian-cheng/atom.xml" rel="self"/>
  <link href="http://ksnowlv.github.io/"/>
  <updated>2019-05-15T17:09:38+08:00</updated>
  <id>http://ksnowlv.github.io/</id>
  <author>
    <name><![CDATA[律威]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS同步对象性能对比]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/09/07/ios-tong-bu-suo-xing-neng-dui-bi/"/>
    <updated>2014-09-07T10:42:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/09/07/ios-tong-bu-suo-xing-neng-dui-bi</id>
    <content type="html"><![CDATA[<p>在iOS开发中，支持多种同步方法，我们从耗时角度出发，评估各种同步对象的性能。</p>

<!--more-->


<p>``` objective-c</p>

<p> 1.@synchronized
 2.NSLock
 3.NSCondition
 4.NSConditionLock
 5.NSRecursiveLock
 6.pthread_mutex_t
 7.OSSpinLock
 8.dispatch_barrier_async
```
示例代码如下：</p>

<p>``` objective-c
  const NSInteger KRunTimes = 1000 * 1000;</p>

<p>  double curTime, lastTime;</p>

<p>  // 1.同步synchronized
  id obj = [NSObject new];</p>

<p>  lastTime = CFAbsoluteTimeGetCurrent();
  for (NSInteger i = 0; i &lt; KRunTimes; ++i) {</p>

<pre><code>@synchronized(obj) {
}
</code></pre>

<p>  }
  curTime = CFAbsoluteTimeGetCurrent();
  NSLog(@&ldquo;@synchronized: %f ms&rdquo;, (curTime &ndash; lastTime) * 1000);</p>

<p>  // 2.NSLock
  NSLock *myLock = [NSLock new];</p>

<p>  lastTime = CFAbsoluteTimeGetCurrent();
  for (NSInteger i = 0; i &lt; KRunTimes; ++i) {</p>

<pre><code>[myLock lock];
[myLock unlock];
</code></pre>

<p>  }
  curTime = CFAbsoluteTimeGetCurrent();
  NSLog(@&ldquo;NSLock: %f ms&rdquo;, (curTime &ndash; lastTime) * 1000);</p>

<p>  // NSLock IMP
  typedef void (<em>func)(id, SEL);
  SEL lockSEL = @selector(lock);
  SEL unlockSEL = @selector(unlock);
  func lockFunc = (void (</em>)(id, SEL))[myLock methodForSelector : lockSEL];
  func unlockFunc = (void (*)(id, SEL))[myLock methodForSelector : unlockSEL];</p>

<p>  lastTime = CFAbsoluteTimeGetCurrent();
  for (NSInteger i = 0; i &lt; KRunTimes; ++i) {</p>

<pre><code>lockFunc(myLock, lockSEL);
unlockFunc(myLock, unlockSEL);
</code></pre>

<p>  }</p>

<p>  curTime = CFAbsoluteTimeGetCurrent();
  NSLog(@&ldquo;NSLock + IMP: %f ms&rdquo;, (curTime &ndash; lastTime) * 1000);</p>

<p>  // 3.NSCondition
  NSCondition *condition = [[NSCondition alloc] init];
  lastTime = CFAbsoluteTimeGetCurrent();
  for (NSInteger i = 0; i &lt; KRunTimes; ++i) {</p>

<pre><code>[condition lock];
[condition unlock];
</code></pre>

<p>  }
  curTime = CFAbsoluteTimeGetCurrent();
  NSLog(@&ldquo;NSCondition: %f ms&rdquo;, (curTime &ndash; lastTime) * 1000);</p>

<p>  // 4.NSConditionLock
  NSConditionLock *conditionLock = [[NSConditionLock alloc] init];
  lastTime = CFAbsoluteTimeGetCurrent();
  for (NSInteger i = 0; i &lt; KRunTimes; ++i) {</p>

<pre><code>[conditionLock lock];
[conditionLock unlock];
</code></pre>

<p>  }
  curTime = CFAbsoluteTimeGetCurrent();
  NSLog(@&ldquo;NSConditionLock: %f ms&rdquo;, (curTime &ndash; lastTime) * 1000);</p>

<p>  // 5.NSRecursiveLock
  NSRecursiveLock *recursiveLock = [[NSRecursiveLock alloc] init];
  lastTime = CFAbsoluteTimeGetCurrent();
  for (NSInteger i = 0; i &lt; KRunTimes; ++i) {</p>

<pre><code>[recursiveLock lock];
[recursiveLock unlock];
</code></pre>

<p>  }
  curTime = CFAbsoluteTimeGetCurrent();
  NSLog(@&ldquo;NSRecursiveLock: %f ms&rdquo;, (curTime &ndash; lastTime) * 1000);</p>

<p>  // 6.pthread_mutex_t
  pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;</p>

<p>  lastTime = CFAbsoluteTimeGetCurrent();
  for (NSInteger i = 0; i &lt; KRunTimes; ++i) {</p>

<pre><code>pthread_mutex_lock(&amp;mutex);
pthread_mutex_unlock(&amp;mutex);
</code></pre>

<p>  }</p>

<p>  curTime = CFAbsoluteTimeGetCurrent();
  NSLog(@&ldquo;pthread_mutex: %f ms&rdquo;, (curTime &ndash; lastTime) * 1000);
  pthread_mutex_destroy(&amp;mutex);</p>

<p>  // 7.OSSpinLock 自旋锁;
  OSSpinLock spinlock = OS_SPINLOCK_INIT;
  lastTime = CFAbsoluteTimeGetCurrent();
  for (NSInteger i = 0; i &lt; KRunTimes; ++i) {</p>

<pre><code>OSSpinLockLock(&amp;spinlock);
OSSpinLockUnlock(&amp;spinlock);
</code></pre>

<p>  }</p>

<p>  curTime = CFAbsoluteTimeGetCurrent();
  NSLog(@&ldquo;OSSpinlock: %f ms&rdquo;, (curTime &ndash; lastTime) * 1000);</p>

<p>  // 8 dispatch_barrier_async
  dispatch_queue_t queue =</p>

<pre><code>  dispatch_queue_create("com.qq.ksnow", DISPATCH_QUEUE_CONCURRENT);
</code></pre>

<p>  lastTime   = CFAbsoluteTimeGetCurrent();
  for (NSInteger i = 0; i &lt; KRunTimes; ++i) {</p>

<pre><code>dispatch_barrier_async(queue, ^{});
</code></pre>

<p>  }
  curTime = CFAbsoluteTimeGetCurrent();
  NSLog(@&ldquo;@dispatch_barrier_async: %f ms&rdquo;, (curTime &ndash; lastTime) * 1000);</p>

<p>```</p>

<h3>一.模拟器/iOS7/XCode6下性能对比</h3>

<h4>日志情况:</h4>

<pre><code> 2014-09-07 11:26:48.071 LockTest[2713:98107] @synchronized: 232.551038 ms

2014-09-07 11:26:48.173 LockTest[2713:98107] NSLock: 100.879967 ms
2014-09-07 11:26:48.263 LockTest[2713:98107] NSLock + IMP: 89.570999 ms
2014-09-07 11:26:48.353 LockTest[2713:98107] NSCondition: 89.850008 ms
2014-09-07 11:26:48.587 LockTest[2713:98107] NSConditionLock: 233.431995 ms
2014-09-07 11:26:48.677 LockTest[2713:98107] NSRecursiveLock: 89.230001 ms
2014-09-07 11:26:48.740 LockTest[2713:98107] pthread_mutex: 62.326968 ms
2014-09-07 11:26:48.750 LockTest[2713:98107] OSSpinlock: 10.430992 ms
2014-09-07 11:26:49.985 LockTest[2713:98107] dispatch_barrier_async: 1234.429002 ms
</code></pre>

<h4>总结对比</h4>

<p><img src="/images/post/2014-09-07-ios-tong-bu-suo-xing-neng-dui-bi/syn_compared_simulate.png" alt="image" /></p>

<h4>二.iPad Mini2/iOS7/XCode6下性能对比</h4>

<pre><code>2014-09-07 13:32:47.720 LockTest[3494:60b] @synchronized: 499.736011 ms
2014-09-07 13:32:47.948 LockTest[3494:60b] NSLock: 227.194011 ms
2014-09-07 13:32:48.170 LockTest[3494:60b] NSLock + IMP: 221.384048 ms
2014-09-07 13:32:48.393 LockTest[3494:60b] NSCondition: 221.689999 ms
2014-09-07 13:32:49.030 LockTest[3494:60b] NSConditionLock: 636.340976 ms
2014-09-07 13:32:49.260 LockTest[3494:60b] NSRecursiveLock: 229.423046 ms
2014-09-07 13:32:49.431 LockTest[3494:60b] pthread_mutex: 170.615971 ms
2014-09-07 13:32:49.495 LockTest[3494:60b] OSSpinlock: 63.916981 ms
2014-09-07 13:32:49.826 LockTest[3494:60b] dispatch_barrier_async: 329.769015 ms
</code></pre>

<p><img src="/images/post/2014-09-07-ios-tong-bu-suo-xing-neng-dui-bi/syn_compared_ipad_mini2.png" alt="image" /></p>

<h3>总结</h3>

<ul>
<li><p>耗时方面：</p>

<ul>
<li>OSSpinlock耗时最少;</li>
<li>pthread_mutex其次。</li>
<li>NSLock/NSCondition/NSRecursiveLock 耗时接近，220ms上下居中。</li>
<li>NSConditionLock最差，我们常用synchronized倒数第二。</li>
<li>dispatch_barrier_async也许，性能并不像我们想象中的那么好.推测与线程同步调度开销有关。单独block耗时在1ms以下基本上可以忽略不计的。</li>
</ul>
</li>
<li><p>在访问次数比较多的情况下,IMP访问耗时要比消息发送略小。
参看<code>NSLock</code>与<code>NSLock + IMP</code>对比。</p></li>
<li><p>为什么不直接使用<strong>IMP</strong>而使用直接声明函数指针的方式?
XCode6下IMP不能指定参数，报错如下：
<img src="/images/post/2014-09-07-ios-tong-bu-suo-xing-neng-dui-bi/error_overview.png" alt="image" />
如何解决呢？修改LLVM预处理设置即可。详情见<a href="http://ksnowlv.gitcafe.com/blog/2014/09/07/xcode6-too-many-arguments-to-function-call-expected-0-have-2/">XCode6下Too many arguments to function call, expected 0, have 2解决办法</a></p></li>
</ul>


<h3>原因分析</h3>

<h4>1.synchronized</h4>

<pre><code>会创建一个异常捕获handler和一些内部的锁。所以，使用@synchronized替换普通锁的代价是，你付出更多的时间消耗。
</code></pre>

<h4>2.NSConditionLock</h4>

<pre><code>条件锁，与特定的，用户定义的条件有关。可以确保一个线程可以获取满足一定条件的锁。
内部会涉及到信号量机制，一旦一个线程获得锁后，它可以放弃锁并设置相关条件;其它线程竞争该锁。
线程之间的竞争激烈，涉及到条件锁检测，线程间通信。系统调用，上下切换方切换比较频繁。
</code></pre>

<h4>3.OSSpinLock</h4>

<pre><code>自旋锁几乎不进入内核，仅仅是重新加载自旋锁。
如果自旋锁被占用时间是几十，上百纳秒，性能还是挺高的。减少了代价较高的系统调用和一系列上下文言切换。
但是，该锁不是万能的;如果该锁抢占比较多的时候，不要使用该锁。会占用较多cpu,导致耗电较多。
这种情况下使用pthread_mutex虽然耗时多一点，但是，避免了电量过多的消耗。是不错的选择。
</code></pre>

<h4>4.pthread_mutex</h4>

<pre><code>底层的API还是性能比较高啊，在各种同步对象中，性能属于佼佼者。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCD之监听文件]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/09/06/gcd-zhi-jian-ting-wen-jian/"/>
    <updated>2014-09-06T17:42:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/09/06/gcd-zhi-jian-ting-wen-jian</id>
    <content type="html"><![CDATA[<p>GCD可以用来监听文件变化，例如目录变化，重命名等之类的。
例如我们监听<code>Document</code>目录下，<code>ksnow</code>目录的变化。</p>

<!--more-->


<p>``` objective-c</p>

<p>NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,</p>

<pre><code>                                                   NSUserDomainMask, YES);
</code></pre>

<p>  if (paths.count == 0) {</p>

<pre><code>return;
</code></pre>

<p>  }</p>

<p>  NSString *ksnowDir =</p>

<pre><code>  [[paths objectAtIndex:0] stringByAppendingPathComponent:@"ksnow"];
</code></pre>

<p>  NSLog(@&ldquo;ksnowdir = %@&rdquo;, ksnowDir);</p>

<p>  NSURL *directoryURL = [NSURL URLWithString:ksnowDir];</p>

<p>  int const fd =</p>

<pre><code>  open([[directoryURL path] fileSystemRepresentation], O_EVTONLY);
</code></pre>

<p>  if (fd &lt; 0) {</p>

<pre><code>NSLog(@"Unable to open the path = %@", [directoryURL path]);
return;
</code></pre>

<p>  }
  dispatch_source_t source =</p>

<pre><code>  dispatch_source_create(DISPATCH_SOURCE_TYPE_VNODE, fd,
                         DISPATCH_VNODE_WRITE | DISPATCH_VNODE_RENAME,
                         DISPATCH_TARGET_QUEUE_DEFAULT);
</code></pre>

<p>  dispatch_source_set_event_handler(source, ^() {</p>

<pre><code>  unsigned long const type = dispatch_source_get_data(source);

  switch (type) {
  case DISPATCH_VNODE_WRITE: {
    NSLog(@"目录内容改变!!!");
    break;
  }
  case DISPATCH_VNODE_RENAME: {
    NSLog(@"目录被重命名!!!");
    break;
  }

  default:
    break;
  }
</code></pre>

<p>  });
  dispatch_source_set_cancel_handler(source, ^() { close(fd); });
  self.source = source;
  dispatch_resume(self.source);</p>

<p>```</p>

<p>对<code>/Users/ksnowlv/Library/Developer/CoreSimulator/Devices/DCA2391F-AA20-484C-AC45-BB762077A904/data/Containers/Data/Application/C268F09F-1B97-4546-BED0-EF56782A50B8/Documents/ksnow</code>该目录进行重命名，添加文件，删除文件等操作。</p>

<p>```objective-c</p>

<p>2014-09-06 17:50:06.473 GCDWatchFileTest[6257:881686] ksnowdir = /Users/ksnowlv/Library/Developer/CoreSimulator/Devices/DCA2391F-AA20-484C-AC45-BB762077A904/data/Containers/Data/Application/C268F09F-1B97-4546-BED0-EF56782A50B8/Documents/ksnow
2014-09-06 17:50:26.799 GCDWatchFileTest[6257:882512] 目录被重命名!!!
2014-09-06 17:50:40.113 GCDWatchFileTest[6257:883922] 目录被重命名!!!
2014-09-06 17:50:47.472 GCDWatchFileTest[6257:884919] 目录内容改变!!!
2014-09-06 17:50:53.632 GCDWatchFileTest[6257:884919] 目录内容改变!!!</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CGD之监视进程]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/09/06/cgd-zhi-jian-shi-jin-cheng/"/>
    <updated>2014-09-06T16:07:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/09/06/cgd-zhi-jian-shi-jin-cheng</id>
    <content type="html"><![CDATA[<p><strong>GCD</strong>可以检测进程的运行，退出状态，可以检测到进程间的信号。</p>

<!--more-->


<pre><code>#define DISPATCH_PROC_EXIT      0x80000000
#define DISPATCH_PROC_FORK      0x40000000
#define DISPATCH_PROC_EXEC      0x20000000
#define DISPATCH_PROC_SIGNAL       0x08000000
</code></pre>

<p>可以使用<code>dispatch source</code>捕获相关信号。</p>

<ul>
<li><strong>DISPATCH_PROC_EXIT</strong>在<strong>Mac</strong>上可以捕获，在<strong>iOS</strong>上是无法捕获的。</li>
<li><strong>DISPATCH_PROC_SIGNAL</strong>在<strong>Mac</strong>/<strong>iOS</strong>上均可捕获。</li>
</ul>


<h4>1.Mac上示例:</h4>

<p>```objective-c
// 可以通过注释掉的代码找关掉应用的BundleIdentifier
//    NSArray *runningAppList = [NSWorkspace sharedWorkspace].runningApplications;
//  <br/>
//    NSLog(@&ldquo;runningAppList = %@&rdquo;,runningAppList.description);</p>

<pre><code>NSArray *appList = [NSRunningApplication
                              runningApplicationsWithBundleIdentifier:@"com.google.Chrome"];

if (appList.count == 0 ) {
    return;
}

NSRunningApplication *chromeApp = appList[0];

self.source = dispatch_source_create(DISPATCH_SOURCE_TYPE_PROC, chromeApp.processIdentifier,
                                     DISPATCH_PROC_EXIT, DISPATCH_TARGET_QUEUE_DEFAULT);
dispatch_source_set_event_handler(self.source, ^(){
    NSLog(@"google Chrome exit");
});
dispatch_resume(self.source);
</code></pre>

<p>```</p>

<h4>执行上述代码前，确保<code>google Chrome浏览器</code>是打开的，然后，退出<code>google Chrome浏览器</code>。</h4>

<p>``` objective-c</p>

<p>2014-09-06 16:16:34.261 MacSignalTest[4070:1003] google Chrome exit</p>

<p>```</p>

<h4>2. iOS示例</h4>

<p>``` objective-c</p>

<pre><code>pid_t pid = getpid();
pid_t uid = getuid();
const char* name =  getprogname();

NSLog(@"pid = %d uid = %d, progname = %s",pid,uid,name);

self.source = dispatch_source_create(DISPATCH_SOURCE_TYPE_PROC, pid,
                                     DISPATCH_PROC_SIGNAL, DISPATCH_TARGET_QUEUE_DEFAULT);
dispatch_source_set_event_handler(self.source, ^(){
    NSLog(@"ios app exit for signal!");
});
dispatch_resume(self.source);
</code></pre>

<p>```</p>

<p>当<strong>signal</strong>信号发出时，会触发<strong>signal</strong>事件。</p>

<p>``` objective-c</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于NSOperation的使用之一]]></title>
    <link href="http://ksnowlv.github.io/blog/2013/04/03/guan-yu-nsoperationde-shi-yong-zhi-yi/"/>
    <updated>2013-04-03T19:20:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2013/04/03/guan-yu-nsoperationde-shi-yong-zhi-yi</id>
    <content type="html"><![CDATA[<p>   Apple在OS X 10.5 Leopard上做了很多改进。<code>NSThread</code>本身就新增了很多新的方法，从而使得多线程变得更加容易。此外还新增了<code>NSOperation</code>和<code>NSOperationQueue</code>两个类，使多线程编程更加方便！</p>

<p>以<code>NSOperation</code>和<code>NSOperationQueue</code>为例</p>

<h4>1.头文件</h4>

<p>```objective-c</p>

<p>//  QTileDownloadOperation.h</p>

<h1>import &lt;Foundation/Foundation.h></h1>

<p>@interface QTileDownloadOperation : NSOperation</p>

<p>@property(nonatomic, retain)NSString* name;</p>

<ul>
<li>(void)clear;</li>
</ul>


<p>@end</p>

<p>```</p>

<h4>2.实现文件</h4>

<p>```objective-c
//  QTileDownloadOperation.m</p>

<h1>import &ldquo;QTileDownloadOperation.h&rdquo;</h1>

<p>@implementation QTileDownloadOperation
@synthesize name;</p>

<ul>
<li><p>(void)dealloc {
  [name release];</p>

<p>  //&hellip;&hellip;
  [super dealloc];
}</p></li>
<li><p>(void)main
{
  if ([self isCancelled] || [self isFinished]) {
      return;
  }</p>

<p>  NSLog(@&ldquo;%@start!&rdquo;,name);
  NSString* urlString = [@&ldquo;你得URL&rdquo; stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];</p>

<p>  NSURL<em> url = [NSURL URLWithString:urlString];
  NSMutableURLRequest</em> requestWithAgent = [NSMutableURLRequest requestWithURL:url];</p>

<p>  [requestWithAgent setValue:@&ldquo;mapapi&rdquo; forHTTPHeaderField:@&ldquo;User-Agent&rdquo;];
  [requestWithAgent setTimeoutInterval:120];</p>

<p>  NSError* error = nil;</p>

<p>  NSData *data = [NSURLConnection sendSynchronousRequest:requestWithAgent returningResponse:nil error:&amp;error];</p>

<p>  if (error == nil) {</p>

<pre><code>  if (![self isCancelled])
  {
      [self didFinishWithData:data];
  }
</code></pre>

<p>  }
  else
  {
     //error handle
     //对外通知，注意线程同步
  }
}</p></li>
<li><p>(void)didFinishWithData:(NSData*)data
{
  NSLog(@&ldquo;%@complete!&rdquo;,name);
  //数据处理&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;.
  //对外通知，注意线程同步
}</p></li>
<li><p>(void)clear
{
  //可以进行取消网络，delegate置为nil,清理其他资源等。主要是防止线程对象释放时Crash
}</p></li>
</ul>


<p>@end</p>

<p>```</p>

<p>可以使用使用自己创建的<code>OperationQueue</code>管理线程对象</p>

<p>```objective-c</p>

<pre><code>NSOperationQueue* q = [[NSOperationQueue alloc] init];
self.myQueue = q;
//设置允许最大并发数
[myQueue setMaxConcurrentOperationCount:2];
[q release];
</code></pre>

<p><code>``
向</code>NSOperationQueue<code>中添加</code>QTileDownloadOperation`对象</p>

<p>```objective-c</p>

<pre><code>for (int i = 0; i &lt; 8; ++i) {

    QTileDownloadOperation* op = [[QTileDownloadOperation alloc] init];
    NSString* name = [NSString stringWithFormat:@"op%d",i];
    op.name = name;
    [myQueue addOperation:op];
    [op release];
}
</code></pre>

<p>```</p>

<p>释放线程队列如下：</p>

<p>```objective-c</p>

<pre><code>NSArray *allOperations = [myQueue operations];

for (QTileDownloadOperation* op in allOperations) {

    if(![op isCancelled])
    {
        [op clear];
        [op cancel];
    }
}

[myQueue release];
myQueue = nil;
</code></pre>

<p>```</p>

<p>那如何是取消呢？通常情况下，取消当前线程队列中当前待执行线程队列队首尚未取消的线程对象。如下所示：</p>

<p>```objective-c</p>

<pre><code>NSArray *allOperations = [myQueue operations];
for (int i = [myQueue maxConcurrentOperationCount];  i &lt; [allOperations count]; ++i) {
    QTileDownloadOperation* op = [allOperations objectAtIndex:i];

    if (!op.isCancelled) {

        [op clear];
        [op cancel];
    }
}
</code></pre>

<p>```</p>

<p>为什么会allOperations暂存呢？因为线程队列中的对象在并发执行，其状态在任意时间点可能会改变。而这个取消的操作通常在其他线程中，比如说主线程，会因线程不同步引发Crash等异常。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pthread的使用]]></title>
    <link href="http://ksnowlv.github.io/blog/2013/04/03/pthreadde-shi-yong/"/>
    <updated>2013-04-03T18:16:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2013/04/03/pthreadde-shi-yong</id>
    <content type="html"><![CDATA[<p><code>pthread</code>与<code>pthread_mutex_t</code>在一些场景下，会经常结合使用。</p>

<p>示例</p>

<h4>1.头文件。</h4>

<p>```objective-c
//  QBKThread.h
@interface QBKThread : NSObject
{</p>

<pre><code>pthread_t _tid;
pthread_mutex_t theTaskMutex;
</code></pre>

<p>}</p>

<ul>
<li><p>(void*)run;</p></li>
<li><p>(void)start;</p></li>
<li>(void)stop;</li>
</ul>


<p>@end</p>

<p>```</p>

<h4>2.实现文件。</h4>

<p>```objective-c</p>

<p>//  QBKThread.m</p>

<h1>import &ldquo;QBKThread.h&rdquo;</h1>

<h1>import &lt;pthread.h></h1>

<p>void <em>backgroundProcessThread(void </em>p)
{</p>

<pre><code>QBKThread*  t = (QBKThread *)p;
return [t run];
</code></pre>

<p>}</p>

<p>@interface QBKThread()
{</p>

<pre><code>BOOL _isRunnig;
</code></pre>

<p>}</p>

<p>@end</p>

<p>@implementation QBKThread</p>

<ul>
<li><p>(id)init {
  self = [super init];</p>

<p>  if (self) {</p>

<pre><code>  pthread_mutex_init(&amp;theTaskMutex, NULL);
</code></pre>

<p>  }</p>

<p>  return self;
}</p></li>
<li><p>(void)dealloc {
  [self stop];
  pthread_mutex_destroy(&amp;theTaskMutex);
  [super dealloc];
}</p></li>
</ul>


<p>&ndash;(void*)run  {</p>

<pre><code>while (_isRunnig) {
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];

    pthread_mutex_lock(&amp;theTaskMutex);

    NSLog(@"01");

    pthread_mutex_unlock(&amp;theTaskMutex);

    [NSThread sleepForTimeInterval:0.16];
    [pool release];

}

return 0;
</code></pre>

<p>}</p>

<ul>
<li><p>(void)start {
  pthread_mutex_lock(&amp;theTaskMutex);</p>

<p>  if (!<em>isRunnig)  {
      </em>isRunnig = YES;
      pthread_create(&amp;_tid, NULL, backgroundProcessThread, self);
  }</p>

<p>  pthread_mutex_unlock(&amp;theTaskMutex);
}</p></li>
<li><p>(void)stop {
   pthread_mutex_lock(&amp;theTaskMutex);
  if (<em>isRunnig) {
      </em>isRunnig = NO;
      //printf(&ldquo;exitThread:(BOOL)bHandleCancel exitNow = YES;\n&rdquo;);
      pthread_join(_tid, NULL);
      NSLog(@&ldquo;thread close&rdquo;);
  }
  pthread_mutex_unlock(&amp;theTaskMutex);
}</p></li>
</ul>


<p>```</p>
]]></content>
  </entry>
  
</feed>
