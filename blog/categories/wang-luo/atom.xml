<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 网络 | ksnowlv]]></title>
  <link href="http://ksnowlv.github.io/blog/categories/wang-luo/atom.xml" rel="self"/>
  <link href="http://ksnowlv.github.io/"/>
  <updated>2020-05-22T13:58:52+08:00</updated>
  <id>http://ksnowlv.github.io/</id>
  <author>
    <name><![CDATA[律威]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[直播协议对比]]></title>
    <link href="http://ksnowlv.github.io/blog/2018/07/23/zhi-bo-xie-yi-dui-bi/"/>
    <updated>2018-07-23T16:45:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2018/07/23/zhi-bo-xie-yi-dui-bi</id>
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th></th>
<th>直播协议</th>
<th>优势</th>
<th>劣势</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> RTP /RTCP</td>
<td>RTP 实行有序传送,RTP中的序列号允许接收方重组发送方的包序列，同时序列号也能用于决定适当的包位置，如在视频解码中，就不需要顺序解码。RTCP的主要功能是为RTP所提供的服务质量提供反馈，例如：RTP传输字节数，传输分组数，丢失分组数，单向和双向网络延迟等。网络应用程序可以利用RTCP所提供的信息来提高服务质量，比如限制流量或改用压缩比小的编解码器</td>
<td>RTP载荷的最大尺寸为1460字 节。以H264 为例，如果一帧数据大于1460，则需要分片打包，然后到接收端再拆包，组合成一帧数据，进行解码播放。|</td>
</tr>
<tr>
<td></td>
<td>RTSP:(Real Time Streaming Protocol)实时流协议</td>
<td>RTSP 是一种双向实时数据传输协议，它允许客户端向服务器端发送请求，如回放、快进、倒退等操作。而且，RTSP 可基于RTP 来传送数据，还可以选择 TCP、UDP、组播 UDP 等通道来发送数据，具有很好的扩展性</td>
<td>1.服务端实现复杂。2.代理服务器弱：数量少，优化少3. 无路由器防火墙穿透。4. 管流分离：需要1-3个通道|</td>
</tr>
<tr>
<td></td>
<td>RTMP协议(Real Time Messaging Protocol)实时消息传输协议</td>
<td>RTMP是Adobe Systems公司为Flash播放器和服务器之间音频、视频和数据传输开发的开放协议。该协议基于TCP，RTMP是一种设计用来进行实时数据通信的网络协议，主要用来在Flash/AIR平台和支持RTMP协议的流媒体/交互服务器之间进行音视频和数据通信。1.速度快，误码率低，延迟低 。2.RTMP 是专为流媒体服务而生，协议在制定的时候就考虑到很多底层的优化3.消息块的传输能够提供更加稳定的直播环境，在硬件上要求会更高，但是却能够缓解http的繁琐的传输介质</td>
<td>1.不支持Html5传播、浏览器推送 2.基于TCP协议,虽然开发难度大，推广度还不够，对于开发人员来说门槛比较高 3.硬件要求相较于HLS较高。 4. 协议复杂：开发者写起来累，效率也不行。5.Cache麻烦：流协议做缓存不方便。|</td>
</tr>
<tr>
<td></td>
<td>HTTP-FLV协议</td>
<td>FLV协议由Adobe公司主推，即将音视频数据封装成 FLV，然后通过 HTTP 协议传输给客户端，格式极其简单，只是在大块的视频帧和音视频头部加入一些标记头信息，在延迟表现和大规模并发方面都很成熟。但是在手机浏览器上的支持非常有限，但是用作手机端APP直播协议却异常合适。</td>
<td>1.需要http长连接 2.h5中需要使用插件。3.需要flash技术支持，不支持多音频流，多视频流，不便于拖动|</td>
</tr>
<tr>
<td></td>
<td>HLS协议</td>
<td>HLS协议苹果推出，将视频分成5-10秒的视频小分片，然后用m3u8索引表进行管理，由于客户端下载到的视频都是5-10秒的完整数据，故视频的流畅性很好，但也同样引入了很大的延迟(HLS的一般延迟在10-30s左右)。实际上还是纯“文本协议”相比于FLV，HLS在iPhone和大部分android手机浏览器上的支持非常给力。HLS协议客户端支持简单, 只需要支持 HTTP 请求即可, HTTP 协议无状态, 只需要按顺序下载媒体片段即可，而且网络兼容性好, HTTP 数据包也可以方便地通过防火墙或者代理服务器。但是相比RTMP 这类长连接协议, 用到互动直播场景延时较高。</td>
<td>相比 RTMP 这类长连接协议, 延时较高, 难以用到直播场景。对于点播服务来说, 由于 TS 切片通常较小, 海量碎片在文件分发, 一致性缓存, 存储等方面都有较大挑战，小文件碎片化严重|</td>
</tr>
</tbody>
</table>


<p>直播协议hls，rtmp，http flv，rtsp</p>

<table>
<thead>
<tr>
<th></th>
<th>协议</th>
<th>传输方式</th>
<th>视频封装格式</th>
<th>延时</th>
<th>数据分段</th>
<th> HTML5直播</th>
<th>应用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>HLS</td>
<td>Http流</td>
<td>ts文件</td>
<td>10~30s</td>
<td>切片</td>
<td>支持</td>
<td>H5直播，游戏直播</td>
</tr>
<tr>
<td></td>
<td> RTMP </td>
<td>tcp流</td>
<td>flv tag</td>
<td>2s~5s</td>
<td>连续流</td>
<td>不支持</td>
<td>互动直播|</td>
</tr>
<tr>
<td></td>
<td>http flv</td>
<td>HTTP流</td>
<td>flv</td>
<td>2s~5s，优于rtmp</td>
<td>连续流</td>
<td>支持</td>
<td>互动直播|</td>
</tr>
<tr>
<td></td>
<td>rtsp</td>
<td>tcp/udp流</td>
<td>flv</td>
<td>一般做到500ms以下</td>
<td>连续流</td>
<td>不支持</td>
<td>互动直播|</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[http1.1与2.0主要区别]]></title>
    <link href="http://ksnowlv.github.io/blog/2018/04/13/http1-dot-1yu-2-dot-0zhu-yao-qu-bie/"/>
    <updated>2018-04-13T19:24:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2018/04/13/http1-dot-1yu-2-dot-0zhu-yao-qu-bie</id>
    <content type="html"><![CDATA[<p>http2.0与1.1相比较，有哪些区别呢？</p>

<!--more-->


<h4>1.数据格式</h4>

<p>http2.0采用的是二进制格式，http1.1采用的是文本格式。
二进制协议解析起来更高效，更紧凑，错误更少。</p>

<h4>2.多路复用：非有序并阻塞，需要一个连接即可实现并发。</h4>

<ul>
<li><p>HTTP/1.x 的问题</p>

<p>  线端阻塞(head-of-line blocking), 指一个连接(connection)一次只提交一个请求的效率比较高, 多了就会变慢。 HTTP/1.1 试过用流水线(pipelining)来解决这个问题, 但是效果并不理想(数据量较大或者速度较慢的响应, 会阻碍排在他后面的请求).
   此外, 由于网络媒介(intermediary )和服务器不能很好的支持流水线, 导致部署起来困难重重。</p></li>
<li><p>HTTP2.0使用了多路复用优势，</p></li>
</ul>


<p>   同一个连接可以并发处理多个请求，同时处理多个消息的请求和响应，而且并发请求的数量比HTTP1.1大了好几个数量级。HTTP1.1也可以多建立几个TCP连接，来支持处理更多并发的请求，创建TCP连接本身也是有开销的。</p>

<p> TCP连接有一个预热和保护的过程，先检查数据是否传送成功，一旦成功过，则慢慢加大传输速度。因此对应瞬时并发的连接，服务器的响应就会变慢。所以最好能使用一个建立好的连接，并且这个连接可以支持瞬时并发的请求。</p>

<h4>3.消息头压缩</h4>

<p>HTTP1.1不支持header数据的压缩，HTTP2.0使用HPACK算法对header的数据进行压缩，这样数据量小，网络传输时间相对短一些。</p>

<h4>4.服务器推送</h4>

<p>  当浏览器请求一个网页时，服务器将会发回HTML，在服务器开始发送JavaScript、图片和CSS前，服务器需要等待浏览器解析HTML和发送所有内嵌资源的请求。服务器推送服务通过“推送”那些它认为客户端将会需要的内容到客户端的缓存中，以此来避免数据往返的延迟。</p>

<p>  当我们对支持HTTP2.0的web server请求数据的时候，服务器会顺便把一些客户端需要的资源一起推送到客户端，免得客户端再次创建连接发送请求到服务器端获取。这种方式非常合适加载静态资源。</p>

<p>服务器端推送的这些静态资源下发到本地客户端，客户端直接从本地加载这些资源，页面加载速度会大大提高。</p>
]]></content>
  </entry>
  
</feed>
