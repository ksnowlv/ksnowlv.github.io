<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS-内存 | ksnowlv]]></title>
  <link href="http://ksnowlv.github.io/blog/categories/ios-nei-cun/atom.xml" rel="self"/>
  <link href="http://ksnowlv.github.io/"/>
  <updated>2020-05-21T17:06:06+08:00</updated>
  <id>http://ksnowlv.github.io/</id>
  <author>
    <name><![CDATA[律威]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS系统对象重用]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/09/05/ios-xi-tong-dui-xiang-zhong-yong/"/>
    <updated>2014-09-05T16:24:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/09/05/ios-xi-tong-dui-xiang-zhong-yong</id>
    <content type="html"><![CDATA[<h4>当我们重复创建/销毁对象的操作时，iOS系统对象是否会被重用呢？</h4>

<!--more-->


<h4>结论:iOS系统较低概率会输出可重用的对象,so,注意内存使用效率[可用Allocation工具检测]。</h4>

<blockquote><p>不要寄希望于系统对你低效的代码进行你想象中的优化!</p></blockquote>

<h4>测试思路</h4>

<pre><code>以0.1s为间隔的timer,周期性的创建UILabel/NSMutableData，观察它们内存地址变化情况？
</code></pre>

<h4>测试代码</h4>

<p>``` objective-c</p>

<ul>
<li><p>(void)viewDidLoad {
  [super viewDidLoad];
  // Do any additional setup after loading the view, typically from a nib.</p>

<p>  _timer = [NSTimer scheduledTimerWithTimeInterval:0.1 target:self selector:@selector(handleNewObject) userInfo:nil repeats:YES];
}</p></li>
<li><p>(void)didReceiveMemoryWarning {
  [super didReceiveMemoryWarning];
  // Dispose of any resources that can be recreated.
}</p></li>
<li><p>(void)handleNewObject{
  UILabel <em>label = [[UILabel alloc] init];
  NSMutableData </em>data = [[NSMutableData alloc] initWithCapacity:1024];
  NSLog(@&ldquo;UILabel address = %p,NSMutableData address = %p&rdquo;,label,data);
}</p></li>
</ul>


<p>```</p>

<h4>截取部分日志情况</h4>

<p>``` objective-c
2014-09-05 16:22:43.564 DataReuseTest[70877:5448269] UILabel address = 0xba12bd0,NSMutableData address = 0xba06aa0
2014-09-05 16:22:43.664 DataReuseTest[70877:5448269] UILabel address = 0xae104c0,NSMutableData address = 0xae19f70
2014-09-05 16:22:43.764 DataReuseTest[70877:5448269] UILabel address = 0xbb0d7d0,NSMutableData address = 0xbb08710
2014-09-05 16:22:43.864 DataReuseTest[70877:5448269] UILabel address = 0xba315f0,NSMutableData address = 0xba12330
2014-09-05 16:22:43.964 DataReuseTest[70877:5448269] UILabel address = 0xae104c0,NSMutableData address = 0xae19f70
2014-09-05 16:22:44.064 DataReuseTest[70877:5448269] UILabel address = 0xba315f0,NSMutableData address = 0xba12330
2014-09-05 16:22:44.164 DataReuseTest[70877:5448269] UILabel address = 0xba315f0,NSMutableData address = 0xae0d9d0
2014-09-05 16:22:44.263 DataReuseTest[70877:5448269] UILabel address = 0xba315f0,NSMutableData address = 0xba12330
2014-09-05 16:22:44.364 DataReuseTest[70877:5448269] UILabel address = 0xba315f0,NSMutableData address = 0xba12330
2014-09-05 16:22:44.464 DataReuseTest[70877:5448269] UILabel address = 0xae104c0,NSMutableData address = 0xae19f70
2014-09-05 16:22:44.564 DataReuseTest[70877:5448269] UILabel address = 0xba315f0,NSMutableData address = 0xba12330
2014-09-05 16:22:44.664 DataReuseTest[70877:5448269] UILabel address = 0xba315f0,NSMutableData address = 0xbb02d20
2014-09-05 16:22:44.764 DataReuseTest[70877:5448269] UILabel address = 0xae104c0,NSMutableData address = 0xae19f70
2014-09-05 16:22:44.864 DataReuseTest[70877:5448269] UILabel address = 0xba315f0,NSMutableData address = 0xba13490
2014-09-05 16:22:44.963 DataReuseTest[70877:5448269] UILabel address = 0xba315f0,NSMutableData address = 0xba13490
2014-09-05 16:22:45.064 DataReuseTest[70877:5448269] UILabel address = 0xae104c0,NSMutableData address = 0xae19f70
2014-09-05 16:22:45.164 DataReuseTest[70877:5448269] UILabel address = 0xb84ea90,NSMutableData address = 0xb811d60</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS中clean memory/dirty memory]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/08/17/clean-memory-slash-dirty-memory/"/>
    <updated>2014-08-17T16:45:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/08/17/clean-memory-slash-dirty-memory</id>
    <content type="html"><![CDATA[<p>iOS系统中,有<code>clean memory</code>/<code>dirty memory</code>之分；</p>

<!--more-->


<h4>1.<code>clean memory</code>:可以被重新创建的内存块。包含以下三方面：</h4>

<pre><code>1.系统framework
2.应用的二进制执行文件.
3.内存数据映射到文件。
</code></pre>

<h4>当你的App链接一个<code>framewrok</code>,<code>clean memory</code>会增加。绝大多数情况下，只有部分framework的二进制文件是通过物理内存加载的。</h4>

<h4>2.<code>dirty memory</code>:除了<code>clean memory</code>之外所有的内存统称为<code>dirty memory</code>.<code>dirty memory</code>不能由系统重新创建。</h4>

<h4>3.系统有内存压力时，例如内存警告。</h4>

<h4>当有内存压力时，系统将会卸载一些<code>clean memory</code>。当系统需要该clean memory的数据时，系统将会重新创建。</h4>

<h4>但是，有内存压力时，系统不能卸载<code>dirty memory</code>,因为iOS没有内存置换机制，<code>dirty memory</code>经常占有物理内存，当<code>dirty memory</code>达到一个上限，应用就会被"杀死".所有的内存由系统回收。</h4>

<h4>4.如何减少dirty memory呢？例如:</h4>

<pre><code>  1.[NSData dataWithContentsOfMappedFile:]替代内存加载。
  可惜该API现在不推荐使用。
  2.使用[UIImage imageWithContentsOfFile:]替代[UIImage imageNamed]
  3.降低内存占用。
  4.适当的cache.
</code></pre>

<h4>5.如何发现定位dirty memory呢?可以参考<a href="http://liam.flookes.com/wp/2012/05/03/finding-ios-memory/">Finding iOS memory</a></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单例的内存泄漏]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/08/11/dan-li-de-nei-cun-xie-lou/"/>
    <updated>2014-08-11T22:35:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/08/11/dan-li-de-nei-cun-xie-lou</id>
    <content type="html"><![CDATA[<p>今天发现iOS上的单例，在苹果自带memory leak工具中,</p>

<pre><code>使用iOS6显示有内容泄漏。
使用iOS7或以上无内存泄漏。
</code></pre>

<p>推测应该是iOS系统对内存回收策略可能不太一样。</p>

<!--more-->


<p>单例创建对象一次，会在App被退出时被系统回收,不用担心内存泄漏的。</p>

<pre><code>在iOS7或以上有内存泄漏时，检查下单例中创建某些对象时， 是不是忘记对原有对象回收?!
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS/iPad App内存占用上限(二)]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/07/28/ping-guo-appnei-cun-zhan-yong-shang-xian/"/>
    <updated>2014-07-28T11:13:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/07/28/ping-guo-appnei-cun-zhan-yong-shang-xian</id>
    <content type="html"><![CDATA[<p>iOS/iPad App内存占用上限是多少呢？</p>

<!--more-->


<h4>iOS/iPad App内存占用在打开许多App后，打开demo App,该demo App占用内存的上限能达到多少呢？</h4>

<h4>使用下面的代码,点击按钮后，观察内存警告时，App被kill时的日志输出。</h4>

<h5>内存警告时</h5>

<p>``` objective-c</p>

<ul>
<li><p>(void)didReceiveMemoryWarning
{
  [super didReceiveMemoryWarning];
  // Dispose of any resources that can be recreated.</p>

<p>  NSLog(@&ldquo;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;memory warning&rdquo;);
  [self mallocMemory];
  NSLog(@&ldquo;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;memory warningx&rdquo;);
}</p></li>
</ul>


<p>```</p>

<h5>手动触发该按钮事件后，等待被“kill”吧。</h5>

<p>``` objective-c</p>

<ul>
<li><p>(IBAction)startMallocEvent:(id)sender
{
  if (<em>timer.isValid) {
      [</em>timer invalidate];
  }
 _timer =  [NSTimer scheduledTimerWithTimeInterval:0.05 target:self selector:@selector(mallocMemory) userInfo:nil repeats:YES];
}</p></li>
<li><p>(void)mallocMemory
{
  const CGFloat KMemoryLength = 1024.0f * 1024.0f;
  <em>pMemory[</em>count]  = malloc(KMemoryLength);
  memset(<em>pMemory[</em>count], 0, KMemoryLength);
  ++_count;</p>

<p>  //实际内存
  struct task_basic_info info;
  mach_msg_type_number_t size = sizeof(info);
  kern_return_t error = task_info(mach_task_self(), TASK_BASIC_INFO, (task_info_t)&amp;info, &amp;size);</p>

<p>  long curMemorySize = 0;
  long curVirtualMemorySize = 0;</p>

<p>  if (error == KERN_SUCCESS) {
      curMemorySize = info.resident_size;
      curVirtualMemorySize = info.virtual_size;
  }</p>

<p>  mach_port_t host_port = mach_host_self();
  mach_msg_type_number_t host_size = sizeof(vm_statistics_data_t) / sizeof(integer_t);
  vm_size_t pagesize;
  vm_statistics_data_t vm_stat;</p>

<p>  host_page_size(host_port, &amp;pagesize);
  (void) host_statistics(host_port, HOST_VM_INFO, (host_info_t)&amp;vm_stat, &amp;host_size);</p>

<p>  long freeMemorySize =  vm_stat.free_count * pagesize;</p>

<p>  NSLog(@&ldquo;curMemorySize = %5.1fM,VirtualMemorySize = %5.1fM,freeMemorySize = %5.1fM&rdquo;,
        curMemorySize/KMemoryLength,
        curVirtualMemorySize/KMemoryLength,
        freeMemorySize/KMemoryLength);</p>

<p>  uint64_t physicalMemorySize = 0;
  uint64_t userMemorySize = 0;</p>

<p>  int mib[2];
  size_t length;
  mib[0] = CTL_HW;</p>

<p>  mib[1] = HW_MEMSIZE;
  length = sizeof(int64_t);
  sysctl(mib, 2, &amp;physicalMemorySize, &amp;length, NULL, 0);</p>

<p>  mib[1] = HW_USERMEM;
  length = sizeof(int64_t);
  sysctl(mib, 2, &amp;userMemorySize, &amp;length, NULL, 0);</p>

<p>  NSLog(@&ldquo;physicalMemorySize = %5.1fM,userMemorySize = %5.1fM&rdquo;,
        physicalMemorySize/KMemoryLength,
        userMemorySize/KMemoryLength);</p></li>
</ul>


<p>}</p>

<p>```</p>

<h4>使用iPad mini2设备，统计7欠被杀死的情况。根据日志输出，整理其在被系统杀死时各项内存占用，如下：</h4>

<table>
<thead>
<tr>
<th></th>
<th> 序号  </th>
<th>  内存(M)  </th>
<th>  虚拟内存(M)  </th>
<th>  空闲内存(M)  </th>
<th>  物理内存(M)  </th>
<th>  非内核内存(M)   </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>1     </td>
<td>192.1      </td>
<td>  1275.4      </td>
<td>30.2         </td>
<td>976           </td>
<td>815         </td>
</tr>
<tr>
<td></td>
<td>2     </td>
<td>157.1      </td>
<td>  1304.6      </td>
<td>39.8         </td>
<td>976           </td>
<td>813         </td>
</tr>
<tr>
<td></td>
<td>3     </td>
<td>151.7      </td>
<td>  1277.4      </td>
<td>29.1         </td>
<td>976           </td>
<td>821         </td>
</tr>
<tr>
<td></td>
<td>4     </td>
<td>153.3      </td>
<td>  1304.7      </td>
<td>37.8         </td>
<td>976           </td>
<td>817.5       </td>
</tr>
<tr>
<td></td>
<td>5     </td>
<td>138.3      </td>
<td>  2073.9      </td>
<td>29.7         </td>
<td>976           </td>
<td>817.9       </td>
</tr>
<tr>
<td></td>
<td>6     </td>
<td>137.1      </td>
<td>  2074.4      </td>
<td>35.8         </td>
<td>976           </td>
<td>817.9       </td>
</tr>
</tbody>
</table>


<h4>结论：</h4>

<pre><code>1.占有虚拟内存 &lt; 2G,非内核内存占用在820M左右，即为死亡线。
2.内存警告线，离这个死亡线很近。
3.实际内存占用不高，虚拟内存较高，也会被“kill”。
根源：内存使用效率不高，dirty memory较高！
</code></pre>

<h4>因此，对内存的优化，需要集中两方面</h4>

<p>1.内存的占用。</p>

<p>2.内存的使用效率</p>

<pre><code>这个会涉及到cache,可能会增加内存的占用。
尽是提高clean memory，降低dirty memory。
</code></pre>

<h4>注：更详细的数据分析及结论，如果需要，可以联系我。</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS/iPad App内存占用上限(一)]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/07/27/ping-guo-appnei-cun-zhan-yong-shang-xian/"/>
    <updated>2014-07-27T23:44:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/07/27/ping-guo-appnei-cun-zhan-yong-shang-xian</id>
    <content type="html"><![CDATA[<p>如何测试iOS/iPad App内存占用上限呢？</p>

<!--more-->


<h4>iOS/iPad App内存占用在只有一个App运行时，该App占用内存的上限能达到多少呢？</h4>

<h4>关闭设备上所有其它应用,测试 demo app 占用内存上限.</h4>

<p>``` objective-c</p>

<ul>
<li><p>(void)didReceiveMemoryWarning
{
  [super didReceiveMemoryWarning];
  // Dispose of any resources that can be recreated.</p>

<p>  NSLog(@&ldquo;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;memory warning&rdquo;);
  [self mallocMemory];
  NSLog(@&ldquo;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;memory warningx&rdquo;);
}</p></li>
<li><p>(IBAction)startMallocEvent:(id)sender
{
  if (<em>timer.isValid) {
      [</em>timer invalidate];
  }
 _timer =  [NSTimer scheduledTimerWithTimeInterval:0.05 target:self selector:@selector(mallocMemory) userInfo:nil repeats:YES];
}</p></li>
<li><p>(void)mallocMemory
{
  const CGFloat KMemoryLength = 1024.0f * 1024.0f;
  <em>pMemory[</em>count]  = malloc(KMemoryLength);
  memset(<em>pMemory[</em>count], 0, KMemoryLength);
  ++_count;</p>

<p>  //实际内存
  struct task_basic_info info;
  mach_msg_type_number_t size = sizeof(info);
  kern_return_t error = task_info(mach_task_self(), TASK_BASIC_INFO, (task_info_t)&amp;info, &amp;size);</p>

<p>  long curMemorySize = 0;
  long curVirtualMemorySize = 0;</p>

<p>  if (error == KERN_SUCCESS) {
      curMemorySize = info.resident_size;
      curVirtualMemorySize = info.virtual_size;
  }</p>

<p>  mach_port_t host_port = mach_host_self();
  mach_msg_type_number_t host_size = sizeof(vm_statistics_data_t) / sizeof(integer_t);
  vm_size_t pagesize;
  vm_statistics_data_t vm_stat;</p>

<p>  host_page_size(host_port, &amp;pagesize);
  (void) host_statistics(host_port, HOST_VM_INFO, (host_info_t)&amp;vm_stat, &amp;host_size);</p>

<p>  long freeMemorySize =  vm_stat.free_count * pagesize;</p>

<p>  NSLog(@&ldquo;curMemorySize = %5.1fM,VirtualMemorySize = %5.1fM,freeMemorySize = %5.1fM&rdquo;,
        curMemorySize/KMemoryLength,
        curVirtualMemorySize/KMemoryLength,
        freeMemorySize/KMemoryLength);</p>

<p>  uint64_t physicalMemorySize = 0;
  uint64_t userMemorySize = 0;</p>

<p>  int mib[2];
  size_t length;
  mib[0] = CTL_HW;</p>

<p>  mib[1] = HW_MEMSIZE;
  length = sizeof(int64_t);
  sysctl(mib, 2, &amp;physicalMemorySize, &amp;length, NULL, 0);</p>

<p>  mib[1] = HW_USERMEM;
  length = sizeof(int64_t);
  sysctl(mib, 2, &amp;userMemorySize, &amp;length, NULL, 0);</p>

<p>  NSLog(@&ldquo;physicalMemorySize = %5.1fM,userMemorySize = %5.1fM&rdquo;,
        physicalMemorySize/KMemoryLength,
        userMemorySize/KMemoryLength);</p></li>
</ul>


<p>}</p>

<p>```</p>

<h4>测试工具:使用苹果自带测试工具,点击按钮后, 直到 app 被系统杀死。被杀死时    内存占用情况如下：</h4>

<pre><code>activity monitor 显示的内存占用为:468M.
allocation 显示的内存占用为:681M. 
</code></pre>

<p>详情如下：</p>

<p>   <img src="/images/post/2014-07-27-ping-guo-app-nei-cun-zhan-yong-shang-xian/1.png" alt="image" /></p>

<p>  <img src="/images/post/2014-07-27-ping-guo-app-nei-cun-zhan-yong-shang-xian/2.png" alt="image" /></p>

<p>连续几次结果在上述值多一点。</p>

<pre><code>曾有相关资料介绍,单个 app 占用内存上限为 ram 值的一半。
</code></pre>

<p>看来是有道理的。尽管如此, 我们不能奢求用户只开咱们一个App这种理想化的条件。</p>
]]></content>
  </entry>
  
</feed>
