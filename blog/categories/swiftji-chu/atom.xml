<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swift基础 | ksnowlv]]></title>
  <link href="http://ksnowlv.github.io/blog/categories/swiftji-chu/atom.xml" rel="self"/>
  <link href="http://ksnowlv.github.io/"/>
  <updated>2019-05-15T17:09:38+08:00</updated>
  <id>http://ksnowlv.github.io/</id>
  <author>
    <name><![CDATA[律威]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[swift call c++（二）]]></title>
    <link href="http://ksnowlv.github.io/blog/2019/04/01/swift-call-c-plus-plus-%28er%29/"/>
    <updated>2019-04-01T17:35:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2019/04/01/swift-call-c-plus-plus-(er)</id>
    <content type="html"><![CDATA[<p>如何在swift调整c++代码呢？</p>

<p><em>swift通过工程的桥接文件，调用oc的代码，间接调用c++代码!!!</em></p>

<h4>1.创建C++ Person类文件：<code>Person.hpp</code>和<code>Person.cpp</code></h4>

<p><code>Person.hpp</code>内容如下：</p>

<p>```objective-c</p>

<p>//
//  Person.hpp
//  SwiftCallC
//
//  Created by ksnowlv on 2019/3/28.
//  Copyright © 2019 ksnowlv. All rights reserved.
//</p>

<h1>ifndef Person_hpp</h1>

<h1>define Person_hpp</h1>

<h1>include &lt;stdio.h></h1>

<p>class Person {
public:</p>

<pre><code>Person();
~Person();

void setName(const char* pName);
const char* name();

void setAge(const int age);
const int age() const;
</code></pre>

<p>private:</p>

<pre><code>char *m_pName;
int m_age;
</code></pre>

<p>};</p>

<h1>endif /<em> Person_hpp </em>/</h1>

<p>```</p>

<p><code>Person.cpp</code>内容如下</p>

<p>```objective-c</p>

<p>//
//  Person.cpp
//  SwiftCallC
//
//  Created by ksnowlv on 2019/3/28.
//  Copyright © 2019 ksnowlv. All rights reserved.
//</p>

<h1>include &ldquo;Person.hpp&rdquo;</h1>

<h1>include &lt;string.h></h1>

<p>Person::Person() {</p>

<pre><code>m_pName = nullptr;
m_age = 0;
</code></pre>

<p>}</p>

<p>Person::~Person() {</p>

<pre><code>if (m_pName) {
    delete [] m_pName;
    m_pName = nullptr;
}
</code></pre>

<p>}</p>

<p>void Person::setAge(const int age) {</p>

<pre><code>m_age = age;
</code></pre>

<p>}</p>

<p>const int Person::age()const {</p>

<pre><code>return m_age;
</code></pre>

<p>}</p>

<p>void Person::setName(const char *pName) {</p>

<pre><code>if (m_pName) {
    delete [] m_pName;
    m_pName = nullptr;
}

if (pName) {
    const size_t len = strlen(pName) + 1;
    m_pName = new char[len];
    memset(m_pName, 0, len);
    strcpy(m_pName, pName);
}
</code></pre>

<p>}</p>

<p>const char* Person::name() {</p>

<pre><code>return m_pName;
</code></pre>

<p>}</p>

<p>```</p>

<h4>2.创建oc类文件：<code>PersonExt.h</code>和<code>PersonExt.mm</code></h4>

<p><code>PersonExt.h</code>内容如下</p>

<p>```objective-c
//
//  PersonExt.h
//  SwiftCallC
//
//  Created by ksnowlv on 2019/4/1.
//  Copyright © 2019 ksnowlv. All rights reserved.
//</p>

<h1>import &lt;Foundation/Foundation.h></h1>

<p>NS_ASSUME_NONNULL_BEGIN</p>

<p>@interface PersonExt : NSObject</p>

<p>@property(nonatomic, strong) NSString *name;
@property(nonatomic, assign) NSInteger age;</p>

<p>@end</p>

<p>NS_ASSUME_NONNULL_END</p>

<p>```</p>

<p><code>PersonExt.mm</code>内容如下</p>

<p>```objective-c</p>

<p>//
//  PersonExt.m
//  SwiftCallC
//
//  Created by ksnowlv on 2019/4/1.
//  Copyright © 2019 ksnowlv. All rights reserved.
//</p>

<h1>import &ldquo;PersonExt.h&rdquo;</h1>

<h1>include &ldquo;Person.hpp&rdquo;</h1>

<p>@interface PersonExt () {</p>

<pre><code>Person *_person;
</code></pre>

<p>}</p>

<p>@end</p>

<p>@implementation PersonExt</p>

<ul>
<li><p>(id)init {
  self = [super init];</p>

<p>  if (self) {
      _person = new Person();
  }</p>

<p>  return self;
}</p></li>
<li><p>(void)dealloc {</p>

<p>  if (<em>person) {
      delete </em>person;
      _person = nil;
  }
}</p></li>
<li><p>(void)setName:(NSString *)name {
  if (<em>person) {
      </em>person->setName([name UTF8String]);
  }
}</p></li>
<li><p>(NSString <em>)name {
  if (_person) {
      const char </em>name = _person->name();</p>

<pre><code>  if (name) {
      return  [NSString stringWithUTF8String:name];
  }
</code></pre>

<p>  }</p>

<p>  return nil;
}</p></li>
<li><p>(void)setAge:(NSInteger)age {</p>

<p>  if (<em>person) {
      </em>person->setAge((const int)age);
  }
}</p></li>
<li><p>(NSInteger)age {
  if (<em>person) {
      return  </em>person->age();
  }</p>

<p>  return 0;
}</p></li>
</ul>


<p>@end</p>

<p>```</p>

<h4>3.在桥接文件中,加入<code>PersonExt.h</code>引用：<code>#include "PersonExt.h"</code></h4>

<h4>4.swift中调用</h4>

<p>```objective-c</p>

<pre><code>let personExt = PersonExt()
var age = personExt.age
print("age =",age)
personExt.age = 20
age = personExt.age
print("age =",age)

personExt.name = "ksnowlv"
print("name = ",personExt.name) 
</code></pre>

<p>```</p>

<p>结果显而易见：</p>

<p>```objective-c
age = 0
age = 20
name =  ksnowlv</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[swift call c++（一）]]></title>
    <link href="http://ksnowlv.github.io/blog/2019/04/01/swift-call-c-plus-plus-%28yi%29/"/>
    <updated>2019-04-01T17:23:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2019/04/01/swift-call-c-plus-plus-(yi)</id>
    <content type="html"><![CDATA[<p>如何在swift调整c++代码呢？</p>

<p><em>swift通过工程的桥接文件，调用c的代码，间接调用c++代码!!!</em></p>

<h4>1.创建C++ Person类文件：<code>Person.hpp</code>和<code>Person.cpp</code></h4>

<p><code>Person.hpp</code>内容如下：</p>

<p>```objective-c</p>

<p>//
//  Person.hpp
//  SwiftCallC
//
//  Created by ksnowlv on 2019/3/28.
//  Copyright © 2019 ksnowlv. All rights reserved.
//</p>

<h1>ifndef Person_hpp</h1>

<h1>define Person_hpp</h1>

<h1>include &lt;stdio.h></h1>

<p>class Person {
public:</p>

<pre><code>Person();
~Person();

void setName(const char* pName);
const char* name();

void setAge(const int age);
const int age() const;
</code></pre>

<p>private:</p>

<pre><code>char *m_pName;
int m_age;
</code></pre>

<p>};</p>

<h1>endif /<em> Person_hpp </em>/</h1>

<p>```</p>

<p><code>Person.cpp</code>内容如下</p>

<p>```objective-c</p>

<p>//
//  Person.cpp
//  SwiftCallC
//
//  Created by ksnowlv on 2019/3/28.
//  Copyright © 2019 ksnowlv. All rights reserved.
//</p>

<h1>include &ldquo;Person.hpp&rdquo;</h1>

<h1>include &lt;string.h></h1>

<p>Person::Person() {</p>

<pre><code>m_pName = nullptr;
m_age = 0;
</code></pre>

<p>}</p>

<p>Person::~Person() {</p>

<pre><code>if (m_pName) {
    delete [] m_pName;
    m_pName = nullptr;
}
</code></pre>

<p>}</p>

<p>void Person::setAge(const int age) {</p>

<pre><code>m_age = age;
</code></pre>

<p>}</p>

<p>const int Person::age()const {</p>

<pre><code>return m_age;
</code></pre>

<p>}</p>

<p>void Person::setName(const char *pName) {</p>

<pre><code>if (m_pName) {
    delete [] m_pName;
    m_pName = nullptr;
}

if (pName) {
    const size_t len = strlen(pName) + 1;
    m_pName = new char[len];
    memset(m_pName, 0, len);
    strcpy(m_pName, pName);
}
</code></pre>

<p>}</p>

<p>const char* Person::name() {</p>

<pre><code>return m_pName;
</code></pre>

<p>}</p>

<p>```</p>

<h4>2.创建c类文件：<code>PersonExtension.hpp</code>和<code>PersonExtension.cpp</code></h4>

<p><code>PersonExtension.hpp</code>内容如下</p>

<p>```objective-c
//
//  PersonExtension.hpp
//  SwiftCallC
//
//  Created by ksnowlv on 2019/3/29.
//  Copyright © 2019 ksnowlv. All rights reserved.
//</p>

<h1>ifndef PersonExtension_hpp</h1>

<h1>define PersonExtension_hpp</h1>

<h1>include &lt;stdio.h></h1>

<h1>ifdef __cplusplus</h1>

<p>extern &ldquo;C&rdquo;{</p>

<h1>endif</h1>

<pre><code>//在这里写上c的代码

//初始化一个Person的实例

const void * createPerson();
const void destroyPerson(void* p);
const void setPersonAge(void* p, const int age);
const int personAge(void* p);
const void setPersonName(void* p, const char* name);
const char* personName(void* p);
</code></pre>

<h1>ifdef __cplusplus</h1>

<p>}</p>

<h1>endif</h1>

<h1>endif /<em> PersonExtension_hpp </em>/</h1>

<p>```</p>

<p><code>PersonExtension.cpp</code>内容如下</p>

<p>```objective-c</p>

<p>//
//  PersonExtension.cpp
//  SwiftCallC
//
//  Created by ksnowlv on 2019/3/29.
//  Copyright © 2019 ksnowlv. All rights reserved.
//</p>

<h1>include &ldquo;PersonExtension.hpp&rdquo;</h1>

<h1>include &ldquo;Person.hpp&rdquo;</h1>

<p>const void * createPerson()
{</p>

<pre><code>Person *p = new Person();

return (void *)p;
</code></pre>

<p>}</p>

<p>const void destroyPerson(void* p) {</p>

<pre><code>if (p) {
    Person *person = (Person*)p;
    delete person;
}
</code></pre>

<p>}</p>

<p>const void setPersonAge(void* p, const int age) {</p>

<pre><code>if (p) {
    Person *person = (Person*)p;
    person-&gt;setAge(age);
}
</code></pre>

<p>}</p>

<p>const int personAge(void* p) {</p>

<pre><code>if (p) {
    Person *person = (Person*)p;
    return person-&gt;age();
}

return 0;
</code></pre>

<p>}</p>

<p>const void setPersonName(void<em> p, const char</em> name) {</p>

<pre><code>if (p) {
    Person *person = (Person*)p;
    person-&gt;setName(name);
}
</code></pre>

<p>}</p>

<p>const char<em> personName(void</em> p) {</p>

<pre><code>if (p) {
    Person *person = (Person*)p;
    return person-&gt;name();
}

return nullptr;
</code></pre>

<p>}</p>

<p>```</p>

<h4>3.在桥接文件中,加入<code>PersonExtension.hpp</code>引用：<code>#include "PersonExtension.hpp""</code></h4>

<h4>4.swift中调用</h4>

<p>```objective-c</p>

<pre><code>  let person = UnsafeMutableRawPointer(mutating: createPerson())
  print("age =",personAge(person))
  setPersonAge(person, 10)
  print("age =",personAge(person))

  setPersonName(person, "ksnowlv")

  let nameBuf:UnsafePointer&lt;Int8&gt; = personName(person)
  print("name = ",String(cString: nameBuf))

  destroyPerson(person)   
</code></pre>

<p>```</p>

<p>结果显而易见：</p>

<p>```objective-c</p>

<p>age = 0
age = 10
name =  ksnowlv</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
