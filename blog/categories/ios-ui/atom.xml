<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS-UI | ksnowlv]]></title>
  <link href="http://ksnowlv.github.io/blog/categories/ios-ui/atom.xml" rel="self"/>
  <link href="http://ksnowlv.github.io/"/>
  <updated>2019-05-15T20:09:41+08:00</updated>
  <id>http://ksnowlv.github.io/</id>
  <author>
    <name><![CDATA[律威]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS加载拉伸的图片]]></title>
    <link href="http://ksnowlv.github.io/blog/2017/12/29/iosjia-zai-la-shen-de-tu-pian/"/>
    <updated>2017-12-29T19:15:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2017/12/29/iosjia-zai-la-shen-de-tu-pian</id>
    <content type="html"><![CDATA[<p>iOS如何加载拉伸的图片呢？</p>

<!--more-->


<p>1.通过代码指定拉伸区域加载图片。如下所示。</p>

<p>```objective-c</p>

<ul>
<li><p>(UIImage<em>)stretchImage:(NSString </em>)imageName {</p>

<p>  UIImage *image = [UIImage imageNamed:imageName];
  if ([image respondsToSelector:@selector(resizableImageWithCapInsets:)]) {
      CGSize imageSize = image.size;
      image = [image resizableImageWithCapInsets:UIEdgeInsetsMake(imageSize.height/2,
                                                                  imageSize.width/2,
                                                                  imageSize.height/2,
                                                                  imageSize.width/2)];
  }
  else{
      image = [image stretchableImageWithLeftCapWidth:1 topCapHeight:1];
  }</p>

<p>  return image;
}</p></li>
</ul>


<p>```</p>

<p>2.通过Asset Catalog指定拉伸区域加载图片。</p>

<p>通过Xcode中Asset Catalog的slice指定拉伸区域及属性。如图所示。</p>

<p><img src="/images/post/2017-12-29-iosjia-zai-la-shen-de-tu-pian/asset-catalog-slice.png" alt="image" /></p>

<p>点击右下角的<em>show slicing</em>开始编辑图片，如图所示。</p>

<p><img src="/images/post/2017-12-29-iosjia-zai-la-shen-de-tu-pian/asset-catalog-slice-setting.png" alt="image" /></p>

<p>直接在控件中引用该图片即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS自动循环播放的banner]]></title>
    <link href="http://ksnowlv.github.io/blog/2017/12/25/ioszi-dong-xun-huan-bo-fang-de-banner/"/>
    <updated>2017-12-25T11:19:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2017/12/25/ioszi-dong-xun-huan-bo-fang-de-banner</id>
    <content type="html"><![CDATA[<p>自动循环播放的banner是很常见的UI组件。如何实现呢？</p>

<!--more-->


<h4>1.实现思路</h4>

<ul>
<li>1.横向滚动的banner。

<ul>
<li>UIScrollViw+UIImageView.</li>
<li>UICollectionView+UICollectionViewCell.</li>
<li>前者需要自己做重用UIImageView，后者可以直接重用UICollectionViewCell。如果前者没有做重用，多占用内存。</li>
</ul>
</li>
<li><p>2.自动循环播放banner。</p>

<ul>
<li>可以使用计时器触发循环播放.</li>
<li>拖动或手动滑动banner时，停止自动循环播放banner。手势停止后，开启自动循环播放banner。</li>
</ul>
</li>
<li><p>3.特殊banner位的处理。</p>

<ul>
<li>处于第1个或最后1个时，为保证横向自动滑动效果流畅性，不跳动，需要特殊处理下。</li>
<li>在生成banner时，第1个前面插入最后1个banner。最后1个banner后面插入第1个banner。当滑动到最后1个banner时，重置于第2个banner位。</li>
</ul>
</li>
</ul>


<h4>2.本文采用第二种：UICollectionView+UICollectionViewCell</h4>

<p>关键代码实现</p>

<p>2.1生成banner的特殊处理</p>

<p>```objective-c</p>

<ul>
<li><p>(void)setBannerList:(NSArray<KBannerItem *> *)bannerList {</p>

<p>  if (bannerList.count > 1) {
      NSMutableArray *itemList = [NSMutableArray arrayWithArray:bannerList];
      [itemList insertObject:bannerList.lastObject atIndex:0];
      [itemList addObject:bannerList.firstObject];
      <em>bannerList = itemList;
  }else{
      </em>bannerList = bannerList;
  }</p>

<p>  if (self.bannerList.count > 1) {
      self.bannerPageControl.numberOfPages = self.bannerList.count &ndash; 2;
  }else{
      self.bannerPageControl.numberOfPages = 0;
  }</p>

<p>  self.noBannerImageView.hidden = self.bannerList.count > 0;
  self.bannerPageControl.currentPage = 0;
  [self.collectionView reloadData];
  self.collectionView.contentOffset = CGPointMake(CGRectGetWidth(self.collectionView.frame), 0);
}
```</p></li>
</ul>


<p>2.2 banner自动循环播放触发的事件</p>

<p>```objective-c</p>

<ul>
<li><p>(void)handleBannerChangeEvent:(id)sender {</p>

<p>  if (_bannerPageControl.numberOfPages &lt;= 1) {
      return;
  }</p>

<p>  NSInteger page = _bannerPageControl.currentPage + 1;
  [self.collectionView scrollToItemAtIndexPath:[NSIndexPath indexPathForRow:page + 1 inSection:0] atScrollPosition:UICollectionViewScrollPositionRight animated:YES];
}</p></li>
</ul>


<p>```</p>

<p>2.3开启自动播放或关闭自动播放bannner。</p>

<p>```objective-c
&ndash; (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView {</p>

<pre><code>self.countTimer.isOpen = NO;
</code></pre>

<p>}</p>

<ul>
<li>(void)scrollViewDidEndDragging:(UIScrollView *)scrollView
                willDecelerate:(BOOL)decelerate {
  self.countTimer.isOpen = YES;
}</li>
</ul>


<p>```</p>

<p>2.4.滑动时的特殊处理。</p>

<p>```objective-c</p>

<ul>
<li><p>(void)scrollViewDidScroll:(UIScrollView *)scrollView {</p>

<p>  if (_bannerList.count &lt;=1) {
      return;
  }</p>

<p>  CGFloat width = CGRectGetWidth(scrollView.frame);
  NSInteger currentPage = scrollView.contentOffset.x / width;</p>

<p>  if (currentPage == 0) {
      if (scrollView.contentOffset.x &lt; 0) {
          [self.collectionView scrollToItemAtIndexPath:[NSIndexPath indexPathForRow:<em>bannerList.count &ndash; 2 inSection:0] atScrollPosition:UICollectionViewScrollPositionRight animated:NO];
          self.bannerPageControl.currentPage = </em>bannerList.count &ndash; 2;
      }else{
          [self.collectionView scrollToItemAtIndexPath:[NSIndexPath indexPathForRow:1 inSection:0] atScrollPosition:UICollectionViewScrollPositionRight animated:NO];
          self.bannerPageControl.currentPage = 0;</p>

<pre><code>  }
</code></pre>

<p>  }else if (currentPage == _bannerList.count &ndash; 1) {
      self.bannerPageControl.currentPage = 0;
      [self.collectionView scrollToItemAtIndexPath:[NSIndexPath indexPathForRow:1 inSection:0] atScrollPosition:UICollectionViewScrollPositionRight animated:NO];
  }else{
      self.bannerPageControl.currentPage = currentPage &ndash; 1;
  }
}</p></li>
</ul>


<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS状态栏风格设置]]></title>
    <link href="http://ksnowlv.github.io/blog/2017/12/04/ioszhuang-tai-lan-feng-ge-she-zhi/"/>
    <updated>2017-12-04T20:47:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2017/12/04/ioszhuang-tai-lan-feng-ge-she-zhi</id>
    <content type="html"><![CDATA[<p>iOS 的状态栏风格如何更改呢？iOS9及之前使用<em>UIApplication</em> 的<em>setStatusBarStyle</em>修改状态栏风格。遗憾的9之后，成为过时API。如何解决呢？</p>

<!--more-->


<ul>
<li>通过重写<em>UIViewController</em>的<em>prefersStatusBarHidden</em>与<em>preferredStatusBarStyle</em>控制各种页面状态栏风格</li>
<li>plist配置文件中<em>UIViewControllerBasedStatusBarAppearance</em>属性设置为YES。</li>
</ul>


<p>分几种情况。</p>

<h4>1.根控制器为普通的页面控制器UIViewController</h4>

<p>```objective-c</p>

<ul>
<li><p>(BOOL)prefersStatusBarHidden {
  return YES;
}</p></li>
<li><p>(UIStatusBarStyle)preferredStatusBarStyle {
  return UIStatusBarStyleLightContent;
}</p></li>
</ul>


<p>```</p>

<h4>2.如果根控制器为导航控制器UINavigationController或UITabBarController</h4>

<p>状态栏的风格会交由导航控制器管理，你只需要在容器 controller 中修改属性即可。</p>

<p>```objective-c</p>

<ul>
<li>(UIStatusBarStyle)preferredStatusBarStyle {
  return UIStatusBarStyleLightContent;
}</li>
</ul>


<p>```</p>

<h4>3.同一页面UIViewController不同状态下的切换。</h4>

<ul>
<li>添加一成员变量。
例如：</li>
</ul>


<p>```objective-c
  @property (nonatomic, assign) UIStatusBarStyle statusBarStyle;</p>

<p>```</p>

<ul>
<li>重写preferredStatusBarStyle方法。</li>
</ul>


<p>```objective-c
  &ndash; (UIStatusBarStyle)preferredStatusBarStyle {</p>

<pre><code>return self.statusBarStyle;
</code></pre>

<p>}</p>

<p>```</p>

<ul>
<li>切换状态栏风格。</li>
</ul>


<p><code>objective-c
 self.statusBarStyle = UIStatusBarStyleLightContent;
 [self setNeedsStatusBarAppearanceUpdate];
</code></p>

<h4>4.容器套容器。</h4>

<p>通过重写<em>childViewControllerForStatusBarStyle</em>实现。指定是使用容器的状态栏风格或子页面的状态栏风格。</p>

<h2>小结</h2>

<h4>1.修改状态栏风格需要考虑好页面层级的管理。</h4>

<h4>2.能复用窗口风格的尽量不要在子页面管理器中定义。</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[客户端白屏问题解决方案]]></title>
    <link href="http://ksnowlv.github.io/blog/2017/12/04/ke-hu-duan-bai-ping-wen-ti-jie-jue-fang-an/"/>
    <updated>2017-12-04T10:22:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2017/12/04/ke-hu-duan-bai-ping-wen-ti-jie-jue-fang-an</id>
    <content type="html"><![CDATA[<h2>关于客户端白屏解决方案。</h2>

<h3>一.现象：客户端中原生或h5的页面,有时会出现白屏现象.如何解决呢？</h3>

<!--more-->


<h3>二.解决方案。</h3>

<p>  针对这种现象，着眼于提升页面加载速度和用户体验，更好地服务用户，给用户带来愉悦的体验。因此，从交互层面，技术层面两种手段来解决这种问题。</p>

<h3>1.交互层面。</h3>

<ul>
<li>默认页面:在原生\h5页面没有加载出来之前，显示1个默认页面。</li>
</ul>


<h3>2.交互与技术层面结合。</h3>

<ul>
<li>分页加载。</li>
<li>分段加载。</li>
<li>按需加载。</li>
</ul>


<h3>3.技术层面。</h3>

<h4>3.1 网络通道支持长连接。</h4>

<ul>
<li>http协议1.1开始已经支持。</li>
<li>客户端支持情况

<ul>
<li>iOS 系统网络api也支持。</li>
<li>android的第三方的网络框架</li>
</ul>
</li>
</ul>


<h4>3.2 h5缓存。（见4技术层面的h5缓存详述）</h4>

<h4>3.3 图片优化。</h4>

<ul>
<li>移动端支持的图片格式多种，选择合适图片格式。</li>
<li>根据屏幕尺寸，选择合适图片尺寸。</li>
</ul>


<h4>3.4 公共资源离线。</h4>

<h3>4.技术层面的h5缓存</h3>

<h4>4.1 缓存内容：图片，jS等较大资源文件，客户端支持。</h4>

<ul>
<li>停用原因

<ul>
<li>个别情况下，页面有时数据不能及时更新。</li>
<li> 极低概率下，图片会串图，恩民总，张阳总都遇见。</li>
</ul>
</li>
</ul>


<h4>4.2 当前客户端支持情况</h4>

<h5>iOS端&mdash;-支持，已停用。</h5>

<ul>
<li>目前UIWebView支持NSURLProtocol拦截. WKWebview不支持NSURLProtocol拦截（私有api支持，上不了架。）如果要缓存，需使用UIWebView；</li>
<li>目前项目 iOS8以上使用WKWebview加载h5，8以下使用UIWebview。WKWebview的性能要比老版UIWebview好很多。如果降级到UIWebview，我们需要确保UIWebview性能总体要大优于WKWebview。</li>
</ul>


<h5>Android端&mdash;-支持。</h5>

<h5>h5前端需要做一些优化工作。</h5>

<ul>
<li>减少HTTP请求。</li>
<li>预加载。</li>
<li>按需加载。</li>
<li>CSS优化</li>
<li>&hellip;.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IB_DESIGNABLE与IBInspectable的使用]]></title>
    <link href="http://ksnowlv.github.io/blog/2017/11/27/ib-designableyu-ibinspectablede-shi-yong/"/>
    <updated>2017-11-27T15:45:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2017/11/27/ib-designableyu-ibinspectablede-shi-yong</id>
    <content type="html"><![CDATA[<p>iOS开发中经常会用到一些自定义UI控件，控件的效果和属性可以通过<strong>IB_DESIGNABLE</strong>和<strong>IBInspectable</strong>预览和修改。</p>

<!--more-->


<h4>IB_DESIGNABLE</h4>

<p>自定义 UIView 可以在 XIB 中预览,，查看自定义控件的效果。</p>

<h4>IBInspectable</h4>

<p>自定义 UIView 的属性出现在 XIB 中 Attributes inspector，可以通过修改属性，在XIB中查看效果 。</p>

<p>示例如下：</p>

<p>```objective-c</p>

<p>IB_DESIGNABLE//在 XIB 中预览控件
@interface YKNavigationBar : UIView
@property (nonatomic, strong) IBInspectable NSString <em>barTitle;
@property (nonatomic, assign) IBInspectable double titleFontSize;
@property (nonatomic, strong) IBInspectable UIColor </em>titleShadowColor;
@property (nonatomic, strong) IBInspectable UIColor *titleColor;
```</p>

<!--![image](/images/post/2017-11-27-ib-designableyu-ibinspectablede-shi-yong/property-setting.png) -->


<p><img src="/images/post/2017-11-27-ib-designableyu-ibinspectablede-shi-yong/xib-overview.png" alt="image" /></p>
]]></content>
  </entry>
  
</feed>
