<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: github-博客 | ksnowlv]]></title>
  <link href="http://ksnowlv.github.io/blog/categories/github-bo-ke/atom.xml" rel="self"/>
  <link href="http://ksnowlv.github.io/"/>
  <updated>2019-05-15T17:09:38+08:00</updated>
  <id>http://ksnowlv.github.io/</id>
  <author>
    <name><![CDATA[律威]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[基于octopress的github博客使用git管理源代码和网页代码]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/08/07/ji-yu-octopress-de-github-bo-ke-shi-yong-gitguan-li-yuan-dai-ma-he-wang-ye-dai-ma/"/>
    <updated>2014-08-07T09:12:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/08/07/ji-yu-octopress-de-github-bo-ke-shi-yong-gitguan-li-yuan-dai-ma-he-wang-ye-dai-ma</id>
    <content type="html"><![CDATA[<h4>基于octopress的github/gitcafe博客，都会涉及到源代码管理。对于git,github/gitcafe的初学者而言，可能容易走弯路。</h4>

<!--more-->


<p>先看下博客目录:
 <img src="/images/post/2014-08-07-ji-yu-octopress-de-github-bo-ke-shi-yong-gitguan-li-yuan-dai-ma-he-wang-ye-dai-ma/github-blog-dir.png" alt="image" /></p>

<pre><code>lvweigithubblog和_deploy两个目录下，是不同的git版本库，对应不同分支。一定不能搞乱。
在lvweigithubblog目录下,操作目录始终是在lvweigithubblog目录:
使用git命令操作远程source分支;
使用rake generate/deploy/new_post/...操作的是远程master分支。
</code></pre>

<h4>1.静态网页代码版本管理</h4>

<h4>网页生成，rake generate 是生成本地博客pulic目录下静态网页, rake deploy 是把public目录下的静态网页文件拷贝到<em>deploy目录下，并自动调用git命令把</em>deploy目录下网页文件上传到远程分支master.</h4>

<pre><code>_deploy下的git版本库，管理的是是网页文件，操作的是master分支
</code></pre>

<p>详情参考下图:</p>

<p> <img src="/images/post/2014-08-07-ji-yu-octopress-de-github-bo-ke-shi-yong-gitguan-li-yuan-dai-ma-he-wang-ye-dai-ma/git-for-master-github-pages.png" alt="image" /></p>

<h4>2.网页源代码版本管理</h4>

<h4>lvweigithubblog下的源文件管理，可以通过git相关命令，也可以使用sourcetree等工具进行管理。可以通过<code>git status</code>查看当前所在分支</h4>

<pre><code>lvweigithubblog根目录下的git版本库实际上只管理除了public,_deploy两个主要目录以外所有的文件，octopress的配置自动忽略这两个目录。只处理这两个目录以外的版本变化情况。

该git版本库处理的是远程source分支，你可以随便命名该分支，比如a都行，只要不和master分支重名即可。所以，这个git版本库必须切换到source分支，一定不能是master分支。
</code></pre>

<p>详情参考下图:</p>

<p> <img src="/images/post/2014-08-07-ji-yu-octopress-de-github-bo-ke-shi-yong-gitguan-li-yuan-dai-ma-he-wang-ye-dai-ma/git-for-source-code.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress博客继续阅读]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/07/26/octopressbo-ke-ji-xu-yue-du/"/>
    <updated>2014-07-26T20:56:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/07/26/octopressbo-ke-ji-xu-yue-du</id>
    <content type="html"><![CDATA[<p>如果正文太长，不希望在首页直接显示完整内容，如何显示部分内容呢?</p>

<!--more-->


<h4>1.在_config.yml文件中，添加显示部分内容的支持。</h4>

<pre><code>excerpt_link: "阅读全文&amp;rarr;"  
excerpt_separator: "&lt;!--more--&gt;"
</code></pre>

<h4>2.在博客适当的位置加上一句</h4>

<pre><code> &lt;!--more--&gt;
</code></pre>

<h4>后面的内容就会被按钮Read on→所替代，点击继续阅读。</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress代码高亮]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/07/26/octopressdai-ma-gao-liang/"/>
    <updated>2014-07-26T19:33:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/07/26/octopressdai-ma-gao-liang</id>
    <content type="html"><![CDATA[<p>如何使用markdown文本中的代码高亮呢？</p>

<!--more-->


<h3>1.反引号代码块</h3>

<p>   可以指定代码标题，语言，链接等等。语法格式如下：</p>

<pre><code>``` [language] [title] [url] [link text]
 代码块
```
</code></pre>

<p>以objective-c为例：</p>

<pre><code>··· objective-c 
    oc代码
···
</code></pre>

<p>效果如下：</p>

<p>``` objective-c</p>

<p>self.backgroundColor = [UIColor redColor];</p>

<p>```</p>

<h3>2.Code Block代码块</h3>

<p>   可以指定代码标题，语言，链接等等。语法格式如下：</p>

<pre><code> { % codeblock [title] [lang:language] [url] [link text] % }
  代码块
 { % endcodeblock % }
</code></pre>

<p> 以objective-c为例：</p>

<pre><code>{ % codeblock lang:objective-c  %} 
    oc代码
{ % endcodeblock  %} 
</code></pre>

<h4>注意:</h4>

<h5>1.{或}与%不要有空格，不然，不起作用。</h5>

<h5>2.如果上面语法中没有空格，会导致rake generate时出错.</h5>

<p>效果如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>3.更多代码高亮方式见：<a href="http://octopress.org/docs/blogging/code/">http://octopress.org/docs/blogging/code/</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress搭建github博客相关概念]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/07/26/octopressda-jian-githubbo-ke-xiang-guan-gai-nian/"/>
    <updated>2014-07-26T15:21:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/07/26/octopressda-jian-githubbo-ke-xiang-guan-gai-nian</id>
    <content type="html"><![CDATA[<p>目前项目开发版本管理工具使用sourcetree，之前对git不太了解，所以，使用octopress搭建个github博客体验一把。</p>

<!--more-->


<p>那都会涉及到哪些内容呢？先了解下以下概念：</p>

<h4><a href="https://www.ruby-lang.org/zh_cn/">ruby</a>:是一种面向对象、命令式、函数式、动态的通用编程语言,参见维基百科的解释：<a href="http://zh.wikipedia.org/zh/Ruby">http://zh.wikipedia.org/zh/Ruby</a></h4>

<h4><a href="https://rvm.io/">rvm</a>:全称 ruby version manager：用于管理 Ruby 的版本的工具。</h4>

<pre><code>便于安装Ruby环境，管理多个Ruby环境，管理开发的每个Ruby应用使用机器上哪个Ruby环境。
Ruby环境不仅仅是Ruby本身，还包括依赖的第三方Ruby插件。都由RVM管理
</code></pre>

<h4><a href="http://rubygems.org/">RubyGem</a>：是一个用于对 Ruby组件进行打包的 Ruby 打包系统。 它提供一个分发 Ruby 程序和库的标准格式，还提供一个管理程序包安装的工具。</h4>

<pre><code>RubyGems的功能类似于Linux下的apt-get。使用它可以方便第从远程服务器下载并安装Rails。
打开命令行窗口(cmd)，输入执行命令 
gem install rails --remote 
或　gem install rails--include-dependencies。
</code></pre>

<h4><a href="http://bundler.io/">Bundler</a>：通过管理一个Ruby项目中的各个 Gem来管理整个项目的工具</h4>

<pre><code>相当于多个RubyGems批处理运行。
在配置文件gemfilel里说明你的应用依赖哪些第三方包。
它自动帮你下载安装多个包，并且会下载这些包依赖的包
</code></pre>

<h4><a href="http://www.ibm.com/developerworks/cn/xml/x-cn-yamlintro/">YAML</a>:YAML 是一种比 XML 更敏捷的半结构化数据格式。</h4>

<pre><code>YAML可以基于流来处理；
YAML表达能力强，扩展性好。
</code></pre>

<p>   Octopress 使用 yaml 做配置文件.</p>

<h4><a href="http://octopress.org/">Octopress</a>:是一个静态站点生成工具，不需要使用动态的数据库和相关处理.可以用来搭建博客。</h4>

<h4><a href="http://git-scm.com/">Git</a>：Git是一个分布式版本控制／软件配置管理软件。参见维基百科的解释：<a href="http://zh.wikipedia.org/zh/Git">http://zh.wikipedia.org/zh/Git</a></h4>

<h4><a href="http://">Markdown</a>：是一种轻量级标记语言。“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。见维基百科解释：<a href="http://zh.wikipedia.org/wiki/Markdown">http://zh.wikipedia.org/wiki/Markdown</a></h4>

<p>在mac上可以选择使用<a href="http://mouapp.com/">Mou</a></p>

<h4><a href="https://github.com/">Github</a>:是一个共享虚拟主机服务，用于存放使用Git版本控制的软件代码和内容项目。见维基百科解释：<a href="http://zh.wikipedia.org/zh/GitHub">http://zh.wikipedia.org/zh/GitHub</a></h4>

<h4>github pages:Github推出的静态网页，支持 Jekyll，也支持封装Jekyll的Octopress。</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[同步github和gitcafe]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/07/25/tong-bu-githubhe-gitcafe/"/>
    <updated>2014-07-25T16:22:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/07/25/tong-bu-githubhe-gitcafe</id>
    <content type="html"><![CDATA[<p>如何同步github博客内容到gitcafe呢？</p>

<!--more-->


<h4>1.在博客目录(例如：_config.yml所在目录)，找到Rakefile文件并打开，在</h4>

<pre><code>.....
message = "Site updated at #{Time.now.utc}"
system "git commit -m \"#{message}\""
puts "\n## Pushing generated #{deploy_dir} website"
system "git push origin #{deploy_branch} --force"
puts "\n## Github Pages deploy complete"
</code></pre>

<p>末尾追回两行，如下所示：</p>

<pre><code>system "git remote add &lt;gitcafe项目url&gt; &gt;&gt; /dev/null 2&gt;&amp;1"
system  "git push -u gitcafe master:gitcafe-pages"
</code></pre>

<p>这样，在向github推送博客时，会同时向gitcafe推送最新博客。</p>

<pre><code>rake generate
rake deploy
</code></pre>

<p>成功推送。</p>

<h4>2.在博客目录(例如：_config.yml所在目录)进入到.git目录，打开config文件，添加向gitcafe推送源代码文件的支持，完整的文件内容如下：</h4>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
    ignorecase = true
    precomposeunicode = true
[remote "origin"]
    url = https://github.com/xxx/xxx.github.io.git
    url = git@gitcafe.com:xxx/xxx.git
    fetch = +refs/heads/*:refs/remotes/origin/*
[remote "gitcafe"]
    url = git@gitcafe.com:xxx/xxx.git
    fetch = +refs/heads/*:refs/remotes/origin/*

[remote "github"]
    url = https://github.com/xxx/xxx.github.io.git
    fetch = +refs/heads/*:refs/remotes/origin/*

[branch "source"]
    remote = origin
    merge = refs/heads/source
</code></pre>

<p>在向github推送博客源代码的时，地同时向gitcafe推送最新博客源代码。</p>

<p>创建一新博客</p>

<pre><code>rake new_post[同步github和gitcafe]
</code></pre>

<p>编辑完成后</p>

<pre><code>git add --all
git commit -a -m "new blog"
git push origin source
</code></pre>

<p>成功推送。</p>
]]></content>
  </entry>
  
</feed>
