<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swift | ksnowlv]]></title>
  <link href="http://ksnowlv.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://ksnowlv.github.io/"/>
  <updated>2020-05-21T17:06:06+08:00</updated>
  <id>http://ksnowlv.github.io/</id>
  <author>
    <name><![CDATA[律威]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[objectivec调用swift]]></title>
    <link href="http://ksnowlv.github.io/blog/2017/11/24/objectivecdiao-yong-swift/"/>
    <updated>2017-11-24T18:43:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2017/11/24/objectivecdiao-yong-swift</id>
    <content type="html"><![CDATA[<p>objective-c调用swift在混编开发时经常会使用。</p>

<!--more-->


<h3>一.项目设置</h3>

<h5>TARGETS &ndash;>Build Settings &ndash;> Packaging 选项中，</h5>

<ul>
<li>Defines Module设置为YES</li>
<li>Product Name一般默认工程名。那后面oc调用swift时，引入的头文件为<strong>&ldquo;工程名+swift.h&rdquo;</strong>。</li>
</ul>


<p>如图所示
<img src="/images/post/2017-11-24-objectivecdiao-yong-swift/setting.png" alt="image" /></p>

<h3>二.swift工程文件。</h3>

<h4>1.桥接文件</h4>

<p>创建swift类中，Xcode 会提示创建一个桥接文件 点确定创建桥接文件，Xcode会自动创建一个桥接文件，名字格式为：工程名-Bridging-Header.h，所有swift类对应的头文件都会放到桥接文件中。</p>

<h4>2.引用头文件</h4>

<p>引入的头文件为<strong>工程名+swift.h</strong>
<img src="/images/post/2017-11-24-objectivecdiao-yong-swift/demo_overview.png" alt="image" /></p>

<h4>3.swift类定义。</h4>

<p>swift类需要继承NSObject,</p>

<p><img src="/images/post/2017-11-24-objectivecdiao-yong-swift/class_overview.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift扩展]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/09/13/swift-kuo-zhan/"/>
    <updated>2014-09-13T10:27:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/09/13/swift-kuo-zhan</id>
    <content type="html"><![CDATA[<h3>一.Swift中扩展</h3>

<p>语法格式，使用<code>extension</code>关键字修饰</p>

<!--more-->


<h4>1.普通扩展</h4>

<p>  <code>extension</code> 扩展名{
  }</p>

<h4>2.对协议扩展</h4>

<p>  <code>extension</code> 扩展名: 协议1，协议2 {
}</p>

<h4>3.对类扩展</h4>

<p>  <code>extension</code> 扩展名: 类 {
}</p>

<h4>4.为扩展添加变量，使用运行时设置关联对象的方式。</h4>

<ul>
<li>1.声明运行时关联对象的key</li>
</ul>


<p>``` objective-c</p>

<p>// 设置关联对象的key的定义
var KUIViewExtraPropertySelector:Selector =</p>

<p>```</p>

<ul>
<li>2.获取关联属性</li>
</ul>


<p>``` objective-c</p>

<p>// 获取关联属性的对象
func getExtraPropertyFromObject(object: AnyObject) &ndash;> AnyObject? { // Returns optional
return objc_getAssociatedObject(object, &amp;KUIViewExtraPropertySelector)
}</p>

<p>```</p>

<ul>
<li>3.设置关联属性的对象,retain该属性的对象</li>
</ul>


<p>``` objective-c</p>

<p>//设置关联属性的对象,retain该属性的对象
func setExtraProperty(property: AnyObject, object: AnyObject) {
objc_setAssociatedObject(object, &amp;KUIViewExtraPropertySelector, property, UInt(OBJC_ASSOCIATION_RETAIN_NONATOMIC))
}</p>

<p>```</p>

<h3>二.示例</h3>

<h4>1.代码</h4>

<p>``` objective-c</p>

<p>//设置关联对象的key的定义
var KUIViewExtraPropertySelector:Selector = &ldquo;UIViewExtraPropertySelector&rdquo;</p>

<p>extension UIView {</p>

<pre><code>func showBackgroundColor(color:UIColor){
    self.backgroundColor = color
    println("backgroundColor:\(color.description)")
}


// 获取关联属性的对象
func getExtraPropertyFromObject(object: AnyObject) -&gt; AnyObject? { // Returns optional
    return objc_getAssociatedObject(object, &amp;KUIViewExtraPropertySelector)
}

//设置关联属性的对象,retain该属性的对象
func setExtraProperty(property: AnyObject, object: AnyObject) {
    objc_setAssociatedObject(object, &amp;KUIViewExtraPropertySelector, property, UInt(OBJC_ASSOCIATION_RETAIN_NONATOMIC))
}
</code></pre>

<p>}</p>

<p>```</p>

<h4>2.调用</h4>

<p>``` objective-c
self.view.showBackgroundColor(UIColor.redColor())</p>

<p>var button:UIButton = UIButton.buttonWithType(UIButtonType.DetailDisclosure) as UIButton</p>

<p>var  buttonRect:CGRect = button.bounds
buttonRect.origin.x = (CGRectGetWidth(self.view.frame) &ndash; CGRectGetWidth(buttonRect))/2
buttonRect.origin.y = 50</p>

<p>button.frame = buttonRect
self.view.addSubview(button)</p>

<p>button.setExtraProperty(&ldquo;string&rdquo;, object: &ldquo;ksnowlv&rdquo;)
var viewObject: AnyObject = button.getExtraPropertyFromObject(&ldquo;ksnowlv&rdquo;)!</p>

<p>if viewObject is  String{</p>

<pre><code>println("object is String")
</code></pre>

<p>}
else{</p>

<pre><code>println("object is not String")
</code></pre>

<p>}</p>

<p>var list:Array<String> = [&ldquo;kair&rdquo;,&ldquo;ksnowlv&rdquo;,&ldquo;snow&rdquo;,&ldquo;air&rdquo;,&ldquo;rain&rdquo;];</p>

<p>button.setExtraProperty(list, object: &ldquo;ksnowlv&rdquo;)
var listObject:AnyObject = button.getExtraPropertyFromObject(&ldquo;ksnowlv&rdquo;)!</p>

<p>if listObject is Array<String>{</p>

<pre><code> println("object is [Array&lt;String&gt;] \(listObject.description)")
</code></pre>

<p>}
else{</p>

<pre><code>println("object is not [Array&lt;String&gt;]")
</code></pre>

<p>}</p>

<p>```</p>

<h4>3.日志</h4>

<p>``` objective-c
backgroundColor:UIDeviceRGBColorSpace 1 0 0 1
object is String
object is [Array<String>] (</p>

<pre><code>kair,
ksnowlv,
snow,
air,
rain
</code></pre>

<p>)</p>

<p>```</p>

<h3>三.小结</h3>

<blockquote><p>大体上使用方法与原<code>objective-c</code>类似</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[swift自动引用计数]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/09/12/swift-zi-dong-yin-yong-ji-shu/"/>
    <updated>2014-09-12T14:43:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/09/12/swift-zi-dong-yin-yong-ji-shu</id>
    <content type="html"><![CDATA[<h3>一.swift中自动引用计数</h3>

<!--more-->


<h4>1.概况</h4>

<p><code>Swift</code>使用自动引用计数(<code>ARC</code>)来跟踪并管理应用使用的内存。当实例不再被使用时，ARC会自动释放这些类的实例所占用的内存。</p>

<blockquote><p>引用计数只应用在类的实例对象中。</p>

<p>结构体(<code>Structure</code>)和枚举类型是值传递类型的，并非引用类型，不是以引用的方式来存储和传递的</p></blockquote>

<h4>2.<code>swift</code>中容易导致内存泄漏的两种场景</h4>

<p>1.类实例间的强引用环</p>

<p> 解决办法</p>

<h4>a.弱引用，<code>weak</code>关键字修饰</h4>

<p>   弱引用不会增加实例变量的引用计数，因此不会阻止ARC销毁被引用的实例。</p>

<p>   这种特性使得引用不会变成强引用环。声明属性或者变量的时候，关键字weak表明引用为弱引用</p>

<blockquote><p>弱引用只能声明为变量类型，因为运行时它的值可能改变。弱引用绝对不能声明为常量</p></blockquote>

<h4>b.无主引用，<code>unowned</code>关键字修饰</h4>

<p>  在属性、变量前添加unowned关键字，可以声明一个无主引用</p>

<p>  无主引用也不强持有实例。无主引用默认始终有值。</p>

<p>  无主引用只能定义为非可选类型（non-optional type），因为是非可选类型，因此当使用无主引用的时候，不需要展开，可以直接访问。不过非可选类型变量不能赋值为nil，因此当实例被销毁的时候，ARC无法将引用赋值为nil</p>

<blockquote><p>当实例被销毁后，试图访问该实例的无主引用会触发运行时错误。使用无主引用时请确保引用始终指向一个未销毁的实例。 上面的非法操作会百分百让应用崩溃，不会发生无法预期的行为。</p></blockquote>

<h4>c.解除对象的强引用</h4>

<ul>
<li>2.闭包产生的强引用环</li>
</ul>


<p><code>Swift</code>解除闭包和实例对象之间的强引用环的方法:闭包占用列表(closuer capture list)</p>

<h3>二.示例</h3>

<h4>1.代码</h4>

<p>```objective-c</p>

<p>class QClassA {</p>

<pre><code>var _classB:QClassB?
var _classBB:QClassB?
var _classC:QClassC?

init(){
    println("QClassA init")
}

deinit{
    println("QClassA deinit")
}
</code></pre>

<p>}</p>

<p>class QClassB {</p>

<pre><code>var _classA:QClassA?
//使用weak
weak var _classAA:QClassA?


init(){
    println("QClassB init")
}

init(classA: QClassA){
    println("QClassB init")
}

deinit{
    println("QClassB deinit")
}
</code></pre>

<p>}</p>

<p>class QClassC {</p>

<pre><code>//使用无主引用
unowned let  _classA:QClassA

init(classA: QClassA){
    println("QClassC init")
    self._classA = classA
}

deinit{
    println("QClassC deinit")
}
</code></pre>

<p>}</p>

<p>///实例和闭包
class QClassD {</p>

<pre><code>var _value:String?


lazy var _funcBlockA:() -&gt; Void = {
    //去掉下面[unowned self]，当调用_funcBlockA时，
    //会导致block和QClassD实例对象相互强引用
    [unowned self]  () -&gt; Void in

    if self._value != nil {

        println(" ***_funcBlockA value =  \(self._value) ")
    }
    else{
       println(" ***_funcBlockA value =  \(self._value) ")
    }
}

init(){
    println("QClassD init")
}

deinit{
    println("QClassD deinit")
}
</code></pre>

<p>}
```</p>

<h4>2.调用</h4>

<p>```objective-c</p>

<p>//解除对象的强引用
var a:QClassA = QClassA()
var b:QClassB = QClassB()
a.<em>classB = b
b.</em>classA = a</p>

<p>a.<em>classB = nil//或b.</em>classA = nil</p>

<p>//weak
var aa:QClassA = QClassA()
var bb:QClassB = QClassB()
aa.<em>classBB = bb
bb.</em>classAA = aa</p>

<p>//无主引用
var aaa:QClassA = QClassA()
var ccc:QClassC = QClassC(classA: aaa)
aa._classC = ccc</p>

<p>//解除闭包和实例之间的强引用
var d:QClassD = QClassD()
d._funcBlockA()</p>

<p>```</p>

<h4>3.日志</h4>

<p>```objective-c</p>

<p>QClassA init
QClassB init
QClassA init
QClassB init
QClassA init
QClassC init
QClassD init
 ***_funcBlockA value =  nil
QClassD deinit
QClassA deinit
QClassA deinit
QClassB deinit
QClassC deinit
QClassB deinit
QClassA deinit</p>

<p>```</p>

<h3>三.小结</h3>

<p><code>swift</code>与<code>objective-c</code></p>

<ul>
<li>1.都是通过引用计数来管理内存的。</li>
<li>2.都存在循环引用导致的内存泄漏，需要注意发生这种内存泄漏的场景。</li>
<li>3.闭包都存在强引用环，需要打破引用环。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[swift闭包]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/09/11/swift-bi-bao/"/>
    <updated>2014-09-11T19:46:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/09/11/swift-bi-bao</id>
    <content type="html"><![CDATA[<h3>一.swift中闭包</h3>

<!--more-->


<p>swift中的闭包格式</p>

<p>```objective-c</p>

<p>{ (parameters) &ndash;> return type in</p>

<pre><code>statements
</code></pre>

<p>}</p>

<p>```</p>

<h4>1. swift block, without any arguments and without return value</h4>

<p>```objective-c
 typealias funcBlockA = () &ndash;> ()
 typealias funcBlockAA = () &ndash;> Void</p>

<p>var _funcBlockA:funcBlockA = {</p>

<pre><code>() -&gt; Void in

println("***block without any arguments and without return value")
</code></pre>

<p>} <br/>
```</p>

<h4>2.swift block with arguments and  return value</h4>

<p>```objective-c
var _funcBlockB:funcBlockB = {</p>

<pre><code>(stringA:String, stringB:String) -&gt;String in

println("***swift block with arguments and without any return value")

return (stringA + stringB)
</code></pre>

<p>}</p>

<p>```</p>

<h4>3.swift block with arguments and  return value as function</h4>

<p>```objective-c</p>

<p>var _funcBlockC:funcBlockC = {</p>

<pre><code>(stringA:String, stringB:String) -&gt;(String)-&gt;() in

blockC("***wift block with arguments and  return value:\(stringA) and \(stringB)")
return blockC
</code></pre>

<p>}</p>

<p>```</p>

<h4>4.swift block as function parameter and  return value as function with parameter and return value</h4>

<p>```objective-c</p>

<p>var _funcBlockD:funcBlockD = {</p>

<pre><code>(stringA:String, stringB:String) -&gt;(String)-&gt;(String) in

blockD("***swift block as function parameter:\(stringA) and \(stringB)")
return blockD
</code></pre>

<p>}</p>

<p>```</p>

<h3>二.示例</h3>

<h4>1.示例代码</h4>

<p>```objective-c</p>

<p>func blockC(name:String)  {</p>

<pre><code>println(" blockC= (\(name))")
</code></pre>

<p>}</p>

<p>func blockD(name:String)&ndash;>String  {</p>

<pre><code>var result:String = "blockD = " + name

println(result)

return result;
</code></pre>

<p>}</p>

<p>class QBlock{</p>

<pre><code>//swift block, without any arguments and without return value
typealias funcBlockA = () -&gt; ()
typealias funcBlockAA = () -&gt; Void
//swift block with arguments and return value
typealias funcBlockB = (String, String) -&gt; String
//swift block with arguments and  return value as function
typealias funcBlockC = (String, String) -&gt; (String)-&gt;()
//swift block as function parameter and  return value as function with parameter and return value
typealias funcBlockD = (String, String) -&gt; (String)-&gt;String

var _funcBlockA:funcBlockA = {

    () -&gt; Void in

    println("***block without any arguments and without return value")
}

var _funcBlockB:funcBlockB = {
    (stringA:String, stringB:String) -&gt;String in

    println("***swift block with arguments and without any return value")

    return (stringA + stringB)
}

var _funcBlockC:funcBlockC = {

    (stringA:String, stringB:String) -&gt;(String)-&gt;() in

    blockC("***wift block with arguments and  return value:\(stringA) and \(stringB)")
    return blockC
}

var _funcBlockD:funcBlockD = {
    (stringA:String, stringB:String) -&gt;(String)-&gt;(String) in

    blockD("***swift block as function parameter:\(stringA) and \(stringB)")
    return blockD
}


init(){
    self.testMemberBlock()
}
</code></pre>

<p>   private func testMemberBlock(){</p>

<pre><code>    ///1. swift block, without any arguments and without return value
    self._funcBlockA()
    //swift block with arguments and without any return value
    var res =  self._funcBlockB("ksnowlv", "kair")
    println("_funcBlockB = result = \(res)")


    // //swift block with arguments and  return value as function
    var blockC  = self._funcBlockC("ksnowlv", "kair")
    blockC("go shopping")

    //swift block as function parameter and  return value as function with parameter and return value
    var blockD  = self._funcBlockD("ksnowlv", "kair")
    var result =  blockD("go shopping")
    println("result blockD = \(result)")
}
</code></pre>

<p>}</p>

<p>```</p>

<h4>2.调用</h4>

<p>```objective-c</p>

<p>var block = QBlock()</p>

<p>```objective-c</p>

<h4>3.日志</h4>

<p>```objective-c</p>

<p><strong><em>block without any arguments and without return value
</em></strong>swift block with arguments and without any return value
_funcBlockB = result = ksnowlvkair
 blockC= (<strong><em>wift block with arguments and  return value:ksnowlv and kair)
 blockC= (go shopping)
blockD = </em></strong>swift block as function parameter:ksnowlv and kair
blockD = go shopping
result blockD = blockD = go shopping</p>

<p>```</p>

<h3>三.小结</h3>

<ul>
<li>1.与objective-c中的闭包在使用方法上类似，大体上相同，语法格式上的差异。</li>
<li>2.在内存管理方面:objective-c中需要注意循环引用导致的内存泄漏。而swift依然需要注意该问题。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[swift委托]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/09/11/swift-wei-tuo/"/>
    <updated>2014-09-11T13:59:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/09/11/swift-wei-tuo</id>
    <content type="html"><![CDATA[<p>swift中的委托和objective-c中的类似。</p>

<!--more-->


<h3>一.协议支持required/optional</h3>

<p>如果协议是optional协议</p>

<h4>1.协议接口存在与否的判断,</h4>

<p> 调用方法、属性、下标索引等前面需要加上一个?</p>

<blockquote><p>1.如果是nil值，也就是Optional.None，会跳过后面的操作不执行;</p>

<p>2.如果有值，就是Optional.Some，就会拆包(unwrap)，然后对拆包后的值执行后面的操作，来保证执行这个操作的安全性.</p></blockquote>

<h4>2.声明与必选协议的不同之处。可选协议需要@objc</h4>

<h3>二.示例</h3>

<p>1.完整示例代码</p>

<p>```objective-c
/<em>*
游戏状态
</em>/
enum QQGameState :Int{</p>

<pre><code>case QQGameStateNone = 0
case QQGameStateStart = 1
case QQGameStatePlaying = 2
case QQGameStatePause = 3
case QQGameStateGameOver = 4
</code></pre>

<p>}</p>

<p>/<em>*
游戏Delegate
</em>/
@objc protocol QQGameDelegate{</p>

<pre><code>func notifyPlayerState()
optional func notifyGameState(gameState: Int)
optional func notifyGameNotification(gameNotification: String)
</code></pre>

<p>}</p>

<p>/<em>*
游戏事件类
</em>/
class QQGameStateEvent:QQGameDelegate{</p>

<pre><code>func notifyPlayerState() {
    println("notifyPlayerState!!!")
}

func notifyGameNotification(gameNotification: String) {
    println("game notification : \(gameNotification)")
}
</code></pre>

<p>}</p>

<p>/<em>*
游戏类
</em>/
class QQGame{</p>

<pre><code>private var _gameState:QQGameState = QQGameState.QQGameStateNone

private var _gameDelegate:QQGameDelegate

private var gameDelegate:QQGameDelegate{
    get{
        return self._gameDelegate
    }
    set{
        self._gameDelegate = newValue
    }
}

init(){

    self._gameDelegate = QQGameStateEvent();
    self.gameRunning();
}

func gameRunning(){

    //game start
    _gameDelegate.notifyGameState?(QQGameState.QQGameStateStart.toRaw());
    //game playing
    _gameDelegate.notifyGameState?(QQGameState.QQGameStatePlaying.toRaw());

    //game pause
    _gameDelegate.notifyGameState?(QQGameState.QQGameStatePause.toRaw());
    _gameDelegate.notifyGameNotification?("游戏停服更新!!!");
    //Game Over
    _gameDelegate.notifyGameState?(QQGameState.QQGameStateGameOver.toRaw());
    _gameDelegate.notifyGameNotification?("系统检测到你使用外挂，封号七天!!!");

    _gameDelegate.notifyPlayerState();

}
</code></pre>

<p>}</p>

<p>```</p>

<h4>2.调用</h4>

<p>```objective-c</p>

<p>var game =  QQGame();
```</p>

<h4>3.日志</h4>

<p>```objective-c</p>

<p>game notification : 游戏停服更新!!!
game notification : 系统检测到你使用外挂，封号七天!!!
notifyPlayerState</p>

<p>```</p>

<h3>三.小结</h3>

<h4>1.?的使用场景:</h4>

<ul>
<li>1.声明Optional值变量</li>
<li>2.在对Optional值操作中，用来判断是否能响应后面的操作</li>
<li>3.用于安全调用protocol的optional方法</li>
<li>4.使用 as? 向下转型(Downcast)</li>
</ul>


<h4>2.!使用场景</h4>

<p>1.强制对Optional值进行拆包(unwrap)
2.声明Implicitly Unwrapped Optionals值，一般用于类中的属性</p>

<p>```objective-c</p>

<p>@IBOutlet weak var tableView:UITableView!
@IBOutlet weak  var nameLabel: ImplicitlyUnwrappedOptional<UILabel></p>

<p>```</p>

<h4>3.和objective-c协议用法类似，仅仅是细节上的差异。</h4>
]]></content>
  </entry>
  
</feed>
