<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android-jni | ksnowlv]]></title>
  <link href="http://ksnowlv.github.io/blog/categories/android-jni/atom.xml" rel="self"/>
  <link href="http://ksnowlv.github.io/"/>
  <updated>2020-05-22T13:58:52+08:00</updated>
  <id>http://ksnowlv.github.io/</id>
  <author>
    <name><![CDATA[律威]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kotlin通过jni间接调用c++]]></title>
    <link href="http://ksnowlv.github.io/blog/2019/04/25/kotlintong-guo-jnijian-jie-diao-yong-c-plus-plus/"/>
    <updated>2019-04-25T19:44:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2019/04/25/kotlintong-guo-jnijian-jie-diao-yong-c-plus-plus</id>
    <content type="html"><![CDATA[<p>本篇重点内容，Kotlin通过JNI直接调用C，C调用C++相关的类。实际上只是JAVA换成Kotlin的写法而已。</p>

<h3>一.添加Kotlin类<code>KotlinPerson</code></h3>

<p>```kotlin</p>

<p>class KotlinPerson {</p>

<pre><code>var mPerson: Long = 0

init {
    mPerson = createPerson()
}

fun setPersonName(name: String) {
    setName(mPerson, name)
}

fun personName(): String {
    return name(mPerson)
}


fun setPersonAge(age: Int) {
    setAge(mPerson,age)
}

fun personAge() : Int {
    return age(mPerson)
}

companion object {
    init {
        System.loadLibrary("JNIPerson")
    }
}

external fun createPerson(): Long
external fun destroyPerson(person: Long)
external fun setName(person: Long, name: String)
external fun name(person: Long): String
external fun setAge(person: Long, age: Int)
external fun age(person: Long): Int
</code></pre>

<p>}</p>

<p>```</p>

<h3>二.添加JNI接口及实现</h3>

<p><code>JNIPerson.c</code>内容如下：</p>

<p>```objective-c</p>

<pre><code>#include "JNIPerson.h"
#include "PersonExtension.hpp"
#include "JNILog.h"
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;


  /*
   * Class:     com_ksnowlv_hellojniforjava_JavaCallJNI
   * Method:    createPerson
   * Signature: ()Ljava/lang/Object;
   */
JNIEXPORT jlong JNICALL Java_com_ksnowlv_kotlinjni_KotlinPerson_createPerson
    (JNIEnv *env, jobject cls) {


      void *p = createPerson();

      return (jlong)p;
    }

  /*
   * Class:     com_ksnowlv_hellojniforjava_JavaCallJNI
   * Method:    destroyPerson
   * Signature: (Ljava/lang/Object;)V
   */
  JNIEXPORT void JNICALL Java_com_ksnowlv_kotlinjni_KotlinPerson_destroyPerson
    (JNIEnv *env, jobject cls, jlong o) {

        destroyPerson((void*)o);
    }

  /*
   * Class:     com_ksnowlv_hellojniforjava_JavaCallJNI
   * Method:    setPersonAge
   * Signature: (Ljava/lang/Object;I)V
   */
  JNIEXPORT void JNICALL Java_com_ksnowlv_kotlinjni_KotlinPerson_setAge
    (JNIEnv *env, jobject cls, jlong o, jint value) {
      setPersonAge((void*)o,value);
    }

  /*
   * Class:     com_ksnowlv_hellojniforjava_JavaCallJNI
   * Method:    personAge
   * Signature: (Ljava/lang/Object;)I
   */
  JNIEXPORT jint JNICALL Java_com_ksnowlv_kotlinjni_KotlinPerson_age
    (JNIEnv *env, jobject cls, jlong o) {
     return personAge((void*)o);
    }


  JNIEXPORT void JNICALL Java_com_ksnowlv_kotlinjni_KotlinPerson_setName
    (JNIEnv *env, jobject cls, jlong o, jstring string) {

      int length1 = (*env)-&gt;GetStringLength(env, string);
      const jchar * jcstr = (*env)-&gt;GetStringChars(env, string, NULL);


       jclass   clsstring   =   (*env)-&gt;FindClass(env,"java/lang/String");  //String
       jstring   code   =   (*env)-&gt;NewStringUTF(env,"UTF-8"); //"UTF-8"
       jmethodID   methodID   =   (*env)-&gt;GetMethodID(env,clsstring,   "getBytes",   "(Ljava/lang/String;)[B"); //getBytes();
       jbyteArray   byteArray =   (jbyteArray)(*env)-&gt;CallObjectMethod(env,string,methodID,code);
       jsize   length   =   (*env)-&gt;GetArrayLength(env,byteArray);
       jbyte*   bytes   =   (*env)-&gt;GetByteArrayElements(env,byteArray,JNI_FALSE);


       if( length &gt; 0){

          char* buf =   (char*)malloc(length+1);         //"\0"
          memcpy(buf,bytes,length);
          buf[length]=0;
          setPersonName((void*)o, buf);
          LOGI("set name = %s",buf);
          free(buf);
       }else{
          setPersonName((void*)o, NULL);
       }

       (*env)-&gt;ReleaseByteArrayElements(env,byteArray,bytes,0);  //释放内存空间
    }

  /*
   * Class:     com_ksnowlv_hellojniforjava_JavaCallJNI
   * Method:    personName
   * Signature: (Ljava/lang/Object;)Ljava/lang/String;
   */
  JNIEXPORT jstring JNICALL Java_com_ksnowlv_kotlinjni_KotlinPerson_name
    (JNIEnv *env, jobject cls, jlong o) {

      LOGI("jni get name");
      const char *name = personName((void*)o);

      if ( name != NULL ) {
          LOGI("jni name = %s",name);
          return  (*env)-&gt;NewStringUTF(env,name);
      }else {
          return (*env)-&gt;NewStringUTF(env,"");
      }
    }
#include "JNIPerson.h"
</code></pre>

<h1>include &ldquo;PersonExtension.hpp&rdquo;</h1>

<h1>include &ldquo;JNILog.h&rdquo;</h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;string.h></h1>

<p>  /<em>
   * Class:     com_ksnowlv_hellojniforjava_JavaCallJNI
   * Method:    createPerson
   * Signature: ()Ljava/lang/Object;
   </em>/
JNIEXPORT jlong JNICALL Java_com_ksnowlv_kotlinjni_KotlinPerson_createPerson</p>

<pre><code>(JNIEnv *env, jobject cls) {


  void *p = createPerson();

  return (jlong)p;
}
</code></pre>

<p>  /<em>
   * Class:     com_ksnowlv_hellojniforjava_JavaCallJNI
   * Method:    destroyPerson
   * Signature: (Ljava/lang/Object;)V
   </em>/
  JNIEXPORT void JNICALL Java_com_ksnowlv_kotlinjni_KotlinPerson_destroyPerson</p>

<pre><code>(JNIEnv *env, jobject cls, jlong o) {

    destroyPerson((void*)o);
}
</code></pre>

<p>  /<em>
   * Class:     com_ksnowlv_hellojniforjava_JavaCallJNI
   * Method:    setPersonAge
   * Signature: (Ljava/lang/Object;I)V
   </em>/
  JNIEXPORT void JNICALL Java_com_ksnowlv_kotlinjni_KotlinPerson_setAge</p>

<pre><code>(JNIEnv *env, jobject cls, jlong o, jint value) {
  setPersonAge((void*)o,value);
}
</code></pre>

<p>  /<em>
   * Class:     com_ksnowlv_hellojniforjava_JavaCallJNI
   * Method:    personAge
   * Signature: (Ljava/lang/Object;)I
   </em>/
  JNIEXPORT jint JNICALL Java_com_ksnowlv_kotlinjni_KotlinPerson_age</p>

<pre><code>(JNIEnv *env, jobject cls, jlong o) {
 return personAge((void*)o);
}
</code></pre>

<p>  JNIEXPORT void JNICALL Java_com_ksnowlv_kotlinjni_KotlinPerson_setName</p>

<pre><code>(JNIEnv *env, jobject cls, jlong o, jstring string) {

  int length1 = (*env)-&gt;GetStringLength(env, string);
  const jchar * jcstr = (*env)-&gt;GetStringChars(env, string, NULL);


   jclass   clsstring   =   (*env)-&gt;FindClass(env,"java/lang/String");  //String
   jstring   code   =   (*env)-&gt;NewStringUTF(env,"UTF-8"); //"UTF-8"
   jmethodID   methodID   =   (*env)-&gt;GetMethodID(env,clsstring,   "getBytes",   "(Ljava/lang/String;)[B"); //getBytes();
   jbyteArray   byteArray =   (jbyteArray)(*env)-&gt;CallObjectMethod(env,string,methodID,code);
   jsize   length   =   (*env)-&gt;GetArrayLength(env,byteArray);
   jbyte*   bytes   =   (*env)-&gt;GetByteArrayElements(env,byteArray,JNI_FALSE);


   if( length &gt; 0){

      char* buf =   (char*)malloc(length+1);         //"\0"
      memcpy(buf,bytes,length);
      buf[length]=0;
      setPersonName((void*)o, buf);
      LOGI("set name = %s",buf);
      free(buf);
   }else{
      setPersonName((void*)o, NULL);
   }

   (*env)-&gt;ReleaseByteArrayElements(env,byteArray,bytes,0);  //释放内存空间
}
</code></pre>

<p>  /<em>
   * Class:     com_ksnowlv_hellojniforjava_JavaCallJNI
   * Method:    personName
   * Signature: (Ljava/lang/Object;)Ljava/lang/String;
   </em>/
  JNIEXPORT jstring JNICALL Java_com_ksnowlv_kotlinjni_KotlinPerson_name</p>

<pre><code>(JNIEnv *env, jobject cls, jlong o) {

  LOGI("jni get name");
  const char *name = personName((void*)o);

  if ( name != NULL ) {
      LOGI("jni name = %s",name);
      return  (*env)-&gt;NewStringUTF(env,name);
  }else {
      return (*env)-&gt;NewStringUTF(env,"");
  }
}
</code></pre>

<p>```</p>

<h3>三.调用</h3>

<p>```kotlin</p>

<pre><code>var person = KotlinPerson()
person.setPersonAge(10)

Log.i("----Android age = ", "" + person.personAge())
person.setPersonName("ksnowlv(律威)")

Log.i("----Android name = ", person.personName())
</code></pre>

<p>```</p>

<h3>四.日志输出</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android通过jni间接调用c++]]></title>
    <link href="http://ksnowlv.github.io/blog/2019/04/22/androidtong-guo-jnijian-jie-diao-yong-c-plus-plus/"/>
    <updated>2019-04-22T11:23:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2019/04/22/androidtong-guo-jnijian-jie-diao-yong-c-plus-plus</id>
    <content type="html"><![CDATA[<p>本篇重点内容，C如何调用C++类，思路是JAVA通过JNI直接调用C，C调用C++相关的类。</p>

<h4>1.JAVA层接口Person类相关接口</h4>

<p>```objective-c
public class JavaCallJNI {</p>

<pre><code>static  {
    System.loadLibrary("JNITest");
}


public static native int showValue(int value);

public static native long  createPerson();
public static native void destroyPerson(long person);
public static native void setPersonAge(long person,  int age);
public static native int personAge(long person);
public static native void setPersonName(long person, String name);
public static native String  personName(long person);
</code></pre>

<p>}</p>

<p>```</p>

<h3>2.C接口及实现</h3>

<p><code>com_ksnowlv_hellojniforjava_JavaCallJNI.h</code>内容如下</p>

<p>```objective-c</p>

<pre><code>#include &lt;jni.h&gt;
/* Header for class com_ksnowlv_hellojniforjava_JavaCallJNI */

#ifndef _Included_com_ksnowlv_hellojniforjava_JavaCallJNI
#define _Included_com_ksnowlv_hellojniforjava_JavaCallJNI
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_ksnowlv_hellojniforjava_JavaCallJNI
 * Method:    showValue
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_com_ksnowlv_hellojniforjava_JavaCallJNI_showValue
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_ksnowlv_hellojniforjava_JavaCallJNI
 * Method:    createPerson
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_com_ksnowlv_hellojniforjava_JavaCallJNI_createPerson
  (JNIEnv *, jclass);

/*
 * Class:     com_ksnowlv_hellojniforjava_JavaCallJNI
 * Method:    destroyPerson
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_ksnowlv_hellojniforjava_JavaCallJNI_destroyPerson
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_ksnowlv_hellojniforjava_JavaCallJNI
 * Method:    setPersonAge
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_com_ksnowlv_hellojniforjava_JavaCallJNI_setPersonAge
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     com_ksnowlv_hellojniforjava_JavaCallJNI
 * Method:    personAge
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_ksnowlv_hellojniforjava_JavaCallJNI_personAge
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_ksnowlv_hellojniforjava_JavaCallJNI
 * Method:    setPersonName
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_ksnowlv_hellojniforjava_JavaCallJNI_setPersonName
  (JNIEnv *, jclass, jlong, jstring);

/*
 * Class:     com_ksnowlv_hellojniforjava_JavaCallJNI
 * Method:    personName
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_ksnowlv_hellojniforjava_JavaCallJNI_personName
  (JNIEnv *, jclass, jlong);

#ifdef __cplusplus
}
#endif
#endif
</code></pre>

<p>```</p>

<p><code>com_ksnowlv_hellojniforjava_JavaCallJNI.c</code>内容如下</p>

<p>```objective-c</p>

<pre><code>#include "com_ksnowlv_hellojniforjava_JavaCallJNI.h"
#include "PersonExtension.hpp"
#include "JNILog.h"
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

JNIEXPORT jint JNICALL Java_com_ksnowlv_hellojniforjava_JavaCallJNI_showValue
  (JNIEnv * enc, jclass cls , jint value) {

    LOGI("jni value = %d",value);
    value = value + 1;
    LOGI("jni value +1 = %d",value);
    return value;
  }


/*
 * Class:     com_ksnowlv_hellojniforjava_JavaCallJNI
 * Method:    createPerson
 * Signature: ()Ljava/lang/Object;
 */
JNIEXPORT jlong JNICALL Java_com_ksnowlv_hellojniforjava_JavaCallJNI_createPerson
  (JNIEnv *env, jclass cls) {


    void *p = createPerson();

    return (jlong)p;
  }

/*
 * Class:     com_ksnowlv_hellojniforjava_JavaCallJNI
 * Method:    destroyPerson
 * Signature: (Ljava/lang/Object;)V
 */
JNIEXPORT void JNICALL Java_com_ksnowlv_hellojniforjava_JavaCallJNI_destroyPerson
  (JNIEnv *env, jclass cls, jlong o) {

      destroyPerson((void*)o);
  }

/*
 * Class:     com_ksnowlv_hellojniforjava_JavaCallJNI
 * Method:    setPersonAge
 * Signature: (Ljava/lang/Object;I)V
 */
JNIEXPORT void JNICALL Java_com_ksnowlv_hellojniforjava_JavaCallJNI_setPersonAge
  (JNIEnv *env, jclass cls, jlong o, jint value) {
    setPersonAge((void*)o,value);
  }

/*
 * Class:     com_ksnowlv_hellojniforjava_JavaCallJNI
 * Method:    personAge
 * Signature: (Ljava/lang/Object;)I
 */
JNIEXPORT jint JNICALL Java_com_ksnowlv_hellojniforjava_JavaCallJNI_personAge
  (JNIEnv *env, jclass cls, jlong o) {
   return personAge((void*)o);
  }

/*
 * Class:     com_ksnowlv_hellojniforjava_JavaCallJNI
 * Method:    setPersonName
 * Signature: (Ljava/lang/Object;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_ksnowlv_hellojniforjava_JavaCallJNI_setPersonName
  (JNIEnv *env, jclass cls, jlong o, jstring string) {

    int length1 = (*env)-&gt;GetStringLength(env, string);
    const jchar * jcstr = (*env)-&gt;GetStringChars(env, string, NULL);


     jclass   clsstring   =   (*env)-&gt;FindClass(env,"java/lang/String");  //String
     jstring   code   =   (*env)-&gt;NewStringUTF(env,"UTF-8"); //"UTF-8"
     jmethodID   methodID   =   (*env)-&gt;GetMethodID(env,clsstring,   "getBytes",   "(Ljava/lang/String;)[B"); //getBytes();
     jbyteArray   byteArray =   (jbyteArray)(*env)-&gt;CallObjectMethod(env,string,methodID,code);
     jsize   length   =   (*env)-&gt;GetArrayLength(env,byteArray);
     jbyte*   bytes   =   (*env)-&gt;GetByteArrayElements(env,byteArray,JNI_FALSE);


     if( length &gt; 0){

        char* buf =   (char*)malloc(length+1);         //"\0"
        memcpy(buf,bytes,length);
        buf[length]=0;
        setPersonName((void*)o, buf);
        LOGI("set name = %s",buf);
        free(buf);
     }else{
        setPersonName((void*)o, NULL);
     }

     (*env)-&gt;ReleaseByteArrayElements(env,byteArray,bytes,0);  //释放内存空间
  }

/*
 * Class:     com_ksnowlv_hellojniforjava_JavaCallJNI
 * Method:    personName
 * Signature: (Ljava/lang/Object;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_ksnowlv_hellojniforjava_JavaCallJNI_personName
  (JNIEnv *env, jclass cls, jlong o) {

    LOGI("jni get name");
    const char *name = personName((void*)o);

    if ( name != NULL ) {
        LOGI("jni name = %s",name);
        return  (*env)-&gt;NewStringUTF(env,name);
    }else {
        return (*env)-&gt;NewStringUTF(env,"");
    }
  }
</code></pre>

<p>```</p>

<h3>3.JAVA调用</h3>

<p>```objective-c</p>

<pre><code>int value =  JavaCallJNI.showValue(1);
Log.i("------Android ","" + value);

long p =  JavaCallJNI.createPerson();
JavaCallJNI.setPersonAge(p,10);
int age = JavaCallJNI.personAge(p);
Log.i("------Android ","" + age);
JavaCallJNI.setPersonName(p,"ksnowlv(律威)");
String name = JavaCallJNI.personName(p);
Log.i("------Android ",name);
JavaCallJNI.destroyPerson(p);
</code></pre>

<p>```</p>

<h3>4.日志输出</h3>

<pre><code>28410-28410/com.ksnowlv.hellojniforjava I/------JNITest: jni value = 1
2019-04-24 16:42:40.759 28410-28410/com.ksnowlv.hellojniforjava I/------JNITest: jni value +1 = 2
2019-04-24 16:42:40.759 28410-28410/com.ksnowlv.hellojniforjava I/------Android: 2
2019-04-24 16:42:40.759 28410-28410/com.ksnowlv.hellojniforjava I/------Android: 10
2019-04-24 16:42:40.759 28410-28410/com.ksnowlv.hellojniforjava I/------JNITest: set name = ksnowlv(律威)
2019-04-24 16:42:40.759 28410-28410/com.ksnowlv.hellojniforjava I/------JNITest: jni get name
2019-04-24 16:42:40.759 28410-28410/com.ksnowlv.hellojniforjava I/------JNITest: jni name = ksnowlv(律威)
2019-04-24 16:42:40.759 28410-28410/com.ksnowlv.hellojniforjava I/------Android: ksnowlv(律威)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android通过jni调用c++]]></title>
    <link href="http://ksnowlv.github.io/blog/2019/04/18/androidtong-guo-jnidiao-yong-c-plus-plus/"/>
    <updated>2019-04-18T15:16:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2019/04/18/androidtong-guo-jnidiao-yong-c-plus-plus</id>
    <content type="html"><![CDATA[<p>本篇重点内容在于如何把C++的类通过JNI转换为JAVA的类</p>

<h3>1.创建JAVA类：<code>JavaPerson</code></h3>

<pre><code>public class JavaPerson {


private long mNativePerson;

public JavaPerson()
{
    mNativePerson = init();
}

public int getAge()
{
    return this.native_getAge(mNativePerson);
}

public void setAge(int age)
{
    native_setAge(mNativePerson, age);
}

public String getName() {
    return native_getName(mNativePerson);
}

public void setName(String name) {
    native_setName(mNativePerson, name);
}


@Override
protected void finalize() throws Throwable {

    if (mNativePerson != 0) {
        finalizer(mNativePerson);
    }

    super.finalize();
}

    static {
        System.loadLibrary("jniPerson");
    }

    private native long  init();
    private native void finalizer(long aPerson);
    private native int native_getAge(long aPerson);
    private native void native_setAge(long aPerson, int age);
    private native String native_getName(long aPerson);
    private native void native_setName(long aPerson, String name);
}
</code></pre>

<h3>2.通过Terminal生成c++头文件：<code>com_ksnowlv_jnicallc_JavaPerson.h</code></h3>

<pre><code>#ifndef _Included_com_ksnowlv_jnicallc_JavaPerson
#define _Included_com_ksnowlv_jnicallc_JavaPerson
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_ksnowlv_jnicallc_JavaPerson
 * Method:    init
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_com_ksnowlv_jnicallc_JavaPerson_init
  (JNIEnv *, jobject);

/*
 * Class:     com_ksnowlv_jnicallc_JavaPerson
 * Method:    finalizer
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_ksnowlv_jnicallc_JavaPerson_finalizer
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_ksnowlv_jnicallc_JavaPerson
 * Method:    native_getAge
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_ksnowlv_jnicallc_JavaPerson_native_1getAge
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_ksnowlv_jnicallc_JavaPerson
 * Method:    native_setAge
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_com_ksnowlv_jnicallc_JavaPerson_native_1setAge
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     com_ksnowlv_jnicallc_JavaPerson
 * Method:    native_getName
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_ksnowlv_jnicallc_JavaPerson_native_1getName
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_ksnowlv_jnicallc_JavaPerson
 * Method:    native_setName
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_ksnowlv_jnicallc_JavaPerson_native_1setName
  (JNIEnv *, jobject, jlong, jstring);

#ifdef __cplusplus
}
#endif
#endif
</code></pre>

<h3>3.添加c++实现文件：<code>com_ksnowlv_jnicallc_JavaPerson.cpp</code></h3>

<pre><code>//
// Created by ksnowlv on 2019-04-18.
//

#include"com_ksnowlv_jnicallc_JavaPerson.h"
#include "Person.hpp"
#include "JNILog.h"
#include &lt;string.h&gt;

extern "C"
{

/*
 * Class:     com_ksnowlv_jnicallc_JavaPerson
 * Method:    init
 * Signature: ()I
 */
JNIEXPORT jlong JNICALL Java_com_ksnowlv_jnicallc_JavaPerson_init
  (JNIEnv *, jobject) {

      LOGE("JNI Java_com_ksnowlv_jnicallc_JavaPerson_init");
      Person *person = new Person();
      return (jlong)person;

  }

/*
 * Class:     com_ksnowlv_jnicallc_JavaPerson
 * Method:    finalizer
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_ksnowlv_jnicallc_JavaPerson_finalizer
  (JNIEnv *, jobject cls, jlong thisObject) {

    LOGE("JNI Java_com_ksnowlv_jnicallc_JavaPerson_finalizer");

    Person *person = (Person *)thisObject;

    if (NULL != person) {
        delete person;
        person = NULL;
    }

  }

/*
 * Class:     com_ksnowlv_jnicallc_JavaPerson
 * Method:    native_getAge
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_ksnowlv_jnicallc_JavaPerson_native_1getAge
  (JNIEnv *evn, jobject cls, jlong thisObject ) {

    Person *person = (Person *)thisObject;

    LOGE("JNI Java_com_ksnowlv_jnicallc_JavaPerson_native_1getAge= %d", person-&gt;age());

    if (NULL != person) {

        return person-&gt;age();
    }

    return -1;
  }

/*
 * Class:     com_ksnowlv_jnicallc_JavaPerson
 * Method:    native_setAge
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_com_ksnowlv_jnicallc_JavaPerson_native_1setAge
  (JNIEnv *env, jobject cls, jlong thisObject, jint age ) {

      LOGE("JNI Java_com_ksnowlv_jnicallc_JavaPerson_native_1setAge = %d", age);

      Person *person = (Person *)thisObject;

      if ( NULL != person ) {
        person-&gt;setAge(age);
      }
  }

/*
 * Class:     com_ksnowlv_jnicallc_JavaPerson
 * Method:    native_getName
 * Signature: (J)I
 */
JNIEXPORT jstring JNICALL Java_com_ksnowlv_jnicallc_JavaPerson_native_1getName
  (JNIEnv *env, jobject cls, jlong thisObject) {
      LOGE("JNI Java_com_ksnowlv_jnicallc_JavaPerson_native_1getName");

      Person *person = (Person *)thisObject;

      if ( NULL != person ) {
          const char *name = person-&gt;name();
          if ( name != NULL ) {
               // LOGI("JNI name = %s",name);
                return  env-&gt;NewStringUTF(name);
           }
       }

    return env-&gt;NewStringUTF("");
  }

/*
 * Class:     com_ksnowlv_jnicallc_JavaPerson
 * Method:    native_setName
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_ksnowlv_jnicallc_JavaPerson_native_1setName
  (JNIEnv *env, jobject cls, jlong thisObject, jstring string) {

    LOGE("JNI Java_com_ksnowlv_jnicallc_JavaPerson_native_1setName");

     jclass   clsstring   =   env-&gt;FindClass("java/lang/String");  //String
     jstring   code   =   env-&gt;NewStringUTF("UTF8"); //"UTF8"
     jmethodID   methodID   =   env-&gt;GetMethodID(clsstring, "getBytes", "(Ljava/lang/String;)[B"); //getBytes(String);
     jbyteArray   byteArray =   (jbyteArray)env-&gt;CallObjectMethod(string,methodID,code); // String .getByte("UTF8");
     jsize   length   =   env-&gt;GetArrayLength(byteArray);
     jbyte*   bytes   =   env-&gt;GetByteArrayElements(byteArray,JNI_FALSE);

    Person *person = (Person *)thisObject;

    if ( NULL != person ) {
       if( length &gt; 0){
            char* buf =   new char[length+1];
            memset(buf,0,length+1);
            memcpy(buf,bytes,length);
            person-&gt;setName(buf);
            LOGE("JNI set name = %s",buf);
            delete []buf;
         }else{
            person-&gt;setName(NULL);
         }
    }



     env-&gt;ReleaseByteArrayElements(byteArray,bytes,0);  //释放内存空间
  }

}

static  JNINativeMethod methods[] = {

        {"init", "()J", (void *)Java_com_ksnowlv_jnicallc_JavaPerson_init},
        {"finalizer", "(J)V", (void *)Java_com_ksnowlv_jnicallc_JavaPerson_finalizer},
        {"native_getAge", "(J)I", (void *)Java_com_ksnowlv_jnicallc_JavaPerson_native_1getAge},
        {"native_setAge", "(JI)V", (void *)Java_com_ksnowlv_jnicallc_JavaPerson_native_1setAge},
        {"native_getName", "(J)Ljava/lang/String;", (void *)Java_com_ksnowlv_jnicallc_JavaPerson_native_1getName},
        {"native_setName", "(JLjava/lang/String;)V", (void *)Java_com_ksnowlv_jnicallc_JavaPerson_native_1setName},
};





static const char * classPathName = "com/ksnowlv/jnicallc/JavaPerson";
/*
 * Register several native methods for one class.
 */
static int registerNativeMethods(JNIEnv* env, const char* className,
                                 JNINativeMethod* gMethods, int numMethods)
{
    jclass clazz;
    clazz = env-&gt;FindClass(className);
    if (clazz == NULL) {
        LOGE("JavaPerson Native registration unable to find class '%s'", className);
        return JNI_FALSE;
    }
    if (env-&gt;RegisterNatives(clazz, gMethods, numMethods) &lt; 0) {
        LOGE("JavaPerson RegisterNatives failed for '%s'", className);
        return JNI_FALSE;
    }

    LOGE("JavaPerson registerNativeMethods OK");
    return JNI_TRUE;
}
/*
 * Register native methods for all classes we know about.
 *
 * returns JNI_TRUE on success.
 */
static int registerNatives(JNIEnv* env)
{
    if (!registerNativeMethods(env, classPathName,
                               methods, sizeof(methods) / sizeof(methods[0]))) {
        LOGE("JavaPerson class registerNatives FAIL");
        return JNI_FALSE;
    }

    LOGE("JavaPerson registerNatives OK");
    return JNI_TRUE;
}
// ----------------------------------------------------------------------------
/*
 * This is called by the VM when the shared library is first loaded.
 */

typedef union {
    JNIEnv* env;
    void* venv;
} UnionJNIEnvToVoid;

jint JNI_OnLoad(JavaVM* vm, void* reserved)
{
    UnionJNIEnvToVoid uenv;
    uenv.venv = NULL;
    jint result = -1;
    JNIEnv* env = NULL;

    LOGE("JNI_OnLoad");
    if (vm-&gt;GetEnv(&amp;uenv.venv, JNI_VERSION_1_4) != JNI_OK) {
        LOGE("ERROR: GetEnv failed");
        goto bail;
    }
    env = uenv.env;
    if (registerNatives(env) != JNI_TRUE) {
        LOGE("ERROR: registerNatives failed");
        goto bail;
    }

    result = JNI_VERSION_1_4;

    LOGE("JNI_OnLoad OK");
    bail:
    return result;
}
</code></pre>

<h4>4.在Android中的调用</h4>

<pre><code>   JavaPerson person = new JavaPerson();
    person.setAge(10);
    Log.i("------JNICallC++: Android person age =  ","" + person.getAge());
    person.setName("ksnowlv(律威)");
    Log.i("------JNICallC++: Android person name =  ","" + person.getName());   
</code></pre>

<h4>5.输出</h4>

<pre><code>2019-04-19 17:02:27.114 30422-30422/? E/------JNICallC++: JNI_OnLoad
2019-04-19 17:02:27.115 30422-30422/? E/------JNICallC++: JavaPerson registerNativeMethods OK
2019-04-19 17:02:27.115 30422-30422/? E/------JNICallC++: JavaPerson registerNatives OK
2019-04-19 17:02:27.115 30422-30422/? E/------JNICallC++: JNI_OnLoad OK
2019-04-19 17:02:27.115 30422-30422/? E/------JNICallC++: JNI Java_com_ksnowlv_jnicallc_JavaPerson_init
2019-04-19 17:02:27.115 30422-30422/? E/------JNICallC++: JNI Java_com_ksnowlv_jnicallc_JavaPerson_native_1setAge = 10
2019-04-19 17:02:27.115 30422-30422/? E/------JNICallC++: JNI Java_com_ksnowlv_jnicallc_JavaPerson_native_1getAge= 10
2019-04-19 17:02:27.115 30422-30422/? I/------JNICallC++: Android person age =: 10
2019-04-19 17:02:27.115 30422-30422/? E/------JNICallC++: JNI Java_com_ksnowlv_jnicallc_JavaPerson_native_1setName
2019-04-19 17:02:27.116 30422-30422/? E/------JNICallC++: JNI set name = ksnowlv(律威)
2019-04-19 17:02:27.116 30422-30422/? E/------JNICallC++: JNI Java_com_ksnowlv_jnicallc_JavaPerson_native_1getName
2019-04-19 17:02:27.116 30422-30422/? I/------JNICallC++: Android person name =: ksnowlv(律威)
</code></pre>

<h4>6.说明</h4>

<ul>
<li>C++<code>Person</code>类同上一工程 。</li>
<li>注意JNI调用C++和C的区别。

<ul>
<li>JNI_OnLoad相关：像JNINativeMethod methods注意函数映射参数，classPathName类路径等</li>
<li>env调用方式</li>
<li>C++对象回收内存</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android-jni-demo]]></title>
    <link href="http://ksnowlv.github.io/blog/2019/04/10/android-jni-demo/"/>
    <updated>2019-04-10T17:14:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2019/04/10/android-jni-demo</id>
    <content type="html"><![CDATA[<h4>1.创建<code>app/src/main/jniLibs</code>目录</h4>

<h4>2.把so库拷贝到<code>jniLibs</code>目录。</h4>

<h4>3.<code>JavaCallJNI</code>内容如下</h4>

<p>···objective-c</p>

<p>public class JavaCallJNI {</p>

<pre><code>static  {
    System.loadLibrary("JNITest");
}


public static native int showValue(int value);
</code></pre>

<p>}</p>

<p>···</p>

<h4>4.<code>com_ksnowlv_hellojniforjava_JavaCallJNI.h</code>内容如下：</h4>

<p>```objective-c</p>

<p>/<em> DO NOT EDIT THIS FILE &ndash; it is machine generated </em>/</p>

<h1>include &lt;jni.h></h1>

<p>/<em> Header for class com_ksnowlv_hellojniforjava_JavaCallJNI </em>/</p>

<h1>ifndef _Included_com_ksnowlv_hellojniforjava_JavaCallJNI</h1>

<h1>define _Included_com_ksnowlv_hellojniforjava_JavaCallJNI</h1>

<h1>ifdef __cplusplus</h1>

<p>extern &ldquo;C&rdquo; {</p>

<h1>endif</h1>

<p>/<em>
 * Class:     com_ksnowlv_hellojniforjava_JavaCallJNI
 * Method:    showValue
 * Signature: (I)I
 </em>/</p>

<p>JNIEXPORT jint JNICALL Java_com_ksnowlv_hellojniforjava_JavaCallJNI_showValue
  (JNIEnv *, jclass, jint);</p>

<p>  #ifdef __cplusplus
}</p>

<h1>endif</h1>

<h1>endif</h1>

<p>```</p>

<h4>5.<code>com_ksnowlv_hellojniforjava_JavaCallJNI.c</code>内容如下：</h4>

<p>```objective-c</p>

<h1>include &ldquo;com_ksnowlv_hellojniforjava_JavaCallJNI.h&rdquo;</h1>

<h1>include &ldquo;PersonExtension.hpp&rdquo;</h1>

<h1>include &ldquo;JNILog.h&rdquo;</h1>

<p>JNIEXPORT jint JNICALL Java_com_ksnowlv_hellojniforjava_JavaCallJNI_showValue
  (JNIEnv * enc, jclass cls , jint value) {</p>

<pre><code>LOGI("jni value = %d",value);
value = value + 1;
LOGI("jni value +1 = %d",value);
return value;
</code></pre>

<p>  }</p>

<p>```</p>

<h4>6。Android中调用如下：</h4>

<p>```objective-c</p>

<pre><code>  int value =  JavaCallJNI.showValue(1);
  Log.e("#### value ","" + value);
</code></pre>

<p>```</p>

<h4>Android</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[”mac下配置jni开发环境(二)“]]></title>
    <link href="http://ksnowlv.github.io/blog/2019/04/09/macxia-pei-zhi-jnikai-fa-huan-jing-er/"/>
    <updated>2019-04-09T20:30:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2019/04/09/macxia-pei-zhi-jnikai-fa-huan-jing-er</id>
    <content type="html"><![CDATA[<p>创建android基础工程</p>

<h4>1.JNI java文件创建</h4>

<p>```objective-c</p>

<p>public class JavaCallJNI {</p>

<pre><code>static  {
    System.loadLibrary("JniTest");
}

public static native int showValue(int value);
</code></pre>

<p>}</p>

<p>```</p>

<p><img src="/images/post/2019-04-09-macxia-pei-zhi-jnikai-fa-huan-jing-er/jni-files.png" alt="image" /></p>

<h4>2.在<code>app/scr/main/</code>目录下，创建目录<code>jni</code></h4>

<h4>3.在jni目录下，创建<code>Android.mk</code>文件</h4>

<p>文件内容如下：</p>

<pre><code>LOCAL_PATH := $(call my-dir)
include $(CLEAR_VARS)


LOCAL_MODULE := jniTest
LOCAL_SRC_FILES := com_ksnowlv_hellojniforjava_JavaCallJNI.c

include $(BUILD_SHARED_LIBRARY)
</code></pre>

<p>其中</p>

<ul>
<li><p>LOCAL_MODULE := JniTest</p>

<pre><code>  这里JniTest，是将要生成的`.so`库的名字，会自动加上 lib前缀，
  最终生成库文件：libJniTest.so
  如果要引用该库：System.loadLibrary("JniTest")
</code></pre></li>
<li><p>LOCAL_SRC_FILES := com_ksnowlv_hellojniforjava_JavaCallJNI</p>

<pre><code>  JNI头文件com_ksnowlv_hellojniforjava_JavaCallJNI.h对应的.c文件
  命名方式：包名+类名+.c
</code></pre></li>
</ul>


<p>在<code>terminal</code>中生成com_ksnowlv_hellojniforjava_JavaCallJNI.h头文件</p>

<pre><code>ksnowlvdeMacBook-Pro:java ksnowlv$ javac com/ksnowlv/   hellojniforjava/JavaCallJNI.java 
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8
ksnowlvdeMacBook-Pro:java ksnowlv$ javah -d ../jni  com.ksnowlv.hellojniforjava.JavaCallJNI
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8
ksnowlvdeMacBook-Pro:java ksnowlv$ cd ..
</code></pre>

<p><img src="/images/post/2019-04-09-macxia-pei-zhi-jnikai-fa-huan-jing-er/jni_header_create.png" alt="image" /></p>

<p>实现文件中内容如下</p>

<pre><code>#include "com_ksnowlv_hellojniforjava_JavaCallJNI.h"

JNIEXPORT jint JNICALL  Java_com_ksnowlv_hellojniforjava_JavaCallJNI_showValue(JNIEnv * enc, jclass cls , jint value) {
    value = value + 1;
    return value;
}
</code></pre>

<h4>4.在jni目录下，创建<code>Application.mk</code>文件</h4>

<p>内容如下：</p>

<pre><code>APP_ABI := all  
</code></pre>

<p>会生成所有主流 ABI 类型的 .so 库</p>

<h4>5.更新在当前模块下build.gradle文件</h4>

<ul>
<li><p><code>defaultConfig</code>下增加ndk配置</p>

<pre><code>  ndk {
      moduleName "JniTest" //System.loadLibrary("JniTest");
  }
</code></pre></li>
<li><p>在buildTypes上面添加<code>jni.srcDirs</code>的配置</p>

<pre><code>  sourceSets {
     main {//建议这里直接使用'libs'目录，
     //因为当使用其他包有.so文件时，一般习惯也是直接拷贝进入libs目录
      jni.srcDirs = ['libs']
    }
  }
</code></pre></li>
</ul>


<p><img src="/images/post/2019-04-09-macxia-pei-zhi-jnikai-fa-huan-jing-er/build-gradle.png" alt="image" /></p>

<h4>5.在终端进入jni路径:app/src/main/jni,输入<code>ndk-build</code>即生成各种版本的so</h4>

<pre><code>ksnowlvdeMacBook-Pro:java ksnowlv$ javac com/ksnowlv/   hellojniforjava/JavaCallJNI.java 
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8
ksnowlvdeMacBook-Pro:java ksnowlv$ javah -d ../jni  com.ksnowlv.hellojniforjava.JavaCallJNI
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8
ksnowlvdeMacBook-Pro:java ksnowlv$ cd ..
ksnowlvdeMacBook-Pro:main ksnowlv$ cd jni
ksnowlvdeMacBook-Pro:jni ksnowlv$ ndk-build
</code></pre>

<p><img src="/images/post/2019-04-09-macxia-pei-zhi-jnikai-fa-huan-jing-er/so.png" alt="image" /></p>
]]></content>
  </entry>
  
</feed>
