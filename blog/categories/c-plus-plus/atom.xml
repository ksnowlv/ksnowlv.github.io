<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++ | ksnowlv]]></title>
  <link href="http://ksnowlv.github.io/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://ksnowlv.github.io/"/>
  <updated>2020-11-05T20:11:37+08:00</updated>
  <id>http://ksnowlv.github.io/</id>
  <author>
    <name><![CDATA[律威]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C++多态性]]></title>
    <link href="http://ksnowlv.github.io/blog/2013/05/15/c-plus-plus-duo-tai-xing/"/>
    <updated>2013-05-15T13:40:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2013/05/15/c-plus-plus-duo-tai-xing</id>
    <content type="html"><![CDATA[<h4>多态性含义</h4>

<ul>
<li>同一个函数可以有不同的语义。相同的消息被不同对象接收时导致完全不同的行为。</li>
</ul>


<h4>面向对象语言的多态性</h4>

<ul>
<li>1.重载多态，</li>
<li>2.强制多态，</li>
<li>3.包含多态</li>
<li>4.参数多态。</li>
</ul>


<p>重载多态和强制多态又称为专用多态。</p>

<p>包含多态和参数多态又称通用多态。</p>

<p>重载多态是同一个名字多个实现，函数重载属于此类</p>

<p>强制多态是通过语义操作把一个类型加以变换，以符合一个函数或操作的要求。强制类型转换属于此种类型。
例如，把整形转换成浮点型。</p>

<p>包含多态是解决类族中定义于不同类中同名成员函数的多态行为，主要通过虚函数实现的。</p>

<p>参数多态是参数可以模板化，
其中，类模板实例化的各个类具有相同的操作，函数模板实例化的各个函数具有相同的操作。
像函数模板和类模板。</p>

<h4>从实现的角度可以分为两类</h4>

<ul>
<li>编译时的多态</li>
<li>运行时的多态。</li>
</ul>


<p>编译时的多态是在编译过程中确定同名操作的具体操作对象。也称静态联编</p>

<p>运行时的多态是在程序运行过程中动态地确定具体操作的对象。这个过程也称动态联编。</p>

<p>用面向对象的术语来说，就是把一个消息和一个对象方法相结合的一个过程。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二维数组的创建释放]]></title>
    <link href="http://ksnowlv.github.io/blog/2013/05/10/er-wei-shu-zu-de-chuang-jian-shi-fang/"/>
    <updated>2013-05-10T22:20:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2013/05/10/er-wei-shu-zu-de-chuang-jian-shi-fang</id>
    <content type="html"><![CDATA[<p>```objective-c
template<class T>
void CreateArray(T<strong> &amp;aArray, const int aRow,const int aCol) {
 T</strong> aArray = new T*[aRow];</p>

<p> for (int i = 0; i &lt; aRow; ++i)
 {
  aArray[i] = new T[aCol];
 }
}</p>

<p>template<class T>
void ReleaseArray(T** &amp;aArray, const int aRow,const int aCol) {</p>

<p> for (int i = aRow &ndash; 1; i >= 0; &mdash;i)
 {
  delete [] aArray[i];
 }</p>

<p> delete[] aArray;
 aArray = NULL;
}</p>

<p>```</p>

<p>记得两年前，面试腾讯时，到部门老大面试的时候</p>

<p>突然让写个这玩意，从来没有写过，凭借对指针的理解写出如上代码，当时没有用模板，用给定的int类型的数组，后来回来，写了个测试例子验证下，当时写对了。好险！后来写的测试例子如下：</p>

<p>```objective-c
void TestMgr::testArray()
{
 const int KCol = 3;
 const int KRow = 4;</p>

<p> int<em>* p = new int</em>[KCol];</p>

<p> for (int i = 0; i &lt; KCol; ++i )
 {
  p[i] = new int[KRow];
  memset(p[i],0,KRow * sizeof(int));</p>

<p> }
 memset(<em>p,0, KCol</em> sizeof(int));
 for (int i = 0; i &lt; KCol; ++i )
 {
  for (int j = 0; j &lt; KRow; ++j)
  {
   p[i][j] = (i + 1) *(j +1);
   cout&lt;&lt;p[i][j]&lt;&lt;&ldquo;,&rdquo;;
  }
  cout&lt;&lt;endl;
 }</p>

<p> for (int i = KCol &ndash; 1; i >=0; &mdash;i)
 {
  delete []p[i];
 }</p>

<p> delete []p;</p>

<p>}</p>

<p>template<class T>
void CreateArray(T<strong> &amp;aArray, const int aRow,const int aCol)
{
 T</strong> aArray = new T*[aRow];</p>

<p> for (int i = 0; i &lt; aRow; ++i)
 {
  aArray[i] = new T[aCol];
 }
}</p>

<p>template<class T>
void ReleaseArray(T** &amp;aArray, const int aRow,const int aCol)
{</p>

<p> for (int i = aRow &ndash; 1; i >= 0; &mdash;i)
 {
  delete [] aArray[i];
 }</p>

<p> delete[] aArray;
 aArray = NULL;
}</p>

<p>```</p>

<p>结论：基础一定得扎实，即使遇见过从来没有用过的，也可以通过其实质写对！</p>
]]></content>
  </entry>
  
</feed>
