<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: UML | ksnowlv]]></title>
  <link href="http://ksnowlv.github.io/blog/categories/uml/atom.xml" rel="self"/>
  <link href="http://ksnowlv.github.io/"/>
  <updated>2020-05-21T17:06:06+08:00</updated>
  <id>http://ksnowlv.github.io/</id>
  <author>
    <name><![CDATA[律威]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UML图小结]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/11/04/uml-tu-xiao-jie/"/>
    <updated>2014-11-04T17:13:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/11/04/uml-tu-xiao-jie</id>
    <content type="html"><![CDATA[<h3>1.活动图VS时序图</h3>

<pre><code>活动图从用户的角度描述用例
时序图从对象间的交互描述用例
</code></pre>

<h3>2. 时序图VS协作图</h3>

<pre><code>时序图从对象间的交互描述用例。强调对象交互的时间次序。
协作图从对象间的交互描述用例。强调对象交互的空间结构。
</code></pre>

<p> 时序图和协作图在语义上是等价的，所以时序图和协作图可以彼此转换而不会损失信息</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[uml组件图]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/11/04/uml-zu-jian-tu/"/>
    <updated>2014-11-04T16:09:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/11/04/uml-zu-jian-tu</id>
    <content type="html"><![CDATA[<h3>组件图(Component diagram)</h3>

<pre><code>显示系统组件间的结构关系组件图,有助于直观显示系统的高级结构以及这些结构通过接口提供和使用的服务行为.
</code></pre>

<p> <!--more--></p>

<h3>组件图示例</h3>

<p><img src="/images/post/2014-11-04-uml-zu-jian-tu/component_diagram.png" alt="image" /></p>

<p>Store组件提供了<strong>OrderEntry</strong> 接口,并要求使用<strong>Account</strong>接口。
Store组件由三个组件组成：</p>

<ul>
<li>1.Order组件</li>
<li>2.Customer组件</li>
<li>3.Product组件。</li>
</ul>


<blockquote><p>注意Store的 OrderEntry 和Account接口符号在组件的边缘上为何有一个方块？</p>

<p>这一个方块被称为一个端口。单纯感觉来说，端口提供一种方法，它显示建模组件所 提供/要求 的接口如何与它里面的部分相关联。 通过使用端口，我们可以从外部实例中分离出Store组件的内部部件。</p></blockquote>

<p> OrderEntry 端口代表Order组件的 OrderEntry 接口，表示Store组件提供该接口。
Account端口代表内部的Customer组件要求使用的Account接口必须分配给Store组件，表示Store组件要求使用该接口。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[uml协作图]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/11/04/uml-xie-zuo-tu/"/>
    <updated>2014-11-04T14:25:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/11/04/uml-xie-zuo-tu</id>
    <content type="html"><![CDATA[<h3>协作图(也叫通讯图collaboration diagram)</h3>

<pre><code> 显示对象之间的交互，强调交互的空间结构
</code></pre>

<p>  <!--more--></p>

<h3>协作图构成</h3>

<ul>
<li>1.对象：参与交互的元素</li>
<li>2.链接：用来标识消息在不同对象之间传递方向与关系。</li>
<li>3.消息：协作图中对象与对象之间的通信方式。</li>
</ul>


<h3>协作图示例</h3>

<p><img src="/images/post/2014-11-04-uml-xie-zuo-tu/collaboration_diagram.jpg" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[uml活动图]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/11/03/uml-huo-dong-tu/"/>
    <updated>2014-11-03T17:21:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/11/03/uml-huo-dong-tu</id>
    <content type="html"><![CDATA[<h3>活动图(Activity Diagram)</h3>

<pre><code>UML用于对系统的动态行为建模的另一种常用工具，
它描述活动的顺序，展现从一个活动到另一个活动的控制流。
活动图在本质上是一种流程图。
活动图着重表现从一个活动到另一个活动的控制流，是内部处理驱动的流程
</code></pre>

<!--more-->


<h3>活动图图参考如下：</h3>

<p><img src="/images/post/2014-11-03-uml-huo-dong-tu/activity_diagram.jpg" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[uml状态图]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/11/03/uml-zhuang-tai-tu/"/>
    <updated>2014-11-03T17:20:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/11/03/uml-zhuang-tai-tu</id>
    <content type="html"><![CDATA[<h3>状态图(Statechart Diagram)</h3>

<pre><code>描述一个实体基于事件反应的动态行为，显示该实体如何根据当前所处的状态对不同的事件做出反应的。 
</code></pre>

<!--more-->


<h3>状态图参考如下：</h3>

<p><img src="/images/post/2014-11-03-uml-zhuang-tai-tu/state_diagram.jpg" alt="image" /></p>
]]></content>
  </entry>
  
</feed>
