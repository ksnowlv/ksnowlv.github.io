<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: symbian-解压缩 | ksnowlv]]></title>
  <link href="http://ksnowlv.github.io/blog/categories/symbian-jie-ya-suo/atom.xml" rel="self"/>
  <link href="http://ksnowlv.github.io/"/>
  <updated>2019-05-15T17:09:38+08:00</updated>
  <id>http://ksnowlv.github.io/</id>
  <author>
    <name><![CDATA[律威]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[symbian-gzip解压缩]]></title>
    <link href="http://ksnowlv.github.io/blog/2013/04/11/symbian-gzipjie-ya-suo/"/>
    <updated>2013-04-11T15:04:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2013/04/11/symbian-gzipjie-ya-suo</id>
    <content type="html"><![CDATA[<h4>gbk数据解压缩转成Unicode编码数据</h4>

<p>```objective-c
const TBool GBKCompressToUnicodeL(const TDesC8&amp; aGBKData,RBuf&amp; aUnicodeData)
{</p>

<pre><code>z_stream stream;   
memset(&amp;stream, 0, sizeof(z_stream));   

const uInt inputBufLen = aGBKData.Length() + 1;

stream.avail_in = inputBufLen;
stream.next_in = (Bytef*)aGBKData.Ptr(); 

TInt res = inflateInit(&amp;stream);

TBool isUncompressOK = EFalse ;

RBuf8 gbkUncompressData;
CleanupClosePushL(gbkUncompressData);
gbkUncompressData.Create((inputBufLen&lt;&lt;3));
gbkUncompressData.Zero();

if ( res == Z_OK)
{
    TInt pakLen = 256;
    Bytef* pakBuf = NULL;

    if ( inputBufLen &gt; 120 * 1024 )
    {
        pakLen = 4096;
    }
    else if ( inputBufLen &gt; 80 * 1024 )
    {
        pakLen = 2048;
    }
    else if ( inputBufLen &gt; 50 * 1024 )
    {
        pakLen = 1024;
    }
    else if ( inputBufLen &gt; 20 * 1024 )
    {
        pakLen = 512;
    }

    pakBuf = new (ELeave)Bytef[pakLen];

    TInt memAllocRes = KErrNone;

    while(stream.avail_out == 0)
    {
        memset(pakBuf,0,pakLen * sizeof(Bytef));

        stream.avail_out = pakLen;
        stream.next_out = pakBuf; 

        res = inflate(&amp;stream, Z_NO_FLUSH);

        switch (res)
        {
        case Z_NEED_DICT:
        case Z_DATA_ERROR:
        case Z_MEM_ERROR:
        case Z_STREAM_ERROR:
        case Z_BUF_ERROR:
        {
            isUncompressOK = EFalse;
            break;
        }

        default:
        {
            if ( res == Z_OK ||  res == Z_STREAM_END)
            {
                const TInt  dataLen = pakLen - stream.avail_out;

                const TInt curBufLen = gbkUncompressData.Length();
                const TInt maxBufLen = gbkUncompressData.MaxLength();

                if ( curBufLen + dataLen &gt; maxBufLen)
                {
                    memAllocRes = gbkUncompressData.ReAlloc(curBufLen + dataLen + (pakLen&lt;&lt;3));
                }

                if ( KErrNone == memAllocRes )
                {
                    gbkUncompressData.Append((const TUint8*)pakBuf,dataLen);
                    isUncompressOK = ETrue;
                }
            }

            break;
        }

        }

        if ( KErrNone != memAllocRes )
        {
            isUncompressOK = EFalse;
            break;
        }
    }


    delete[] pakBuf;
    pakBuf = NULL;
}

const TInt len = stream.total_out;

inflateEnd(&amp;stream);

aUnicodeData.Close();

if ( isUncompressOK )
{
    RFs&amp; fs = CEikonEnv::Static()-&gt;FsSession();

    const TInt allocRes = aUnicodeData.Create(gbkUncompressData.Length() * 3);  

    if ( KErrNone == allocRes)
    {
        CCnvCharacterSetConverter* gbkToUnicodeLE = CCnvCharacterSetConverter::NewLC();
        gbkToUnicodeLE-&gt;PrepareToConvertToOrFromL(KCharacterSetIdentifierGbk, fs);

        TInt state = CCnvCharacterSetConverter::KStateDefault;
        const TInt convertRes = gbkToUnicodeLE-&gt;ConvertToUnicode(aUnicodeData, gbkUncompressData, state);

        if(KErrNone != convertRes)
        {
            isUncompressOK = EFalse;
        }

        /**release**/
        CleanupStack::PopAndDestroy(gbkToUnicodeLE);
    }
    else
    {
        isUncompressOK = EFalse;
    }

}

CleanupStack::PopAndDestroy(&amp;gbkUncompressData);

return isUncompressOK;
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
