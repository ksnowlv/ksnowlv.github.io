<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Xcode | ksnowlv]]></title>
  <link href="http://ksnowlv.github.io/blog/categories/xcode/atom.xml" rel="self"/>
  <link href="http://ksnowlv.github.io/"/>
  <updated>2020-11-05T20:11:37+08:00</updated>
  <id>http://ksnowlv.github.io/</id>
  <author>
    <name><![CDATA[律威]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[XCode使用PMD扫描重复代码（一）]]></title>
    <link href="http://ksnowlv.github.io/blog/2019/08/19/xcodeshi-yong-pmdsao-miao-zhong-fu-dai-ma/"/>
    <updated>2019-08-19T15:39:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2019/08/19/xcodeshi-yong-pmdsao-miao-zhong-fu-dai-ma</id>
    <content type="html"><![CDATA[<p>如何使用PMD在Xcode下扫描重复代码（Copy&amp;Past）呢？</p>

<h3>1.下载PMD：<a href="https://pmd.github.io">https://pmd.github.io</a>，放置到工程主目录下面。</h3>

<p><img src="/images/post/2019-08-19-xcodeshi-yong-pmdsao-miao-zhong-fu-dai-ma/1.png" alt="image" /></p>

<h3>2.Xcode中检测脚本配置</h3>

<h4>1.在<code>Xcode</code>的 <code>Build Phases</code> 中，我们增加一个新的 <code>Run Script</code>，脚本内容如下：</h4>

<pre><code>#检测swift代码
#pmd cpd --files ${EXECUTABLE_NAME} --minimum-tokens 50 --language swift --encoding UTF-8 --format net.sourceforge.pmd.cpd.XMLRenderer &gt; cpd-output.xml --failOnViolation true

#检测objective-c代码
pmd cpd --files ${EXECUTABLE_NAME} --minimum-tokens 20 --language objectivec --encoding UTF-8 --format net.sourceforge.pmd.cpd.XMLRenderer &gt; cpd-output.xml --failOnViolation true

# Running script
php ./cpd_script.php -cpd-xml cpd-output.xml
</code></pre>

<h4>2.在工程主目录下，创建cpd_script.php文件</h4>

<p>！！！需要安装好php</p>

<pre><code>&lt;?php
foreach (simplexml_load_file('cpd-output.xml')-&gt;duplication as $duplication) {
    $files = $duplication-&gt;xpath('file');
    foreach ($files as $file) {
        echo $file['path'].':'.$file['line'].':1: warning: '.$duplication['lines'].' copy-pasted lines from: '
            .implode(', ', array_map(function ($otherFile) { return $otherFile['path'].':'.$otherFile['line']; },
            array_filter($files, function ($f) use (&amp;$file) { return $f != $file; }))).PHP_EOL;
    }
}
?&gt;
</code></pre>

<p><img src="/images/post/2019-08-19-xcodeshi-yong-pmdsao-miao-zhong-fu-dai-ma/2.jpg" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C的文档生成工具-Appledoc]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/09/06/objective-c-de-wen-dang-sheng-cheng-gong-ju-appledoc/"/>
    <updated>2014-09-06T08:36:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/09/06/objective-c-de-wen-dang-sheng-cheng-gong-ju-appledoc</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/tomaz/appledoc">Appledoc</a>默认生成的文档风格与苹果的官方文档是一致的,生成docset，可以集成到xcode中。在源码中按住option再单击就可以调出相应方法的帮助。</p>

<!--more-->


<h4>1.Appledoc安装.</h4>

<pre><code>git clone git://github.com/tomaz/appledoc.git
cd appledoc
sudo sh install-appledoc.sh
</code></pre>

<p> 或者在安装<a href="http://brew.sh">Homebrew</a>后，使用Homebrew安装也可。</p>

<pre><code> brew install appledoc
</code></pre>

<h4>2.Appledoc生成。</h4>

<p>我使用曾经做的<a href="http://open.map.qq.com/ios_v1/index.html">iOS腾讯地图API</a>为例，把<strong>API</strong>的<strong>inc</strong>文件拷贝到目录<strong>QQMapAPI</strong>.指定工程名为<strong>QQMapAPI</strong>，公司名为<strong>tencent</strong></p>

<pre><code>ksnowlv@ksnowlvdeMacBook-Pro~/Movies/QQMapAPI$appledoc    -p QQMapAPI -c  tencent -v 1.0  -o  /Users/ksnowlv/Movies/QQMapAPI/inc  /Users/ksnowlv/Movies/QQMapAPI
appledoc version: 2.2 (build 963)
...
</code></pre>

<p> 使用<code>appledoc --help</code>查看相关命令</p>

<pre><code> ksnowlv@ksnowlvdeMacBook-Pro~/Movies/QQMapAPI$appledoc --help
Usage: appledoc [OPTIONS] &lt;paths to source dirs or files&gt;

PATHS
  -o, --output &lt;path&gt;                     Output path
  -t, --templates &lt;path&gt;                  Template files path
  --docset-install-path &lt;path&gt;        DocSet installation path
  -s, --include &lt;path&gt;                    Include static doc(s) at path
  -i, --ignore &lt;path&gt;                     Ignore given path
  -x, --exclude-output &lt;path&gt;             Exclude given path from output
  --index-desc &lt;path&gt;                 File including main index description

PROJECT INFO
  -p, --project-name &lt;string&gt;             Project name
  -v, --project-version &lt;string&gt;          Project version
  -c, --project-company &lt;string&gt;          Project company
  --company-id &lt;string&gt;               Company UTI (i.e. reverse DNS name)
</code></pre>

<h4>简单解释下:</h4>

<ul>
<li>-p:工程名称</li>
<li>-c:公司名称</li>
<li><code>-v</code>:版本号</li>
<li><code>/Users/ksnowlv/Movies/QQMapAPI/</code>:生成结果输出路径。成功以后,appledoc会新建一个文本文件来记录生成情况.</li>
<li><code>/Users/ksnowlv/Movies/QQMapAPI/inc</code>:扫描目标的目录所有文件。</li>
</ul>


<h4>3.文档查看。</h4>

<p>   在苹果帮助文档目录：<code>/Users/ksnowlv/Library/Developer/Shared/Documentation/DocSets</code>查看<strong>QQMapAPI</strong>生成的文档。
   <img src="/images/post/2014-09-06-objective-c-de-wen-dang-sheng-cheng-gong-ju-appledoc/qqmapapi_path.png" alt="image" /></p>

<p>   在xcode帮助文档中查看<strong>QQMapAPI文档</strong>
   <img src="/images/post/2014-09-06-objective-c-de-wen-dang-sheng-cheng-gong-ju-appledoc/qqmapapi_in_xcode_help.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faux Pas查找隐形bug利器]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/08/31/faux-pas-cha-zhao-yin-xing-bug-li-qi/"/>
    <updated>2014-08-31T17:16:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/08/31/faux-pas-cha-zhao-yin-xing-bug-li-qi</id>
    <content type="html"><![CDATA[<p><a href="http://fauxpasapp.com">Faux Pas</a>是一个Xcode辅助工具，查找隐形bug利器,</p>

<!--more-->


<p>主要功能:</p>

<blockquote><ul>
<li>找出隐藏的<strong>bug</strong>。</li>
<li>查找资源文件的错误。</li>
<li>查找本地化的错误</li>
<li>查找版本控制的错误</li>
<li>学习和实施最佳实践</li>
<li>执行代码风格</li>
<li>获得代码审查清单</li>
<li>&hellip;</li>
</ul>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XCConfig文件的使用]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/08/31/xcconfig-wen-jian-de-shi-yong/"/>
    <updated>2014-08-31T14:01:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/08/31/xcconfig-wen-jian-de-shi-yong</id>
    <content type="html"><![CDATA[<p><strong>XCConfig:XCode</strong>的<strong>Config</strong>文件，可以方便的对项目工程进行配置。只需要引入该工程配置文件即可。</p>

<!--more-->


<p>1.分别创建<strong>ConfigDebug.xcconfig</strong>/<strong>ConfigRelease.xcconfig</strong>文件</p>

<p><img src="/images/post/2014-08-31-xcconfig-wen-jian-de-shi-yong/xconfig_create.png" alt="image" /></p>

<p>2.分别把<strong>ConfigDebug.xcconfig</strong>/<strong>ConfigRelease.xcconfig</strong>引入到工程配置中</p>

<p><img src="/images/post/2014-08-31-xcconfig-wen-jian-de-shi-yong/xcconfig_use.png" alt="image" /></p>

<p>3.编辑<strong>ConfigDebug.xcconfig</strong>/<strong>ConfigRelease.xcconfig</strong>文件，分别<strong>对other link flag</strong>和<strong>Preprocessor Macros</strong>修改设置查看生效情况。</p>

<p>展开"<strong>other link flag</strong>&ldquo;后，直接选择<strong>Release</strong>整行复制到<strong>ConfigRelease.xcconfig</strong>中，再设置<strong>-ObjC</strong>，<strong>-weak_framework UIKit</strong>，<strong> -framework CoreLocation</strong>参数。</p>

<p>相同方法修改<strong>ConfigDebug.xcconfig</strong>即可。</p>

<p><strong>ConfigDebug.xcconfig</strong>内容如下:</p>

<p>``` objective-c</p>

<p>//:configuration = Debug
OTHER_LDFLAGS = -ObjC -weak_framework UIKit  -framework CoreLocation</p>

<p>//DEBUG <strong>TAOBAOTEST</strong>
GCC_PREPROCESSOR_DEFINITIONS = <strong>TAOBAOTEST</strong>= 0  $(inherited)</p>

<p>```</p>

<p><strong>ConfigRelease.xcconfig</strong>内容如下:</p>

<p>``` objective-c</p>

<p>//:configuration = Release
OTHER_LDFLAGS = -ObjC -weak_framework UIKit  -framework CoreLocation</p>

<p>```</p>

<p>4.修改完毕后，切换到XCConfigTest <strong>TARGETS</strong>视图查看设置。</p>

<pre><code>                            other link flag
</code></pre>

<p><img src="/images/post/2014-08-31-xcconfig-wen-jian-de-shi-yong/other_link_flag_test.png" alt="image" /></p>

<pre><code>                            Preprocessor Macros
</code></pre>

<p><img src="/images/post/2014-08-31-xcconfig-wen-jian-de-shi-yong/debug_flag_test.png" alt="image" /></p>

<p>5.添加测试代码对 <em>__TAOBAOTEST__</em>宏的测试。
查看<code>debug</code>状态下生效情况。</p>

<p><img src="/images/post/2014-08-31-xcconfig-wen-jian-de-shi-yong/xcconfig_test.png" alt="image" /></p>

<p>显然，<em>__TAOBAOTEST__</em>在<code>debug</code>状态下是生效的。
再测试下<code>release</code>状态下，是不生效的。</p>

<p>其它:</p>

<ul>
<li>1.<a href="https://github.com/cocoapods/cocoapods">CocoaPods</a>中使用<code>XCConfig</code>来进行配置。</li>
<li>2.<a href="https://github.com/jspahrsummers/xcconfigs">xcconfigs</a>，一个支持<code>XCConfig</code>的开源库，支持对<strong>iOS</strong>/<strong>Mac OS</strong>配置。</li>
</ul>


<h4>总结:不同的项目中，如果可以共用相同的配置环境，这种方式再方便不过了。</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为Xcode增加主题]]></title>
    <link href="http://ksnowlv.github.io/blog/2014/08/29/wei-xcode-zeng-jia-zhu-ti/"/>
    <updated>2014-08-29T19:06:00+08:00</updated>
    <id>http://ksnowlv.github.io/blog/2014/08/29/wei-xcode-zeng-jia-zhu-ti</id>
    <content type="html"><![CDATA[<p>把<code>Xcode</code>主题文件拷贝到<code>/Users/ksnowlv/Library/Developer/Xcode/UserData/FontAndColorThemes</code>目录下。</p>

<!--more-->


<p><img src="/images/post/2014-08-29-wei-xcode-zeng-jia-zhu-ti/xcode_theme_dir.png" alt="image" /></p>

<p>那以<code>dvtcolortheme</code>格式是什么文件呢？iOS/Mac OS中的<code>plist</code>，实质xml文件。</p>

<p>打开<code>Anubis.dvtcolortheme</code>文件，其内容如下(部分内容限于篇幅省略&hellip;):</p>

<p>``` xml</p>

<p>&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
&lt;!DOCTYPE plist PUBLIC &ldquo;&ndash;//Apple//DTD PLIST 1.0//EN&rdquo; &ldquo;<a href="http://www.apple.com/DTDs/PropertyList-1.0.dtd">http://www.apple.com/DTDs/PropertyList-1.0.dtd</a>&rdquo;>
<plist version="1.0">
<dict></p>

<pre><code>&lt;key&gt;DVTConsoleDebuggerInputTextColor&lt;/key&gt;
&lt;string&gt;0.7653 0.699234 0.758969 1&lt;/string&gt;
&lt;key&gt;DVTConsoleDebuggerInputTextFont&lt;/key&gt;
&lt;string&gt;Menlo-Regular - 11.0&lt;/string&gt;
&lt;key&gt;DVTConsoleDebuggerOutputTextColor&lt;/key&gt;
&lt;string&gt;0.6431 0.5881 0.637824 1&lt;/string&gt;
&lt;key&gt;DVTConsoleDebuggerOutputTextFont&lt;/key&gt;
&lt;string&gt;Menlo-Regular - 11.0&lt;/string&gt;
...
&lt;dict&gt;
    &lt;key&gt;xcode.syntax.attribute&lt;/key&gt;
    &lt;string&gt;0.335 0.456 0.488 1&lt;/string&gt;
    &lt;key&gt;xcode.syntax.character&lt;/key&gt;
    &lt;string&gt;0.616 0.499 0.951 1&lt;/string&gt;
    &lt;key&gt;xcode.syntax.comment&lt;/key&gt;
    &lt;string&gt;0.651579 0.600072 0.644145 1&lt;/string&gt;
   ...
&lt;/dict&gt;
&lt;key&gt;DVTSourceTextSyntaxFonts&lt;/key&gt;
&lt;dict&gt;
    &lt;key&gt;xcode.syntax.attribute&lt;/key&gt;
    &lt;string&gt;SourceCodePro-Regular - 12.0&lt;/string&gt;
    &lt;key&gt;xcode.syntax.character&lt;/key&gt;
    &lt;string&gt;SourceCodePro-Regular - 12.0&lt;/string&gt;
   ...
&lt;/dict&gt;
</code></pre>

<p></dict>
</plist></p>

<p>```</p>

<p>常用的Xcode主题</p>

<p>1.<a href="https://github.com/jbrennan/xcode4themes">Solarized Light &amp; Dark</a></p>

<p><img src="/images/post/2014-08-29-wei-xcode-zeng-jia-zhu-ti/solarized_theme_overview.png" alt="image" /></p>

<p>2.<a href="https://github.com/chriskempson/tomorrow-theme">tomorrow-theme</a></p>

<p><img src="/images/post/2014-08-29-wei-xcode-zeng-jia-zhu-ti/tomorrow_theme_overview.png" alt="image" /></p>

<p>3.<a href="https://github.com/brunodecarvalho/xcode-themes">Twilight</a></p>

<p><img src="/images/post/2014-08-29-wei-xcode-zeng-jia-zhu-ti/twilight_theme_overview.png" alt="image" /></p>

<p>4.<a href="https://raw.githubusercontent.com/gtranchedone/XcodeThemes/master/Anubis.dvtcolortheme">Anubis</a></p>

<p><img src="/images/post/2014-08-29-wei-xcode-zeng-jia-zhu-ti/anubis_theme_overview.png" alt="image" /></p>

<p>5.<a href="https://raw.githubusercontent.com/armadillu/XcodeColorSchemes/master/Xcode5/armadillu.dvtcolortheme">armadillu</a></p>

<p><img src="/images/post/2014-08-29-wei-xcode-zeng-jia-zhu-ti/armadillu_theme_overview.png" alt="image" /></p>

<p>6.<a href="https://github.com/alenofx/today-xcode-theme">today-xcode-theme</a></p>

<p><img src="/images/post/2014-08-29-wei-xcode-zeng-jia-zhu-ti/today_theme_overview.png" alt="image" /></p>

<p>7.<a href="https://github.com/colinta/zenburn">zenburn</a></p>

<p><img src="/images/post/2014-08-29-wei-xcode-zeng-jia-zhu-ti/zenburn_theme_overview.png" alt="image" /></p>

<p>8.<a href="https://github.com/UrbanApps/Urban">Urban</a></p>

<p><img src="/images/post/2014-08-29-wei-xcode-zeng-jia-zhu-ti/urban_theme_overview.png" alt="image" /></p>

<p>9.<a href="https://github.com/JacksonGariety/Toy-Chest-Theme">Toy-Chest-Theme</a></p>

<p><img src="/images/post/2014-08-29-wei-xcode-zeng-jia-zhu-ti/toy_chest_theme_overview.png" alt="image" /></p>

<p>10.<a href="https://github.com/tkemp/Colour-and-standards">Colour-and-standards</a></p>

<p><img src="/images/post/2014-08-29-wei-xcode-zeng-jia-zhu-ti/chocolate_cake_theme_overview.png" alt="image" /></p>
]]></content>
  </entry>
  
</feed>
